
Vanneman_Frogger_first_attempt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000054  00800100  000025a0  00002634  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000025a0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000160  00800154  00800154  00002688  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002688  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000026e4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000003d0  00000000  00000000  00002724  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003890  00000000  00000000  00002af4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001420  00000000  00000000  00006384  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000022ad  00000000  00000000  000077a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000b64  00000000  00000000  00009a54  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000010e4  00000000  00000000  0000a5b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002a24  00000000  00000000  0000b69c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000330  00000000  00000000  0000e0c0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <__ctors_end>
       4:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
       8:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
       c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      10:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      14:	0c 94 58 01 	jmp	0x2b0	; 0x2b0 <__vector_5>
      18:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      1c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      20:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      24:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      28:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      2c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      30:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      34:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      38:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      3c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      40:	0c 94 22 0e 	jmp	0x1c44	; 0x1c44 <__vector_16>
      44:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      48:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      4c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      50:	0c 94 c7 0c 	jmp	0x198e	; 0x198e <__vector_20>
      54:	0c 94 85 0c 	jmp	0x190a	; 0x190a <__vector_21>
      58:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      5c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      60:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      64:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      68:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      6c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      70:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      74:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      78:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      7c:	0b 02       	muls	r16, r27
      7e:	be 01       	movw	r22, r28
      80:	be 01       	movw	r22, r28
      82:	be 01       	movw	r22, r28
      84:	0b 02       	muls	r16, r27
      86:	de 01       	movw	r26, r28
      88:	de 01       	movw	r26, r28
      8a:	fe 01       	movw	r30, r28
      8c:	83 03       	fmuls	r16, r19
      8e:	86 03       	fmuls	r16, r22
      90:	86 03       	fmuls	r16, r22
      92:	86 03       	fmuls	r16, r22
      94:	83 03       	fmuls	r16, r19
      96:	8a 03       	fmulsu	r16, r18
      98:	8a 03       	fmulsu	r16, r18
      9a:	8e 03       	fmulsu	r16, r22

0000009c <__trampolines_end>:
      9c:	4c 65       	ori	r20, 0x5C	; 92
      9e:	76 65       	ori	r23, 0x56	; 86
      a0:	6c 20       	and	r6, r12
      a2:	25 64       	ori	r18, 0x45	; 69
	...

000000a5 <__c.2343>:
      a5:	25 64 00                                            %d.

000000a8 <__c.2340>:
      a8:	53 63 6f 72 65 3a 00                                Score:.

000000af <__c.2333>:
      af:	50 72 65 73 73 20 61 20 62 75 74 74 6f 6e 20 74     Press a button t
      bf:	6f 20 73 74 61 72 74 20 61 67 61 69 6e 00           o start again.

000000cd <__c.2331>:
      cd:	47 41 4d 45 20 4f 56 45 52 00                       GAME OVER.

000000d7 <__c.2301>:
      d7:	43 53 53 45 32 30 31 30 20 70 72 6f 6a 65 63 74     CSSE2010 project
      e7:	20 62 79 20 52 65 62 65 63 63 61 20 56 61 6e 6e      by Rebecca Vann
      f7:	65 6d 61 6e 00                                      eman.

000000fc <__c.2299>:
      fc:	46 72 6f 67 67 65 72 20 62 79 20 34 36 32 35 38     Frogger by 46258
     10c:	38 33 39 00                                         839.

00000110 <numbers>:
     110:	7b 01 78 01 74 01 70 01 6c 01 68 01 64 01 60 01     {.x.t.p.l.h.d.`.
     120:	5c 01 58 01                                         \.X.

00000124 <letters>:
     124:	ea 01 e6 01 e2 01 de 01 da 01 d6 01 d2 01 ce 01     ................
     134:	cb 01 c7 01 c3 01 bf 01 ba 01 b6 01 b2 01 ae 01     ................
     144:	a9 01 a5 01 a1 01 9c 01 98 01 93 01 8e 01 89 01     ................
     154:	84 01 7f 01                                         ....

00000158 <cols_9>:
     158:	64 92 92 7d                                         d..}

0000015c <cols_8>:
     15c:	6c 92 92 6d                                         l..m

00000160 <cols_7>:
     160:	80 9e a0 c1                                         ....

00000164 <cols_6>:
     164:	7c 92 92 4d                                         |..M

00000168 <cols_5>:
     168:	e4 a2 a2 9d                                         ....

0000016c <cols_4>:
     16c:	18 28 48 ff                                         .(H.

00000170 <cols_3>:
     170:	44 92 92 6d                                         D..m

00000174 <cols_2>:
     174:	46 8a 92 63                                         F..c

00000178 <cols_1>:
     178:	42 fe 03                                            B..

0000017b <cols_0>:
     17b:	7c 92 a2 7d                                         |..}

0000017f <cols_Z>:
     17f:	86 8a 92 a2 c3                                      .....

00000184 <cols_Y>:
     184:	e0 10 0e 10 e1                                      .....

00000189 <cols_X>:
     189:	c6 28 10 28 c7                                      .(.(.

0000018e <cols_W>:
     18e:	fc 02 1c 02 fd                                      .....

00000193 <cols_V>:
     193:	f8 04 02 04 f9                                      .....

00000198 <cols_U>:
     198:	fc 02 02 fd                                         ....

0000019c <cols_T>:
     19c:	80 80 fe 80 81                                      .....

000001a1 <cols_S>:
     1a1:	64 92 92 4d                                         d..M

000001a5 <cols_R>:
     1a5:	fe 90 98 67                                         ...g

000001a9 <cols_Q>:
     1a9:	7c 82 8a 7c 03                                      |..|.

000001ae <cols_P>:
     1ae:	fe 90 90 61                                         ...a

000001b2 <cols_O>:
     1b2:	7c 82 82 7d                                         |..}

000001b6 <cols_N>:
     1b6:	fe 20 10 ff                                         . ..

000001ba <cols_M>:
     1ba:	fe 40 30 40 ff                                      .@0@.

000001bf <cols_L>:
     1bf:	fe 02 02 03                                         ....

000001c3 <cols_K>:
     1c3:	fe 10 28 c7                                         ..(.

000001c7 <cols_J>:
     1c7:	04 02 02 fd                                         ....

000001cb <cols_I>:
     1cb:	82 fe 83                                            ...

000001ce <cols_H>:
     1ce:	fe 10 10 ff                                         ....

000001d2 <cols_G>:
     1d2:	7c 82 92 5d                                         |..]

000001d6 <cols_F>:
     1d6:	fe 90 90 81                                         ....

000001da <cols_E>:
     1da:	fe 92 92 83                                         ....

000001de <cols_D>:
     1de:	fe 82 82 7d                                         ...}

000001e2 <cols_C>:
     1e2:	7c 82 82 45                                         |..E

000001e6 <cols_B>:
     1e6:	fe 92 92 6d                                         ...m

000001ea <cols_A>:
     1ea:	7e 90 90 7f                                         ~...

000001ee <__c.2040>:
     1ee:	1b 5b 32 4a 00                                      .[2J.

000001f3 <__c.2025>:
     1f3:	1b 5b 25 64 3b 25 64 48 00                          .[%d;%dH.

000001fc <__ctors_end>:
     1fc:	11 24       	eor	r1, r1
     1fe:	1f be       	out	0x3f, r1	; 63
     200:	cf ef       	ldi	r28, 0xFF	; 255
     202:	d8 e0       	ldi	r29, 0x08	; 8
     204:	de bf       	out	0x3e, r29	; 62
     206:	cd bf       	out	0x3d, r28	; 61

00000208 <__do_copy_data>:
     208:	11 e0       	ldi	r17, 0x01	; 1
     20a:	a0 e0       	ldi	r26, 0x00	; 0
     20c:	b1 e0       	ldi	r27, 0x01	; 1
     20e:	e0 ea       	ldi	r30, 0xA0	; 160
     210:	f5 e2       	ldi	r31, 0x25	; 37
     212:	02 c0       	rjmp	.+4      	; 0x218 <__do_copy_data+0x10>
     214:	05 90       	lpm	r0, Z+
     216:	0d 92       	st	X+, r0
     218:	a4 35       	cpi	r26, 0x54	; 84
     21a:	b1 07       	cpc	r27, r17
     21c:	d9 f7       	brne	.-10     	; 0x214 <__do_copy_data+0xc>

0000021e <__do_clear_bss>:
     21e:	22 e0       	ldi	r18, 0x02	; 2
     220:	a4 e5       	ldi	r26, 0x54	; 84
     222:	b1 e0       	ldi	r27, 0x01	; 1
     224:	01 c0       	rjmp	.+2      	; 0x228 <.do_clear_bss_start>

00000226 <.do_clear_bss_loop>:
     226:	1d 92       	st	X+, r1

00000228 <.do_clear_bss_start>:
     228:	a4 3b       	cpi	r26, 0xB4	; 180
     22a:	b2 07       	cpc	r27, r18
     22c:	e1 f7       	brne	.-8      	; 0x226 <.do_clear_bss_loop>
     22e:	0e 94 c9 0a 	call	0x1592	; 0x1592 <main>
     232:	0c 94 ce 12 	jmp	0x259c	; 0x259c <_exit>

00000236 <__bad_interrupt>:
     236:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000023a <init_button_interrupts>:
// using a pin change interrupt. These pins correspond to pin
// change interrupts PCINT8 to PCINT11 which are covered by
// Pin change interrupt 1.
void init_button_interrupts(void) {
	// Enable the interrupt (see datasheet page 91)
	PCICR |= (1<<PCIE1);
     23a:	e8 e6       	ldi	r30, 0x68	; 104
     23c:	f0 e0       	ldi	r31, 0x00	; 0
     23e:	80 81       	ld	r24, Z
     240:	82 60       	ori	r24, 0x02	; 2
     242:	80 83       	st	Z, r24
	
	// Make sure the interrupt flag is cleared (by writing a 
	// 1 to it) (see datasheet page 92)
	PCIFR |= (1<<PCIF1);
     244:	d9 9a       	sbi	0x1b, 1	; 27
	
	// Choose which pins we're interested in by setting
	// the relevant bits in the mask register (see datasheet page 94)
	PCMSK1 |= (1<<PCINT8)|(1<<PCINT9)|(1<<PCINT10)|(1<<PCINT11);	
     246:	ec e6       	ldi	r30, 0x6C	; 108
     248:	f0 e0       	ldi	r31, 0x00	; 0
     24a:	80 81       	ld	r24, Z
     24c:	8f 60       	ori	r24, 0x0F	; 15
     24e:	80 83       	st	Z, r24
	
	// Empty the button push queue
	queue_length = 0;
     250:	10 92 54 01 	sts	0x0154, r1	; 0x800154 <__data_end>
     254:	08 95       	ret

00000256 <button_pushed>:
}

int8_t button_pushed(void) {
	int8_t return_value = NO_BUTTON_PUSHED;	// Assume no button pushed
	if(queue_length > 0) {
     256:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <__data_end>
     25a:	18 16       	cp	r1, r24
     25c:	3c f5       	brge	.+78     	; 0x2ac <button_pushed+0x56>
		// Remove the first element off the queue and move all the other
		// entries closer to the front of the queue. We turn off interrupts (if on)
		// before we make any changes to the queue. If interrupts were on
		// we turn them back on when done.
		return_value = button_queue[0];
     25e:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <button_queue>
		
		// Save whether interrupts were enabled and turn them off
		int8_t interrupts_were_enabled = bit_is_set(SREG, SREG_I);
     262:	6f b7       	in	r22, 0x3f	; 63
		cli();
     264:	f8 94       	cli
		
		for(uint8_t i = 1; i < queue_length; i++) {
     266:	90 91 54 01 	lds	r25, 0x0154	; 0x800154 <__data_end>
     26a:	92 30       	cpi	r25, 0x02	; 2
     26c:	b4 f0       	brlt	.+44     	; 0x29a <button_pushed+0x44>
     26e:	21 e0       	ldi	r18, 0x01	; 1
     270:	30 e0       	ldi	r19, 0x00	; 0
     272:	91 e0       	ldi	r25, 0x01	; 1
			button_queue[i-1] = button_queue[i];
     274:	f9 01       	movw	r30, r18
     276:	eb 5a       	subi	r30, 0xAB	; 171
     278:	fe 4f       	sbci	r31, 0xFE	; 254
     27a:	40 81       	ld	r20, Z
     27c:	f9 01       	movw	r30, r18
     27e:	ec 5a       	subi	r30, 0xAC	; 172
     280:	fe 4f       	sbci	r31, 0xFE	; 254
     282:	40 83       	st	Z, r20
		
		// Save whether interrupts were enabled and turn them off
		int8_t interrupts_were_enabled = bit_is_set(SREG, SREG_I);
		cli();
		
		for(uint8_t i = 1; i < queue_length; i++) {
     284:	9f 5f       	subi	r25, 0xFF	; 255
     286:	29 2f       	mov	r18, r25
     288:	30 e0       	ldi	r19, 0x00	; 0
     28a:	40 91 54 01 	lds	r20, 0x0154	; 0x800154 <__data_end>
     28e:	04 2e       	mov	r0, r20
     290:	00 0c       	add	r0, r0
     292:	55 0b       	sbc	r21, r21
     294:	24 17       	cp	r18, r20
     296:	35 07       	cpc	r19, r21
     298:	6c f3       	brlt	.-38     	; 0x274 <button_pushed+0x1e>
			button_queue[i-1] = button_queue[i];
		}
		queue_length--;
     29a:	90 91 54 01 	lds	r25, 0x0154	; 0x800154 <__data_end>
     29e:	91 50       	subi	r25, 0x01	; 1
     2a0:	90 93 54 01 	sts	0x0154, r25	; 0x800154 <__data_end>
		
		if(interrupts_were_enabled) {
     2a4:	66 23       	and	r22, r22
     2a6:	1c f4       	brge	.+6      	; 0x2ae <button_pushed+0x58>
			// Turn them back on again
			sei();
     2a8:	78 94       	sei
     2aa:	08 95       	ret
	// Empty the button push queue
	queue_length = 0;
}

int8_t button_pushed(void) {
	int8_t return_value = NO_BUTTON_PUSHED;	// Assume no button pushed
     2ac:	8f ef       	ldi	r24, 0xFF	; 255
			// Turn them back on again
			sei();
		}
	}
	return return_value;
}
     2ae:	08 95       	ret

000002b0 <__vector_5>:

// Interrupt handler for a change on buttons
ISR(PCINT1_vect) {
     2b0:	1f 92       	push	r1
     2b2:	0f 92       	push	r0
     2b4:	0f b6       	in	r0, 0x3f	; 63
     2b6:	0f 92       	push	r0
     2b8:	11 24       	eor	r1, r1
     2ba:	2f 93       	push	r18
     2bc:	3f 93       	push	r19
     2be:	4f 93       	push	r20
     2c0:	5f 93       	push	r21
     2c2:	6f 93       	push	r22
     2c4:	7f 93       	push	r23
     2c6:	8f 93       	push	r24
     2c8:	9f 93       	push	r25
     2ca:	ef 93       	push	r30
     2cc:	ff 93       	push	r31
	// Get the current state of the buttons. We'll compare this with
	// the last state to see what has changed.
	uint8_t button_state = PINB & 0x0F;
     2ce:	43 b1       	in	r20, 0x03	; 3
     2d0:	4f 70       	andi	r20, 0x0F	; 15
     2d2:	80 e0       	ldi	r24, 0x00	; 0
     2d4:	90 e0       	ldi	r25, 0x00	; 0
	// Any button pushes are added to the queue of button pushes (if
	// there is space). We ignore button releases so we're just looking
	// for a transition from 0 in the last_button_state bit to a 1 in the 
	// button_state.
	for(uint8_t pin=0; pin<=3; pin++) {
		if(queue_length < BUTTON_QUEUE_SIZE && 
     2d6:	64 2f       	mov	r22, r20
     2d8:	70 e0       	ldi	r23, 0x00	; 0
     2da:	20 91 54 01 	lds	r18, 0x0154	; 0x800154 <__data_end>
     2de:	24 30       	cpi	r18, 0x04	; 4
     2e0:	04 f5       	brge	.+64     	; 0x322 <__vector_5+0x72>
     2e2:	9b 01       	movw	r18, r22
     2e4:	08 2e       	mov	r0, r24
     2e6:	02 c0       	rjmp	.+4      	; 0x2ec <__vector_5+0x3c>
     2e8:	35 95       	asr	r19
     2ea:	27 95       	ror	r18
     2ec:	0a 94       	dec	r0
     2ee:	e2 f7       	brpl	.-8      	; 0x2e8 <__vector_5+0x38>
     2f0:	20 ff       	sbrs	r18, 0
     2f2:	17 c0       	rjmp	.+46     	; 0x322 <__vector_5+0x72>
				(button_state & (1<<pin)) && 
				!(last_button_state & (1<<pin))) {
     2f4:	20 91 59 01 	lds	r18, 0x0159	; 0x800159 <last_button_state>
	// there is space). We ignore button releases so we're just looking
	// for a transition from 0 in the last_button_state bit to a 1 in the 
	// button_state.
	for(uint8_t pin=0; pin<=3; pin++) {
		if(queue_length < BUTTON_QUEUE_SIZE && 
				(button_state & (1<<pin)) && 
     2f8:	30 e0       	ldi	r19, 0x00	; 0
     2fa:	08 2e       	mov	r0, r24
     2fc:	02 c0       	rjmp	.+4      	; 0x302 <__vector_5+0x52>
     2fe:	35 95       	asr	r19
     300:	27 95       	ror	r18
     302:	0a 94       	dec	r0
     304:	e2 f7       	brpl	.-8      	; 0x2fe <__vector_5+0x4e>
     306:	20 fd       	sbrc	r18, 0
     308:	0c c0       	rjmp	.+24     	; 0x322 <__vector_5+0x72>
				!(last_button_state & (1<<pin))) {
			// Add the button push to the queue (and update the
			// length of the queue
			button_queue[queue_length++] = pin;
     30a:	e0 91 54 01 	lds	r30, 0x0154	; 0x800154 <__data_end>
     30e:	21 e0       	ldi	r18, 0x01	; 1
     310:	2e 0f       	add	r18, r30
     312:	20 93 54 01 	sts	0x0154, r18	; 0x800154 <__data_end>
     316:	0e 2e       	mov	r0, r30
     318:	00 0c       	add	r0, r0
     31a:	ff 0b       	sbc	r31, r31
     31c:	eb 5a       	subi	r30, 0xAB	; 171
     31e:	fe 4f       	sbci	r31, 0xFE	; 254
     320:	80 83       	st	Z, r24
     322:	01 96       	adiw	r24, 0x01	; 1
	// Iterate over all the buttons and see which ones have changed.
	// Any button pushes are added to the queue of button pushes (if
	// there is space). We ignore button releases so we're just looking
	// for a transition from 0 in the last_button_state bit to a 1 in the 
	// button_state.
	for(uint8_t pin=0; pin<=3; pin++) {
     324:	84 30       	cpi	r24, 0x04	; 4
     326:	91 05       	cpc	r25, r1
     328:	c1 f6       	brne	.-80     	; 0x2da <__vector_5+0x2a>
			button_queue[queue_length++] = pin;
		}
	}
	
	// Remember this button state
	last_button_state = button_state;
     32a:	40 93 59 01 	sts	0x0159, r20	; 0x800159 <last_button_state>
}
     32e:	ff 91       	pop	r31
     330:	ef 91       	pop	r30
     332:	9f 91       	pop	r25
     334:	8f 91       	pop	r24
     336:	7f 91       	pop	r23
     338:	6f 91       	pop	r22
     33a:	5f 91       	pop	r21
     33c:	4f 91       	pop	r20
     33e:	3f 91       	pop	r19
     340:	2f 91       	pop	r18
     342:	0f 90       	pop	r0
     344:	0f be       	out	0x3f, r0	; 63
     346:	0f 90       	pop	r0
     348:	1f 90       	pop	r1
     34a:	18 95       	reti

0000034c <show_button_state>:

uint8_t show_button_state(void){
	return last_button_state;
     34c:	80 91 59 01 	lds	r24, 0x0159	; 0x800159 <last_button_state>
     350:	08 95       	ret

00000352 <will_frog_die_at_position>:
void init_led(void) {
	DDRA |= (1<<DDRA3) | (1<<DDRA2) | (1<<DDRA1) | (1<<DDRA0);
	PORTA = 7;
}

void increment_led(void) {
     352:	0f 93       	push	r16
     354:	26 2f       	mov	r18, r22
     356:	60 31       	cpi	r22, 0x10	; 16
     358:	08 f0       	brcs	.+2      	; 0x35c <will_frog_die_at_position+0xa>
     35a:	5b c0       	rjmp	.+182    	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
     35c:	48 2f       	mov	r20, r24
     35e:	08 2e       	mov	r0, r24
     360:	00 0c       	add	r0, r0
     362:	55 0b       	sbc	r21, r21
     364:	66 0b       	sbc	r22, r22
     366:	77 0b       	sbc	r23, r23
     368:	48 30       	cpi	r20, 0x08	; 8
     36a:	51 05       	cpc	r21, r1
     36c:	28 f4       	brcc	.+10     	; 0x378 <will_frog_die_at_position+0x26>
     36e:	fa 01       	movw	r30, r20
     370:	e2 5c       	subi	r30, 0xC2	; 194
     372:	ff 4f       	sbci	r31, 0xFF	; 255
     374:	0c 94 72 0f 	jmp	0x1ee4	; 0x1ee4 <__tablejump2__>
     378:	81 e0       	ldi	r24, 0x01	; 1
     37a:	4e c0       	rjmp	.+156    	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
     37c:	81 50       	subi	r24, 0x01	; 1
     37e:	e8 2f       	mov	r30, r24
     380:	f0 e0       	ldi	r31, 0x00	; 0
     382:	df 01       	movw	r26, r30
     384:	a0 5a       	subi	r26, 0xA0	; 160
     386:	be 4f       	sbci	r27, 0xFE	; 254
     388:	0c 91       	ld	r16, X
     38a:	02 0f       	add	r16, r18
     38c:	00 34       	cpi	r16, 0x40	; 64
     38e:	08 f0       	brcs	.+2      	; 0x392 <will_frog_die_at_position+0x40>
     390:	00 54       	subi	r16, 0x40	; 64
     392:	ee 0f       	add	r30, r30
     394:	ff 1f       	adc	r31, r31
     396:	ee 0f       	add	r30, r30
     398:	ff 1f       	adc	r31, r31
     39a:	ee 0f       	add	r30, r30
     39c:	ff 1f       	adc	r31, r31
     39e:	e0 5e       	subi	r30, 0xE0	; 224
     3a0:	fe 4f       	sbci	r31, 0xFE	; 254
     3a2:	20 81       	ld	r18, Z
     3a4:	31 81       	ldd	r19, Z+1	; 0x01
     3a6:	42 81       	ldd	r20, Z+2	; 0x02
     3a8:	53 81       	ldd	r21, Z+3	; 0x03
     3aa:	64 81       	ldd	r22, Z+4	; 0x04
     3ac:	75 81       	ldd	r23, Z+5	; 0x05
     3ae:	86 81       	ldd	r24, Z+6	; 0x06
     3b0:	97 81       	ldd	r25, Z+7	; 0x07
     3b2:	0e 94 7a 0f 	call	0x1ef4	; 0x1ef4 <__lshrdi3>
     3b6:	82 2f       	mov	r24, r18
     3b8:	81 70       	andi	r24, 0x01	; 1
     3ba:	2e c0       	rjmp	.+92     	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
     3bc:	85 50       	subi	r24, 0x05	; 5
     3be:	90 e0       	ldi	r25, 0x00	; 0
     3c0:	fc 01       	movw	r30, r24
     3c2:	e2 5a       	subi	r30, 0xA2	; 162
     3c4:	fe 4f       	sbci	r31, 0xFE	; 254
     3c6:	60 81       	ld	r22, Z
     3c8:	26 0f       	add	r18, r22
     3ca:	20 32       	cpi	r18, 0x20	; 32
     3cc:	08 f0       	brcs	.+2      	; 0x3d0 <will_frog_die_at_position+0x7e>
     3ce:	20 52       	subi	r18, 0x20	; 32
     3d0:	88 0f       	add	r24, r24
     3d2:	99 1f       	adc	r25, r25
     3d4:	88 0f       	add	r24, r24
     3d6:	99 1f       	adc	r25, r25
     3d8:	fc 01       	movw	r30, r24
     3da:	e8 5e       	subi	r30, 0xE8	; 232
     3dc:	fe 4f       	sbci	r31, 0xFE	; 254
     3de:	80 81       	ld	r24, Z
     3e0:	91 81       	ldd	r25, Z+1	; 0x01
     3e2:	a2 81       	ldd	r26, Z+2	; 0x02
     3e4:	b3 81       	ldd	r27, Z+3	; 0x03
     3e6:	04 c0       	rjmp	.+8      	; 0x3f0 <will_frog_die_at_position+0x9e>
     3e8:	b6 95       	lsr	r27
     3ea:	a7 95       	ror	r26
     3ec:	97 95       	ror	r25
     3ee:	87 95       	ror	r24
     3f0:	2a 95       	dec	r18
     3f2:	d2 f7       	brpl	.-12     	; 0x3e8 <will_frog_die_at_position+0x96>
     3f4:	21 e0       	ldi	r18, 0x01	; 1
     3f6:	82 27       	eor	r24, r18
     3f8:	81 70       	andi	r24, 0x01	; 1
     3fa:	0e c0       	rjmp	.+28     	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
     3fc:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <riverbank_status>
     400:	90 91 5b 01 	lds	r25, 0x015B	; 0x80015b <riverbank_status+0x1>
     404:	02 c0       	rjmp	.+4      	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
     406:	96 95       	lsr	r25
     408:	87 95       	ror	r24
     40a:	2a 95       	dec	r18
     40c:	e2 f7       	brpl	.-8      	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
     40e:	81 70       	andi	r24, 0x01	; 1
     410:	03 c0       	rjmp	.+6      	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
     412:	81 e0       	ldi	r24, 0x01	; 1
     414:	01 c0       	rjmp	.+2      	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
     416:	80 e0       	ldi	r24, 0x00	; 0
     418:	0f 91       	pop	r16
     41a:	08 95       	ret

0000041c <redraw_roadside>:
     41c:	cf 93       	push	r28
     41e:	df 93       	push	r29
     420:	cd b7       	in	r28, 0x3d	; 61
     422:	de b7       	in	r29, 0x3e	; 62
     424:	60 97       	sbiw	r28, 0x10	; 16
     426:	0f b6       	in	r0, 0x3f	; 63
     428:	f8 94       	cli
     42a:	de bf       	out	0x3e, r29	; 62
     42c:	0f be       	out	0x3f, r0	; 63
     42e:	cd bf       	out	0x3d, r28	; 61
     430:	fe 01       	movw	r30, r28
     432:	31 96       	adiw	r30, 0x01	; 1
     434:	9e 01       	movw	r18, r28
     436:	2f 5e       	subi	r18, 0xEF	; 239
     438:	3f 4f       	sbci	r19, 0xFF	; 255
     43a:	91 e1       	ldi	r25, 0x11	; 17
     43c:	91 93       	st	Z+, r25
     43e:	e2 17       	cp	r30, r18
     440:	f3 07       	cpc	r31, r19
     442:	e1 f7       	brne	.-8      	; 0x43c <redraw_roadside+0x20>
     444:	be 01       	movw	r22, r28
     446:	6f 5f       	subi	r22, 0xFF	; 255
     448:	7f 4f       	sbci	r23, 0xFF	; 255
     44a:	0e 94 be 06 	call	0xd7c	; 0xd7c <ledmatrix_update_row>
     44e:	60 96       	adiw	r28, 0x10	; 16
     450:	0f b6       	in	r0, 0x3f	; 63
     452:	f8 94       	cli
     454:	de bf       	out	0x3e, r29	; 62
     456:	0f be       	out	0x3f, r0	; 63
     458:	cd bf       	out	0x3d, r28	; 61
     45a:	df 91       	pop	r29
     45c:	cf 91       	pop	r28
     45e:	08 95       	ret

00000460 <redraw_traffic_lane>:
     460:	3f 92       	push	r3
     462:	4f 92       	push	r4
     464:	5f 92       	push	r5
     466:	6f 92       	push	r6
     468:	7f 92       	push	r7
     46a:	8f 92       	push	r8
     46c:	9f 92       	push	r9
     46e:	af 92       	push	r10
     470:	bf 92       	push	r11
     472:	cf 92       	push	r12
     474:	df 92       	push	r13
     476:	ef 92       	push	r14
     478:	ff 92       	push	r15
     47a:	0f 93       	push	r16
     47c:	1f 93       	push	r17
     47e:	cf 93       	push	r28
     480:	df 93       	push	r29
     482:	cd b7       	in	r28, 0x3d	; 61
     484:	de b7       	in	r29, 0x3e	; 62
     486:	60 97       	sbiw	r28, 0x10	; 16
     488:	0f b6       	in	r0, 0x3f	; 63
     48a:	f8 94       	cli
     48c:	de bf       	out	0x3e, r29	; 62
     48e:	0f be       	out	0x3f, r0	; 63
     490:	cd bf       	out	0x3d, r28	; 61
     492:	48 2e       	mov	r4, r24
     494:	28 2f       	mov	r18, r24
     496:	30 e0       	ldi	r19, 0x00	; 0
     498:	f9 01       	movw	r30, r18
     49a:	e0 5a       	subi	r30, 0xA0	; 160
     49c:	fe 4f       	sbci	r31, 0xFE	; 254
     49e:	e0 81       	ld	r30, Z
     4a0:	c9 01       	movw	r24, r18
     4a2:	88 0f       	add	r24, r24
     4a4:	99 1f       	adc	r25, r25
     4a6:	88 0f       	add	r24, r24
     4a8:	99 1f       	adc	r25, r25
     4aa:	88 0f       	add	r24, r24
     4ac:	99 1f       	adc	r25, r25
     4ae:	80 5e       	subi	r24, 0xE0	; 224
     4b0:	9e 4f       	sbci	r25, 0xFE	; 254
     4b2:	dc 01       	movw	r26, r24
     4b4:	5c 90       	ld	r5, X
     4b6:	11 96       	adiw	r26, 0x01	; 1
     4b8:	6c 90       	ld	r6, X
     4ba:	11 97       	sbiw	r26, 0x01	; 1
     4bc:	12 96       	adiw	r26, 0x02	; 2
     4be:	7c 90       	ld	r7, X
     4c0:	12 97       	sbiw	r26, 0x02	; 2
     4c2:	13 96       	adiw	r26, 0x03	; 3
     4c4:	8c 90       	ld	r8, X
     4c6:	13 97       	sbiw	r26, 0x03	; 3
     4c8:	14 96       	adiw	r26, 0x04	; 4
     4ca:	9c 90       	ld	r9, X
     4cc:	14 97       	sbiw	r26, 0x04	; 4
     4ce:	15 96       	adiw	r26, 0x05	; 5
     4d0:	1c 91       	ld	r17, X
     4d2:	15 97       	sbiw	r26, 0x05	; 5
     4d4:	16 96       	adiw	r26, 0x06	; 6
     4d6:	3c 90       	ld	r3, X
     4d8:	16 97       	sbiw	r26, 0x06	; 6
     4da:	17 96       	adiw	r26, 0x07	; 7
     4dc:	fc 91       	ld	r31, X
     4de:	ce 01       	movw	r24, r28
     4e0:	01 96       	adiw	r24, 0x01	; 1
     4e2:	7c 01       	movw	r14, r24
     4e4:	6e 01       	movw	r12, r28
     4e6:	91 e1       	ldi	r25, 0x11	; 17
     4e8:	c9 0e       	add	r12, r25
     4ea:	d1 1c       	adc	r13, r1
     4ec:	d9 01       	movw	r26, r18
     4ee:	a0 50       	subi	r26, 0x00	; 0
     4f0:	bf 4f       	sbci	r27, 0xFF	; 255
     4f2:	5d 01       	movw	r10, r26
     4f4:	25 2d       	mov	r18, r5
     4f6:	36 2d       	mov	r19, r6
     4f8:	47 2d       	mov	r20, r7
     4fa:	58 2d       	mov	r21, r8
     4fc:	69 2d       	mov	r22, r9
     4fe:	71 2f       	mov	r23, r17
     500:	83 2d       	mov	r24, r3
     502:	9f 2f       	mov	r25, r31
     504:	0e 2f       	mov	r16, r30
     506:	0e 94 7a 0f 	call	0x1ef4	; 0x1ef4 <__lshrdi3>
     50a:	21 70       	andi	r18, 0x01	; 1
     50c:	30 e0       	ldi	r19, 0x00	; 0
     50e:	40 e0       	ldi	r20, 0x00	; 0
     510:	50 e0       	ldi	r21, 0x00	; 0
     512:	60 e0       	ldi	r22, 0x00	; 0
     514:	70 e0       	ldi	r23, 0x00	; 0
     516:	80 e0       	ldi	r24, 0x00	; 0
     518:	90 e0       	ldi	r25, 0x00	; 0
     51a:	a0 e0       	ldi	r26, 0x00	; 0
     51c:	0e 94 96 0f 	call	0x1f2c	; 0x1f2c <__cmpdi2_s8>
     520:	29 f0       	breq	.+10     	; 0x52c <redraw_traffic_lane+0xcc>
     522:	d5 01       	movw	r26, r10
     524:	8c 91       	ld	r24, X
     526:	d7 01       	movw	r26, r14
     528:	8c 93       	st	X, r24
     52a:	02 c0       	rjmp	.+4      	; 0x530 <redraw_traffic_lane+0xd0>
     52c:	d7 01       	movw	r26, r14
     52e:	1c 92       	st	X, r1
     530:	ef 5f       	subi	r30, 0xFF	; 255
     532:	e0 34       	cpi	r30, 0x40	; 64
     534:	08 f0       	brcs	.+2      	; 0x538 <redraw_traffic_lane+0xd8>
     536:	e0 e0       	ldi	r30, 0x00	; 0
     538:	bf ef       	ldi	r27, 0xFF	; 255
     53a:	eb 1a       	sub	r14, r27
     53c:	fb 0a       	sbc	r15, r27
     53e:	ec 14       	cp	r14, r12
     540:	fd 04       	cpc	r15, r13
     542:	c1 f6       	brne	.-80     	; 0x4f4 <redraw_traffic_lane+0x94>
     544:	be 01       	movw	r22, r28
     546:	6f 5f       	subi	r22, 0xFF	; 255
     548:	7f 4f       	sbci	r23, 0xFF	; 255
     54a:	81 e0       	ldi	r24, 0x01	; 1
     54c:	84 0d       	add	r24, r4
     54e:	0e 94 be 06 	call	0xd7c	; 0xd7c <ledmatrix_update_row>
     552:	60 96       	adiw	r28, 0x10	; 16
     554:	0f b6       	in	r0, 0x3f	; 63
     556:	f8 94       	cli
     558:	de bf       	out	0x3e, r29	; 62
     55a:	0f be       	out	0x3f, r0	; 63
     55c:	cd bf       	out	0x3d, r28	; 61
     55e:	df 91       	pop	r29
     560:	cf 91       	pop	r28
     562:	1f 91       	pop	r17
     564:	0f 91       	pop	r16
     566:	ff 90       	pop	r15
     568:	ef 90       	pop	r14
     56a:	df 90       	pop	r13
     56c:	cf 90       	pop	r12
     56e:	bf 90       	pop	r11
     570:	af 90       	pop	r10
     572:	9f 90       	pop	r9
     574:	8f 90       	pop	r8
     576:	7f 90       	pop	r7
     578:	6f 90       	pop	r6
     57a:	5f 90       	pop	r5
     57c:	4f 90       	pop	r4
     57e:	3f 90       	pop	r3
     580:	08 95       	ret

00000582 <redraw_river_channel>:
     582:	cf 92       	push	r12
     584:	df 92       	push	r13
     586:	ef 92       	push	r14
     588:	ff 92       	push	r15
     58a:	cf 93       	push	r28
     58c:	df 93       	push	r29
     58e:	cd b7       	in	r28, 0x3d	; 61
     590:	de b7       	in	r29, 0x3e	; 62
     592:	60 97       	sbiw	r28, 0x10	; 16
     594:	0f b6       	in	r0, 0x3f	; 63
     596:	f8 94       	cli
     598:	de bf       	out	0x3e, r29	; 62
     59a:	0f be       	out	0x3f, r0	; 63
     59c:	cd bf       	out	0x3d, r28	; 61
     59e:	28 2f       	mov	r18, r24
     5a0:	30 e0       	ldi	r19, 0x00	; 0
     5a2:	f9 01       	movw	r30, r18
     5a4:	e2 5a       	subi	r30, 0xA2	; 162
     5a6:	fe 4f       	sbci	r31, 0xFE	; 254
     5a8:	90 81       	ld	r25, Z
     5aa:	22 0f       	add	r18, r18
     5ac:	33 1f       	adc	r19, r19
     5ae:	22 0f       	add	r18, r18
     5b0:	33 1f       	adc	r19, r19
     5b2:	f9 01       	movw	r30, r18
     5b4:	e8 5e       	subi	r30, 0xE8	; 232
     5b6:	fe 4f       	sbci	r31, 0xFE	; 254
     5b8:	c0 80       	ld	r12, Z
     5ba:	d1 80       	ldd	r13, Z+1	; 0x01
     5bc:	e2 80       	ldd	r14, Z+2	; 0x02
     5be:	f3 80       	ldd	r15, Z+3	; 0x03
     5c0:	fe 01       	movw	r30, r28
     5c2:	31 96       	adiw	r30, 0x01	; 1
     5c4:	9e 01       	movw	r18, r28
     5c6:	2f 5e       	subi	r18, 0xEF	; 239
     5c8:	3f 4f       	sbci	r19, 0xFF	; 255
     5ca:	ac e3       	ldi	r26, 0x3C	; 60
     5cc:	b7 01       	movw	r22, r14
     5ce:	a6 01       	movw	r20, r12
     5d0:	09 2e       	mov	r0, r25
     5d2:	04 c0       	rjmp	.+8      	; 0x5dc <redraw_river_channel+0x5a>
     5d4:	76 95       	lsr	r23
     5d6:	67 95       	ror	r22
     5d8:	57 95       	ror	r21
     5da:	47 95       	ror	r20
     5dc:	0a 94       	dec	r0
     5de:	d2 f7       	brpl	.-12     	; 0x5d4 <redraw_river_channel+0x52>
     5e0:	40 ff       	sbrs	r20, 0
     5e2:	02 c0       	rjmp	.+4      	; 0x5e8 <redraw_river_channel+0x66>
     5e4:	a0 83       	st	Z, r26
     5e6:	01 c0       	rjmp	.+2      	; 0x5ea <redraw_river_channel+0x68>
     5e8:	10 82       	st	Z, r1
     5ea:	9f 5f       	subi	r25, 0xFF	; 255
     5ec:	90 32       	cpi	r25, 0x20	; 32
     5ee:	08 f0       	brcs	.+2      	; 0x5f2 <redraw_river_channel+0x70>
     5f0:	90 e0       	ldi	r25, 0x00	; 0
     5f2:	31 96       	adiw	r30, 0x01	; 1
     5f4:	e2 17       	cp	r30, r18
     5f6:	f3 07       	cpc	r31, r19
     5f8:	49 f7       	brne	.-46     	; 0x5cc <redraw_river_channel+0x4a>
     5fa:	be 01       	movw	r22, r28
     5fc:	6f 5f       	subi	r22, 0xFF	; 255
     5fe:	7f 4f       	sbci	r23, 0xFF	; 255
     600:	8b 5f       	subi	r24, 0xFB	; 251
     602:	0e 94 be 06 	call	0xd7c	; 0xd7c <ledmatrix_update_row>
     606:	60 96       	adiw	r28, 0x10	; 16
     608:	0f b6       	in	r0, 0x3f	; 63
     60a:	f8 94       	cli
     60c:	de bf       	out	0x3e, r29	; 62
     60e:	0f be       	out	0x3f, r0	; 63
     610:	cd bf       	out	0x3d, r28	; 61
     612:	df 91       	pop	r29
     614:	cf 91       	pop	r28
     616:	ff 90       	pop	r15
     618:	ef 90       	pop	r14
     61a:	df 90       	pop	r13
     61c:	cf 90       	pop	r12
     61e:	08 95       	ret

00000620 <redraw_riverbank>:
     620:	ef 92       	push	r14
     622:	ff 92       	push	r15
     624:	0f 93       	push	r16
     626:	1f 93       	push	r17
     628:	cf 93       	push	r28
     62a:	df 93       	push	r29
     62c:	cd b7       	in	r28, 0x3d	; 61
     62e:	de b7       	in	r29, 0x3e	; 62
     630:	60 97       	sbiw	r28, 0x10	; 16
     632:	0f b6       	in	r0, 0x3f	; 63
     634:	f8 94       	cli
     636:	de bf       	out	0x3e, r29	; 62
     638:	0f be       	out	0x3f, r0	; 63
     63a:	cd bf       	out	0x3d, r28	; 61
     63c:	a0 91 5c 01 	lds	r26, 0x015C	; 0x80015c <riverbank>
     640:	b0 91 5d 01 	lds	r27, 0x015D	; 0x80015d <riverbank+0x1>
     644:	e0 90 5a 01 	lds	r14, 0x015A	; 0x80015a <riverbank_status>
     648:	f0 90 5b 01 	lds	r15, 0x015B	; 0x80015b <riverbank_status+0x1>
     64c:	ae 01       	movw	r20, r28
     64e:	4f 5f       	subi	r20, 0xFF	; 255
     650:	5f 4f       	sbci	r21, 0xFF	; 255
     652:	be 01       	movw	r22, r28
     654:	6f 5e       	subi	r22, 0xEF	; 239
     656:	7f 4f       	sbci	r23, 0xFF	; 255
     658:	fa 01       	movw	r30, r20
     65a:	00 ef       	ldi	r16, 0xF0	; 240
     65c:	11 e1       	ldi	r17, 0x11	; 17
     65e:	cf 01       	movw	r24, r30
     660:	84 1b       	sub	r24, r20
     662:	95 0b       	sbc	r25, r21
     664:	9d 01       	movw	r18, r26
     666:	08 2e       	mov	r0, r24
     668:	02 c0       	rjmp	.+4      	; 0x66e <redraw_riverbank+0x4e>
     66a:	36 95       	lsr	r19
     66c:	27 95       	ror	r18
     66e:	0a 94       	dec	r0
     670:	e2 f7       	brpl	.-8      	; 0x66a <redraw_riverbank+0x4a>
     672:	20 ff       	sbrs	r18, 0
     674:	02 c0       	rjmp	.+4      	; 0x67a <redraw_riverbank+0x5a>
     676:	10 83       	st	Z, r17
     678:	0b c0       	rjmp	.+22     	; 0x690 <redraw_riverbank+0x70>
     67a:	97 01       	movw	r18, r14
     67c:	02 c0       	rjmp	.+4      	; 0x682 <redraw_riverbank+0x62>
     67e:	36 95       	lsr	r19
     680:	27 95       	ror	r18
     682:	8a 95       	dec	r24
     684:	e2 f7       	brpl	.-8      	; 0x67e <redraw_riverbank+0x5e>
     686:	20 ff       	sbrs	r18, 0
     688:	02 c0       	rjmp	.+4      	; 0x68e <redraw_riverbank+0x6e>
     68a:	00 83       	st	Z, r16
     68c:	01 c0       	rjmp	.+2      	; 0x690 <redraw_riverbank+0x70>
     68e:	10 82       	st	Z, r1
     690:	31 96       	adiw	r30, 0x01	; 1
     692:	e6 17       	cp	r30, r22
     694:	f7 07       	cpc	r31, r23
     696:	19 f7       	brne	.-58     	; 0x65e <redraw_riverbank+0x3e>
     698:	be 01       	movw	r22, r28
     69a:	6f 5f       	subi	r22, 0xFF	; 255
     69c:	7f 4f       	sbci	r23, 0xFF	; 255
     69e:	87 e0       	ldi	r24, 0x07	; 7
     6a0:	0e 94 be 06 	call	0xd7c	; 0xd7c <ledmatrix_update_row>
     6a4:	60 96       	adiw	r28, 0x10	; 16
     6a6:	0f b6       	in	r0, 0x3f	; 63
     6a8:	f8 94       	cli
     6aa:	de bf       	out	0x3e, r29	; 62
     6ac:	0f be       	out	0x3f, r0	; 63
     6ae:	cd bf       	out	0x3d, r28	; 61
     6b0:	df 91       	pop	r29
     6b2:	cf 91       	pop	r28
     6b4:	1f 91       	pop	r17
     6b6:	0f 91       	pop	r16
     6b8:	ff 90       	pop	r15
     6ba:	ef 90       	pop	r14
     6bc:	08 95       	ret

000006be <redraw_whole_display>:
     6be:	0e 94 ff 06 	call	0xdfe	; 0xdfe <ledmatrix_clear>
     6c2:	80 e0       	ldi	r24, 0x00	; 0
     6c4:	0e 94 0e 02 	call	0x41c	; 0x41c <redraw_roadside>
     6c8:	84 e0       	ldi	r24, 0x04	; 4
     6ca:	0e 94 0e 02 	call	0x41c	; 0x41c <redraw_roadside>
     6ce:	80 e0       	ldi	r24, 0x00	; 0
     6d0:	0e 94 30 02 	call	0x460	; 0x460 <redraw_traffic_lane>
     6d4:	81 e0       	ldi	r24, 0x01	; 1
     6d6:	0e 94 30 02 	call	0x460	; 0x460 <redraw_traffic_lane>
     6da:	82 e0       	ldi	r24, 0x02	; 2
     6dc:	0e 94 30 02 	call	0x460	; 0x460 <redraw_traffic_lane>
     6e0:	80 e0       	ldi	r24, 0x00	; 0
     6e2:	0e 94 c1 02 	call	0x582	; 0x582 <redraw_river_channel>
     6e6:	81 e0       	ldi	r24, 0x01	; 1
     6e8:	0e 94 c1 02 	call	0x582	; 0x582 <redraw_river_channel>
     6ec:	0e 94 10 03 	call	0x620	; 0x620 <redraw_riverbank>
     6f0:	08 95       	ret

000006f2 <redraw_row>:
     6f2:	48 2f       	mov	r20, r24
     6f4:	50 e0       	ldi	r21, 0x00	; 0
     6f6:	48 30       	cpi	r20, 0x08	; 8
     6f8:	51 05       	cpc	r21, r1
     6fa:	90 f4       	brcc	.+36     	; 0x720 <redraw_row+0x2e>
     6fc:	fa 01       	movw	r30, r20
     6fe:	ea 5b       	subi	r30, 0xBA	; 186
     700:	ff 4f       	sbci	r31, 0xFF	; 255
     702:	0c 94 72 0f 	jmp	0x1ee4	; 0x1ee4 <__tablejump2__>
     706:	0e 94 0e 02 	call	0x41c	; 0x41c <redraw_roadside>
     70a:	08 95       	ret
     70c:	81 50       	subi	r24, 0x01	; 1
     70e:	0e 94 30 02 	call	0x460	; 0x460 <redraw_traffic_lane>
     712:	08 95       	ret
     714:	85 50       	subi	r24, 0x05	; 5
     716:	0e 94 c1 02 	call	0x582	; 0x582 <redraw_river_channel>
     71a:	08 95       	ret
     71c:	0e 94 10 03 	call	0x620	; 0x620 <redraw_riverbank>
     720:	08 95       	ret

00000722 <redraw_frog>:
     722:	80 91 65 01 	lds	r24, 0x0165	; 0x800165 <frog_dead>
     726:	88 23       	and	r24, r24
     728:	41 f0       	breq	.+16     	; 0x73a <redraw_frog+0x18>
     72a:	45 e3       	ldi	r20, 0x35	; 53
     72c:	60 91 67 01 	lds	r22, 0x0167	; 0x800167 <frog_row>
     730:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <frog_column>
     734:	0e 94 9f 06 	call	0xd3e	; 0xd3e <ledmatrix_update_pixel>
     738:	08 95       	ret
     73a:	80 91 63 01 	lds	r24, 0x0163	; 0x800163 <decrement>
     73e:	88 23       	and	r24, r24
     740:	41 f0       	breq	.+16     	; 0x752 <redraw_frog+0x30>
     742:	45 e3       	ldi	r20, 0x35	; 53
     744:	60 91 67 01 	lds	r22, 0x0167	; 0x800167 <frog_row>
     748:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <frog_column>
     74c:	0e 94 9f 06 	call	0xd3e	; 0xd3e <ledmatrix_update_pixel>
     750:	08 95       	ret
     752:	40 ef       	ldi	r20, 0xF0	; 240
     754:	60 91 67 01 	lds	r22, 0x0167	; 0x800167 <frog_row>
     758:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <frog_column>
     75c:	0e 94 9f 06 	call	0xd3e	; 0xd3e <ledmatrix_update_pixel>
     760:	08 95       	ret

00000762 <riverbank_by_level>:
     762:	60 ff       	sbrs	r22, 0
     764:	0d c0       	rjmp	.+26     	; 0x780 <riverbank_by_level+0x1e>
     766:	23 e0       	ldi	r18, 0x03	; 3
     768:	30 e0       	ldi	r19, 0x00	; 0
     76a:	40 e0       	ldi	r20, 0x00	; 0
     76c:	50 e0       	ldi	r21, 0x00	; 0
     76e:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <__udivmodsi4>
     772:	67 2b       	or	r22, r23
     774:	68 2b       	or	r22, r24
     776:	69 2b       	or	r22, r25
     778:	31 f0       	breq	.+12     	; 0x786 <riverbank_by_level+0x24>
     77a:	8d ed       	ldi	r24, 0xDD	; 221
     77c:	9d ed       	ldi	r25, 0xDD	; 221
     77e:	08 95       	ret
     780:	8d ed       	ldi	r24, 0xDD	; 221
     782:	95 ed       	ldi	r25, 0xD5	; 213
     784:	08 95       	ret
     786:	8d e5       	ldi	r24, 0x5D	; 93
     788:	95 ed       	ldi	r25, 0xD5	; 213
     78a:	08 95       	ret

0000078c <put_frog_in_start_position>:
     78c:	10 92 67 01 	sts	0x0167, r1	; 0x800167 <frog_row>
     790:	87 e0       	ldi	r24, 0x07	; 7
     792:	80 93 66 01 	sts	0x0166, r24	; 0x800166 <frog_column>
     796:	10 92 65 01 	sts	0x0165, r1	; 0x800165 <frog_dead>
     79a:	0e 94 91 03 	call	0x722	; 0x722 <redraw_frog>
     79e:	08 95       	ret

000007a0 <initialise_life>:
     7a0:	60 fd       	sbrc	r22, 0
     7a2:	0b c0       	rjmp	.+22     	; 0x7ba <initialise_life+0x1a>
     7a4:	e0 e6       	ldi	r30, 0x60	; 96
     7a6:	f1 e0       	ldi	r31, 0x01	; 1
     7a8:	81 e0       	ldi	r24, 0x01	; 1
     7aa:	82 83       	std	Z+2, r24	; 0x02
     7ac:	81 83       	std	Z+1, r24	; 0x01
     7ae:	80 83       	st	Z, r24
     7b0:	ee e5       	ldi	r30, 0x5E	; 94
     7b2:	f1 e0       	ldi	r31, 0x01	; 1
     7b4:	11 82       	std	Z+1, r1	; 0x01
     7b6:	10 82       	st	Z, r1
     7b8:	1e c0       	rjmp	.+60     	; 0x7f6 <initialise_life+0x56>
     7ba:	23 e0       	ldi	r18, 0x03	; 3
     7bc:	30 e0       	ldi	r19, 0x00	; 0
     7be:	40 e0       	ldi	r20, 0x00	; 0
     7c0:	50 e0       	ldi	r21, 0x00	; 0
     7c2:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <__udivmodsi4>
     7c6:	67 2b       	or	r22, r23
     7c8:	68 2b       	or	r22, r24
     7ca:	69 2b       	or	r22, r25
     7cc:	59 f4       	brne	.+22     	; 0x7e4 <initialise_life+0x44>
     7ce:	e0 e6       	ldi	r30, 0x60	; 96
     7d0:	f1 e0       	ldi	r31, 0x01	; 1
     7d2:	12 82       	std	Z+2, r1	; 0x02
     7d4:	11 82       	std	Z+1, r1	; 0x01
     7d6:	10 82       	st	Z, r1
     7d8:	ee e5       	ldi	r30, 0x5E	; 94
     7da:	f1 e0       	ldi	r31, 0x01	; 1
     7dc:	81 e0       	ldi	r24, 0x01	; 1
     7de:	81 83       	std	Z+1, r24	; 0x01
     7e0:	80 83       	st	Z, r24
     7e2:	09 c0       	rjmp	.+18     	; 0x7f6 <initialise_life+0x56>
     7e4:	e0 e6       	ldi	r30, 0x60	; 96
     7e6:	f1 e0       	ldi	r31, 0x01	; 1
     7e8:	12 82       	std	Z+2, r1	; 0x02
     7ea:	11 82       	std	Z+1, r1	; 0x01
     7ec:	10 82       	st	Z, r1
     7ee:	ee e5       	ldi	r30, 0x5E	; 94
     7f0:	f1 e0       	ldi	r31, 0x01	; 1
     7f2:	11 82       	std	Z+1, r1	; 0x01
     7f4:	10 82       	st	Z, r1
     7f6:	0e 94 10 03 	call	0x620	; 0x620 <redraw_riverbank>
     7fa:	80 e0       	ldi	r24, 0x00	; 0
     7fc:	0e 94 0e 02 	call	0x41c	; 0x41c <redraw_roadside>
     800:	84 e0       	ldi	r24, 0x04	; 4
     802:	0e 94 0e 02 	call	0x41c	; 0x41c <redraw_roadside>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	0e 94 30 02 	call	0x460	; 0x460 <redraw_traffic_lane>
     80c:	81 e0       	ldi	r24, 0x01	; 1
     80e:	0e 94 30 02 	call	0x460	; 0x460 <redraw_traffic_lane>
     812:	82 e0       	ldi	r24, 0x02	; 2
     814:	0e 94 30 02 	call	0x460	; 0x460 <redraw_traffic_lane>
     818:	80 e0       	ldi	r24, 0x00	; 0
     81a:	0e 94 c1 02 	call	0x582	; 0x582 <redraw_river_channel>
     81e:	81 e0       	ldi	r24, 0x01	; 1
     820:	0e 94 c1 02 	call	0x582	; 0x582 <redraw_river_channel>
     824:	10 92 63 01 	sts	0x0163, r1	; 0x800163 <decrement>
     828:	0e 94 c6 03 	call	0x78c	; 0x78c <put_frog_in_start_position>
     82c:	08 95       	ret

0000082e <is_riverbank_full>:
     82e:	81 e0       	ldi	r24, 0x01	; 1
     830:	20 91 5a 01 	lds	r18, 0x015A	; 0x80015a <riverbank_status>
     834:	30 91 5b 01 	lds	r19, 0x015B	; 0x80015b <riverbank_status+0x1>
     838:	2f 3f       	cpi	r18, 0xFF	; 255
     83a:	3f 4f       	sbci	r19, 0xFF	; 255
     83c:	09 f0       	breq	.+2      	; 0x840 <is_riverbank_full+0x12>
     83e:	80 e0       	ldi	r24, 0x00	; 0
     840:	08 95       	ret

00000842 <frog_has_reached_riverbank>:
     842:	81 e0       	ldi	r24, 0x01	; 1
     844:	90 91 67 01 	lds	r25, 0x0167	; 0x800167 <frog_row>
     848:	97 30       	cpi	r25, 0x07	; 7
     84a:	09 f0       	breq	.+2      	; 0x84e <frog_has_reached_riverbank+0xc>
     84c:	80 e0       	ldi	r24, 0x00	; 0
     84e:	08 95       	ret

00000850 <is_frog_dead>:
     850:	80 91 65 01 	lds	r24, 0x0165	; 0x800165 <frog_dead>
     854:	08 95       	ret

00000856 <is_decremented>:
     856:	80 91 63 01 	lds	r24, 0x0163	; 0x800163 <decrement>
     85a:	08 95       	ret

0000085c <decrement_lives>:
     85c:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <frog_lives>
     860:	84 30       	cpi	r24, 0x04	; 4
     862:	31 f4       	brne	.+12     	; 0x870 <decrement_lives+0x14>
     864:	83 e0       	ldi	r24, 0x03	; 3
     866:	80 93 64 01 	sts	0x0164, r24	; 0x800164 <frog_lives>
     86a:	87 e0       	ldi	r24, 0x07	; 7
     86c:	82 b9       	out	0x02, r24	; 2
     86e:	08 95       	ret
     870:	83 30       	cpi	r24, 0x03	; 3
     872:	31 f4       	brne	.+12     	; 0x880 <decrement_lives+0x24>
     874:	82 e0       	ldi	r24, 0x02	; 2
     876:	80 93 64 01 	sts	0x0164, r24	; 0x800164 <frog_lives>
     87a:	83 e0       	ldi	r24, 0x03	; 3
     87c:	82 b9       	out	0x02, r24	; 2
     87e:	08 95       	ret
     880:	82 30       	cpi	r24, 0x02	; 2
     882:	29 f4       	brne	.+10     	; 0x88e <decrement_lives+0x32>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	80 93 64 01 	sts	0x0164, r24	; 0x800164 <frog_lives>
     88a:	82 b9       	out	0x02, r24	; 2
     88c:	08 95       	ret
     88e:	81 50       	subi	r24, 0x01	; 1
     890:	80 93 64 01 	sts	0x0164, r24	; 0x800164 <frog_lives>
     894:	81 e0       	ldi	r24, 0x01	; 1
     896:	80 93 65 01 	sts	0x0165, r24	; 0x800165 <frog_dead>
     89a:	12 b8       	out	0x02, r1	; 2
     89c:	08 95       	ret

0000089e <move_frog_forward>:
     89e:	cf 93       	push	r28
     8a0:	80 91 67 01 	lds	r24, 0x0167	; 0x800167 <frog_row>
     8a4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <redraw_row>
     8a8:	c0 91 67 01 	lds	r28, 0x0167	; 0x800167 <frog_row>
     8ac:	cf 5f       	subi	r28, 0xFF	; 255
     8ae:	60 91 66 01 	lds	r22, 0x0166	; 0x800166 <frog_column>
     8b2:	8c 2f       	mov	r24, r28
     8b4:	0e 94 a9 01 	call	0x352	; 0x352 <will_frog_die_at_position>
     8b8:	80 93 63 01 	sts	0x0163, r24	; 0x800163 <decrement>
     8bc:	81 11       	cpse	r24, r1
     8be:	0e 94 2e 04 	call	0x85c	; 0x85c <decrement_lives>
     8c2:	c0 93 67 01 	sts	0x0167, r28	; 0x800167 <frog_row>
     8c6:	c7 30       	cpi	r28, 0x07	; 7
     8c8:	29 f4       	brne	.+10     	; 0x8d4 <move_frog_forward+0x36>
     8ca:	8a e0       	ldi	r24, 0x0A	; 10
     8cc:	90 e0       	ldi	r25, 0x00	; 0
     8ce:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <add_to_score>
     8d2:	04 c0       	rjmp	.+8      	; 0x8dc <move_frog_forward+0x3e>
     8d4:	81 e0       	ldi	r24, 0x01	; 1
     8d6:	90 e0       	ldi	r25, 0x00	; 0
     8d8:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <add_to_score>
     8dc:	0e 94 91 03 	call	0x722	; 0x722 <redraw_frog>
     8e0:	80 91 65 01 	lds	r24, 0x0165	; 0x800165 <frog_dead>
     8e4:	81 11       	cpse	r24, r1
     8e6:	1b c0       	rjmp	.+54     	; 0x91e <__stack+0x1f>
     8e8:	80 91 63 01 	lds	r24, 0x0163	; 0x800163 <decrement>
     8ec:	81 11       	cpse	r24, r1
     8ee:	17 c0       	rjmp	.+46     	; 0x91e <__stack+0x1f>
     8f0:	80 91 67 01 	lds	r24, 0x0167	; 0x800167 <frog_row>
     8f4:	87 30       	cpi	r24, 0x07	; 7
     8f6:	99 f4       	brne	.+38     	; 0x91e <__stack+0x1f>
     8f8:	81 e0       	ldi	r24, 0x01	; 1
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	00 90 66 01 	lds	r0, 0x0166	; 0x800166 <frog_column>
     900:	02 c0       	rjmp	.+4      	; 0x906 <__stack+0x7>
     902:	88 0f       	add	r24, r24
     904:	99 1f       	adc	r25, r25
     906:	0a 94       	dec	r0
     908:	e2 f7       	brpl	.-8      	; 0x902 <__stack+0x3>
     90a:	20 91 5a 01 	lds	r18, 0x015A	; 0x80015a <riverbank_status>
     90e:	30 91 5b 01 	lds	r19, 0x015B	; 0x80015b <riverbank_status+0x1>
     912:	82 2b       	or	r24, r18
     914:	93 2b       	or	r25, r19
     916:	90 93 5b 01 	sts	0x015B, r25	; 0x80015b <riverbank_status+0x1>
     91a:	80 93 5a 01 	sts	0x015A, r24	; 0x80015a <riverbank_status>
     91e:	cf 91       	pop	r28
     920:	08 95       	ret

00000922 <move_frog_backward>:
     922:	cf 93       	push	r28
     924:	80 91 67 01 	lds	r24, 0x0167	; 0x800167 <frog_row>
     928:	0e 94 79 03 	call	0x6f2	; 0x6f2 <redraw_row>
     92c:	c0 91 67 01 	lds	r28, 0x0167	; 0x800167 <frog_row>
     930:	c1 50       	subi	r28, 0x01	; 1
     932:	60 91 66 01 	lds	r22, 0x0166	; 0x800166 <frog_column>
     936:	8c 2f       	mov	r24, r28
     938:	0e 94 a9 01 	call	0x352	; 0x352 <will_frog_die_at_position>
     93c:	80 93 63 01 	sts	0x0163, r24	; 0x800163 <decrement>
     940:	81 11       	cpse	r24, r1
     942:	0e 94 2e 04 	call	0x85c	; 0x85c <decrement_lives>
     946:	c0 93 67 01 	sts	0x0167, r28	; 0x800167 <frog_row>
     94a:	0e 94 91 03 	call	0x722	; 0x722 <redraw_frog>
     94e:	80 91 65 01 	lds	r24, 0x0165	; 0x800165 <frog_dead>
     952:	81 11       	cpse	r24, r1
     954:	1b c0       	rjmp	.+54     	; 0x98c <move_frog_backward+0x6a>
     956:	80 91 63 01 	lds	r24, 0x0163	; 0x800163 <decrement>
     95a:	81 11       	cpse	r24, r1
     95c:	17 c0       	rjmp	.+46     	; 0x98c <move_frog_backward+0x6a>
     95e:	80 91 67 01 	lds	r24, 0x0167	; 0x800167 <frog_row>
     962:	87 30       	cpi	r24, 0x07	; 7
     964:	99 f4       	brne	.+38     	; 0x98c <move_frog_backward+0x6a>
     966:	81 e0       	ldi	r24, 0x01	; 1
     968:	90 e0       	ldi	r25, 0x00	; 0
     96a:	00 90 66 01 	lds	r0, 0x0166	; 0x800166 <frog_column>
     96e:	02 c0       	rjmp	.+4      	; 0x974 <move_frog_backward+0x52>
     970:	88 0f       	add	r24, r24
     972:	99 1f       	adc	r25, r25
     974:	0a 94       	dec	r0
     976:	e2 f7       	brpl	.-8      	; 0x970 <move_frog_backward+0x4e>
     978:	20 91 5a 01 	lds	r18, 0x015A	; 0x80015a <riverbank_status>
     97c:	30 91 5b 01 	lds	r19, 0x015B	; 0x80015b <riverbank_status+0x1>
     980:	82 2b       	or	r24, r18
     982:	93 2b       	or	r25, r19
     984:	90 93 5b 01 	sts	0x015B, r25	; 0x80015b <riverbank_status+0x1>
     988:	80 93 5a 01 	sts	0x015A, r24	; 0x80015a <riverbank_status>
     98c:	cf 91       	pop	r28
     98e:	08 95       	ret

00000990 <move_frog_to_left>:
     990:	cf 93       	push	r28
     992:	80 91 67 01 	lds	r24, 0x0167	; 0x800167 <frog_row>
     996:	0e 94 79 03 	call	0x6f2	; 0x6f2 <redraw_row>
     99a:	c0 91 66 01 	lds	r28, 0x0166	; 0x800166 <frog_column>
     99e:	c1 50       	subi	r28, 0x01	; 1
     9a0:	6c 2f       	mov	r22, r28
     9a2:	80 91 67 01 	lds	r24, 0x0167	; 0x800167 <frog_row>
     9a6:	0e 94 a9 01 	call	0x352	; 0x352 <will_frog_die_at_position>
     9aa:	80 93 63 01 	sts	0x0163, r24	; 0x800163 <decrement>
     9ae:	81 11       	cpse	r24, r1
     9b0:	0e 94 2e 04 	call	0x85c	; 0x85c <decrement_lives>
     9b4:	c0 93 66 01 	sts	0x0166, r28	; 0x800166 <frog_column>
     9b8:	0e 94 91 03 	call	0x722	; 0x722 <redraw_frog>
     9bc:	80 91 65 01 	lds	r24, 0x0165	; 0x800165 <frog_dead>
     9c0:	81 11       	cpse	r24, r1
     9c2:	1b c0       	rjmp	.+54     	; 0x9fa <move_frog_to_left+0x6a>
     9c4:	80 91 63 01 	lds	r24, 0x0163	; 0x800163 <decrement>
     9c8:	81 11       	cpse	r24, r1
     9ca:	17 c0       	rjmp	.+46     	; 0x9fa <move_frog_to_left+0x6a>
     9cc:	80 91 67 01 	lds	r24, 0x0167	; 0x800167 <frog_row>
     9d0:	87 30       	cpi	r24, 0x07	; 7
     9d2:	99 f4       	brne	.+38     	; 0x9fa <move_frog_to_left+0x6a>
     9d4:	81 e0       	ldi	r24, 0x01	; 1
     9d6:	90 e0       	ldi	r25, 0x00	; 0
     9d8:	00 90 66 01 	lds	r0, 0x0166	; 0x800166 <frog_column>
     9dc:	02 c0       	rjmp	.+4      	; 0x9e2 <move_frog_to_left+0x52>
     9de:	88 0f       	add	r24, r24
     9e0:	99 1f       	adc	r25, r25
     9e2:	0a 94       	dec	r0
     9e4:	e2 f7       	brpl	.-8      	; 0x9de <move_frog_to_left+0x4e>
     9e6:	20 91 5a 01 	lds	r18, 0x015A	; 0x80015a <riverbank_status>
     9ea:	30 91 5b 01 	lds	r19, 0x015B	; 0x80015b <riverbank_status+0x1>
     9ee:	82 2b       	or	r24, r18
     9f0:	93 2b       	or	r25, r19
     9f2:	90 93 5b 01 	sts	0x015B, r25	; 0x80015b <riverbank_status+0x1>
     9f6:	80 93 5a 01 	sts	0x015A, r24	; 0x80015a <riverbank_status>
     9fa:	cf 91       	pop	r28
     9fc:	08 95       	ret

000009fe <move_frog_to_right>:
     9fe:	cf 93       	push	r28
     a00:	80 91 67 01 	lds	r24, 0x0167	; 0x800167 <frog_row>
     a04:	0e 94 79 03 	call	0x6f2	; 0x6f2 <redraw_row>
     a08:	c0 91 66 01 	lds	r28, 0x0166	; 0x800166 <frog_column>
     a0c:	cf 5f       	subi	r28, 0xFF	; 255
     a0e:	6c 2f       	mov	r22, r28
     a10:	80 91 67 01 	lds	r24, 0x0167	; 0x800167 <frog_row>
     a14:	0e 94 a9 01 	call	0x352	; 0x352 <will_frog_die_at_position>
     a18:	80 93 63 01 	sts	0x0163, r24	; 0x800163 <decrement>
     a1c:	81 11       	cpse	r24, r1
     a1e:	0e 94 2e 04 	call	0x85c	; 0x85c <decrement_lives>
     a22:	c0 93 66 01 	sts	0x0166, r28	; 0x800166 <frog_column>
     a26:	0e 94 91 03 	call	0x722	; 0x722 <redraw_frog>
     a2a:	80 91 65 01 	lds	r24, 0x0165	; 0x800165 <frog_dead>
     a2e:	81 11       	cpse	r24, r1
     a30:	1b c0       	rjmp	.+54     	; 0xa68 <move_frog_to_right+0x6a>
     a32:	80 91 63 01 	lds	r24, 0x0163	; 0x800163 <decrement>
     a36:	81 11       	cpse	r24, r1
     a38:	17 c0       	rjmp	.+46     	; 0xa68 <move_frog_to_right+0x6a>
     a3a:	80 91 67 01 	lds	r24, 0x0167	; 0x800167 <frog_row>
     a3e:	87 30       	cpi	r24, 0x07	; 7
     a40:	99 f4       	brne	.+38     	; 0xa68 <move_frog_to_right+0x6a>
     a42:	81 e0       	ldi	r24, 0x01	; 1
     a44:	90 e0       	ldi	r25, 0x00	; 0
     a46:	00 90 66 01 	lds	r0, 0x0166	; 0x800166 <frog_column>
     a4a:	02 c0       	rjmp	.+4      	; 0xa50 <move_frog_to_right+0x52>
     a4c:	88 0f       	add	r24, r24
     a4e:	99 1f       	adc	r25, r25
     a50:	0a 94       	dec	r0
     a52:	e2 f7       	brpl	.-8      	; 0xa4c <move_frog_to_right+0x4e>
     a54:	20 91 5a 01 	lds	r18, 0x015A	; 0x80015a <riverbank_status>
     a58:	30 91 5b 01 	lds	r19, 0x015B	; 0x80015b <riverbank_status+0x1>
     a5c:	82 2b       	or	r24, r18
     a5e:	93 2b       	or	r25, r19
     a60:	90 93 5b 01 	sts	0x015B, r25	; 0x80015b <riverbank_status+0x1>
     a64:	80 93 5a 01 	sts	0x015A, r24	; 0x80015a <riverbank_status>
     a68:	cf 91       	pop	r28
     a6a:	08 95       	ret

00000a6c <increment_lives>:
     a6c:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <frog_lives>
     a70:	83 30       	cpi	r24, 0x03	; 3
     a72:	31 f4       	brne	.+12     	; 0xa80 <increment_lives+0x14>
     a74:	84 e0       	ldi	r24, 0x04	; 4
     a76:	80 93 64 01 	sts	0x0164, r24	; 0x800164 <frog_lives>
     a7a:	8f e0       	ldi	r24, 0x0F	; 15
     a7c:	82 b9       	out	0x02, r24	; 2
     a7e:	08 95       	ret
     a80:	82 30       	cpi	r24, 0x02	; 2
     a82:	31 f4       	brne	.+12     	; 0xa90 <increment_lives+0x24>
     a84:	83 e0       	ldi	r24, 0x03	; 3
     a86:	80 93 64 01 	sts	0x0164, r24	; 0x800164 <frog_lives>
     a8a:	87 e0       	ldi	r24, 0x07	; 7
     a8c:	82 b9       	out	0x02, r24	; 2
     a8e:	08 95       	ret
     a90:	81 30       	cpi	r24, 0x01	; 1
     a92:	29 f4       	brne	.+10     	; 0xa9e <increment_lives+0x32>
     a94:	82 e0       	ldi	r24, 0x02	; 2
     a96:	80 93 64 01 	sts	0x0164, r24	; 0x800164 <frog_lives>
     a9a:	83 e0       	ldi	r24, 0x03	; 3
     a9c:	82 b9       	out	0x02, r24	; 2
     a9e:	08 95       	ret

00000aa0 <initialise_level>:
     aa0:	cf 92       	push	r12
     aa2:	df 92       	push	r13
     aa4:	ef 92       	push	r14
     aa6:	ff 92       	push	r15
     aa8:	0f 93       	push	r16
     aaa:	1f 93       	push	r17
     aac:	cf 93       	push	r28
     aae:	df 93       	push	r29
     ab0:	c6 2f       	mov	r28, r22
     ab2:	07 2f       	mov	r16, r23
     ab4:	18 2f       	mov	r17, r24
     ab6:	d9 2f       	mov	r29, r25
     ab8:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <get_current_time>
     abc:	6b 01       	movw	r12, r22
     abe:	7c 01       	movw	r14, r24
     ac0:	60 ef       	ldi	r22, 0xF0	; 240
     ac2:	86 e1       	ldi	r24, 0x16	; 22
     ac4:	91 e0       	ldi	r25, 0x01	; 1
     ac6:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <set_scrolling_display_text>
     aca:	16 c0       	rjmp	.+44     	; 0xaf8 <initialise_level+0x58>
     acc:	2f e7       	ldi	r18, 0x7F	; 127
     ace:	89 ea       	ldi	r24, 0xA9	; 169
     ad0:	93 e0       	ldi	r25, 0x03	; 3
     ad2:	21 50       	subi	r18, 0x01	; 1
     ad4:	80 40       	sbci	r24, 0x00	; 0
     ad6:	90 40       	sbci	r25, 0x00	; 0
     ad8:	e1 f7       	brne	.-8      	; 0xad2 <initialise_level+0x32>
     ada:	00 c0       	rjmp	.+0      	; 0xadc <initialise_level+0x3c>
     adc:	00 00       	nop
     ade:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <get_current_time>
     ae2:	dc 01       	movw	r26, r24
     ae4:	cb 01       	movw	r24, r22
     ae6:	88 5e       	subi	r24, 0xE8	; 232
     ae8:	93 40       	sbci	r25, 0x03	; 3
     aea:	a1 09       	sbc	r26, r1
     aec:	b1 09       	sbc	r27, r1
     aee:	8c 15       	cp	r24, r12
     af0:	9d 05       	cpc	r25, r13
     af2:	ae 05       	cpc	r26, r14
     af4:	bf 05       	cpc	r27, r15
     af6:	20 f4       	brcc	.+8      	; 0xb00 <initialise_level+0x60>
     af8:	0e 94 0a 0b 	call	0x1614	; 0x1614 <scroll_display>
     afc:	81 11       	cpse	r24, r1
     afe:	e6 cf       	rjmp	.-52     	; 0xacc <initialise_level+0x2c>
     b00:	c0 fd       	sbrc	r28, 0
     b02:	12 c0       	rjmp	.+36     	; 0xb28 <initialise_level+0x88>
     b04:	e0 e6       	ldi	r30, 0x60	; 96
     b06:	f1 e0       	ldi	r31, 0x01	; 1
     b08:	81 e0       	ldi	r24, 0x01	; 1
     b0a:	82 83       	std	Z+2, r24	; 0x02
     b0c:	81 83       	std	Z+1, r24	; 0x01
     b0e:	80 83       	st	Z, r24
     b10:	ee e5       	ldi	r30, 0x5E	; 94
     b12:	f1 e0       	ldi	r31, 0x01	; 1
     b14:	11 82       	std	Z+1, r1	; 0x01
     b16:	10 82       	st	Z, r1
     b18:	e0 e0       	ldi	r30, 0x00	; 0
     b1a:	f1 e0       	ldi	r31, 0x01	; 1
     b1c:	8f ed       	ldi	r24, 0xDF	; 223
     b1e:	82 83       	std	Z+2, r24	; 0x02
     b20:	80 83       	st	Z, r24
     b22:	8f e0       	ldi	r24, 0x0F	; 15
     b24:	81 83       	std	Z+1, r24	; 0x01
     b26:	30 c0       	rjmp	.+96     	; 0xb88 <initialise_level+0xe8>
     b28:	6c 2f       	mov	r22, r28
     b2a:	70 2f       	mov	r23, r16
     b2c:	81 2f       	mov	r24, r17
     b2e:	9d 2f       	mov	r25, r29
     b30:	23 e0       	ldi	r18, 0x03	; 3
     b32:	30 e0       	ldi	r19, 0x00	; 0
     b34:	40 e0       	ldi	r20, 0x00	; 0
     b36:	50 e0       	ldi	r21, 0x00	; 0
     b38:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <__udivmodsi4>
     b3c:	67 2b       	or	r22, r23
     b3e:	68 2b       	or	r22, r24
     b40:	69 2b       	or	r22, r25
     b42:	91 f4       	brne	.+36     	; 0xb68 <initialise_level+0xc8>
     b44:	e0 e6       	ldi	r30, 0x60	; 96
     b46:	f1 e0       	ldi	r31, 0x01	; 1
     b48:	12 82       	std	Z+2, r1	; 0x02
     b4a:	11 82       	std	Z+1, r1	; 0x01
     b4c:	10 82       	st	Z, r1
     b4e:	ee e5       	ldi	r30, 0x5E	; 94
     b50:	f1 e0       	ldi	r31, 0x01	; 1
     b52:	81 e0       	ldi	r24, 0x01	; 1
     b54:	81 83       	std	Z+1, r24	; 0x01
     b56:	80 83       	st	Z, r24
     b58:	e0 e0       	ldi	r30, 0x00	; 0
     b5a:	f1 e0       	ldi	r31, 0x01	; 1
     b5c:	8f e0       	ldi	r24, 0x0F	; 15
     b5e:	82 83       	std	Z+2, r24	; 0x02
     b60:	81 83       	std	Z+1, r24	; 0x01
     b62:	8f ed       	ldi	r24, 0xDF	; 223
     b64:	80 83       	st	Z, r24
     b66:	10 c0       	rjmp	.+32     	; 0xb88 <initialise_level+0xe8>
     b68:	e0 e6       	ldi	r30, 0x60	; 96
     b6a:	f1 e0       	ldi	r31, 0x01	; 1
     b6c:	12 82       	std	Z+2, r1	; 0x02
     b6e:	11 82       	std	Z+1, r1	; 0x01
     b70:	10 82       	st	Z, r1
     b72:	ee e5       	ldi	r30, 0x5E	; 94
     b74:	f1 e0       	ldi	r31, 0x01	; 1
     b76:	11 82       	std	Z+1, r1	; 0x01
     b78:	10 82       	st	Z, r1
     b7a:	e0 e0       	ldi	r30, 0x00	; 0
     b7c:	f1 e0       	ldi	r31, 0x01	; 1
     b7e:	8f e0       	ldi	r24, 0x0F	; 15
     b80:	82 83       	std	Z+2, r24	; 0x02
     b82:	80 83       	st	Z, r24
     b84:	8f ed       	ldi	r24, 0xDF	; 223
     b86:	81 83       	std	Z+1, r24	; 0x01
     b88:	0e 94 36 05 	call	0xa6c	; 0xa6c <increment_lives>
     b8c:	6c 2f       	mov	r22, r28
     b8e:	70 2f       	mov	r23, r16
     b90:	81 2f       	mov	r24, r17
     b92:	9d 2f       	mov	r25, r29
     b94:	0e 94 b1 03 	call	0x762	; 0x762 <riverbank_by_level>
     b98:	90 93 5d 01 	sts	0x015D, r25	; 0x80015d <riverbank+0x1>
     b9c:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <riverbank>
     ba0:	90 93 5b 01 	sts	0x015B, r25	; 0x80015b <riverbank_status+0x1>
     ba4:	80 93 5a 01 	sts	0x015A, r24	; 0x80015a <riverbank_status>
     ba8:	0e 94 5f 03 	call	0x6be	; 0x6be <redraw_whole_display>
     bac:	0e 94 c6 03 	call	0x78c	; 0x78c <put_frog_in_start_position>
     bb0:	df 91       	pop	r29
     bb2:	cf 91       	pop	r28
     bb4:	1f 91       	pop	r17
     bb6:	0f 91       	pop	r16
     bb8:	ff 90       	pop	r15
     bba:	ef 90       	pop	r14
     bbc:	df 90       	pop	r13
     bbe:	cf 90       	pop	r12
     bc0:	08 95       	ret

00000bc2 <init_led>:
     bc2:	81 b1       	in	r24, 0x01	; 1
     bc4:	8f 60       	ori	r24, 0x0F	; 15
     bc6:	81 b9       	out	0x01, r24	; 1
     bc8:	87 e0       	ldi	r24, 0x07	; 7
     bca:	82 b9       	out	0x02, r24	; 2
     bcc:	08 95       	ret

00000bce <initialise_game>:
     bce:	e0 e6       	ldi	r30, 0x60	; 96
     bd0:	f1 e0       	ldi	r31, 0x01	; 1
     bd2:	12 82       	std	Z+2, r1	; 0x02
     bd4:	11 82       	std	Z+1, r1	; 0x01
     bd6:	10 82       	st	Z, r1
     bd8:	ee e5       	ldi	r30, 0x5E	; 94
     bda:	f1 e0       	ldi	r31, 0x01	; 1
     bdc:	11 82       	std	Z+1, r1	; 0x01
     bde:	10 82       	st	Z, r1
     be0:	e0 e0       	ldi	r30, 0x00	; 0
     be2:	f1 e0       	ldi	r31, 0x01	; 1
     be4:	8f e0       	ldi	r24, 0x0F	; 15
     be6:	82 83       	std	Z+2, r24	; 0x02
     be8:	80 83       	st	Z, r24
     bea:	8f ed       	ldi	r24, 0xDF	; 223
     bec:	81 83       	std	Z+1, r24	; 0x01
     bee:	8d ed       	ldi	r24, 0xDD	; 221
     bf0:	9d ed       	ldi	r25, 0xDD	; 221
     bf2:	90 93 5d 01 	sts	0x015D, r25	; 0x80015d <riverbank+0x1>
     bf6:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <riverbank>
     bfa:	90 93 5b 01 	sts	0x015B, r25	; 0x80015b <riverbank_status+0x1>
     bfe:	80 93 5a 01 	sts	0x015A, r24	; 0x80015a <riverbank_status>
     c02:	0e 94 5f 03 	call	0x6be	; 0x6be <redraw_whole_display>
     c06:	83 e0       	ldi	r24, 0x03	; 3
     c08:	80 93 64 01 	sts	0x0164, r24	; 0x800164 <frog_lives>
     c0c:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <init_led>
     c10:	0e 94 c6 03 	call	0x78c	; 0x78c <put_frog_in_start_position>
     c14:	08 95       	ret

00000c16 <scroll_vehicle_lane>:
		//
	}
}

// Scroll the given lane of traffic. (lane value must be 0 to 2)
void scroll_vehicle_lane(uint8_t lane, int8_t direction) {
     c16:	0f 93       	push	r16
     c18:	1f 93       	push	r17
     c1a:	cf 93       	push	r28
     c1c:	df 93       	push	r29
	uint8_t frog_is_in_this_row = (frog_row == lane + FIRST_VEHICLE_ROW);
     c1e:	c0 91 67 01 	lds	r28, 0x0167	; 0x800167 <frog_row>
     c22:	0c 2e       	mov	r0, r28
     c24:	00 0c       	add	r0, r0
     c26:	dd 0b       	sbc	r29, r29
     c28:	28 2f       	mov	r18, r24
     c2a:	30 e0       	ldi	r19, 0x00	; 0
     c2c:	89 01       	movw	r16, r18
     c2e:	0f 5f       	subi	r16, 0xFF	; 255
     c30:	1f 4f       	sbci	r17, 0xFF	; 255
	
	// Work out the new lane position.
	// Wrap numbers around if they go out of range
	// A direction of -1 indicates movement to the left which means we
	// start from a higher bit position in column 0
	lane_position[lane] -= direction;
     c32:	f9 01       	movw	r30, r18
     c34:	e0 5a       	subi	r30, 0xA0	; 160
     c36:	fe 4f       	sbci	r31, 0xFE	; 254
     c38:	90 81       	ld	r25, Z
     c3a:	96 1b       	sub	r25, r22
	if(lane_position[lane] < 0) {
     c3c:	32 f4       	brpl	.+12     	; 0xc4a <scroll_vehicle_lane+0x34>
		lane_position[lane] = LANE_DATA_WIDTH-1;
     c3e:	f9 01       	movw	r30, r18
     c40:	e0 5a       	subi	r30, 0xA0	; 160
     c42:	fe 4f       	sbci	r31, 0xFE	; 254
     c44:	9f e3       	ldi	r25, 0x3F	; 63
     c46:	90 83       	st	Z, r25
     c48:	0b c0       	rjmp	.+22     	; 0xc60 <scroll_vehicle_lane+0x4a>
	} else if(lane_position[lane] >= LANE_DATA_WIDTH) {
     c4a:	90 34       	cpi	r25, 0x40	; 64
     c4c:	2c f4       	brge	.+10     	; 0xc58 <scroll_vehicle_lane+0x42>
	
	// Work out the new lane position.
	// Wrap numbers around if they go out of range
	// A direction of -1 indicates movement to the left which means we
	// start from a higher bit position in column 0
	lane_position[lane] -= direction;
     c4e:	f9 01       	movw	r30, r18
     c50:	e0 5a       	subi	r30, 0xA0	; 160
     c52:	fe 4f       	sbci	r31, 0xFE	; 254
     c54:	90 83       	st	Z, r25
     c56:	04 c0       	rjmp	.+8      	; 0xc60 <scroll_vehicle_lane+0x4a>
	if(lane_position[lane] < 0) {
		lane_position[lane] = LANE_DATA_WIDTH-1;
	} else if(lane_position[lane] >= LANE_DATA_WIDTH) {
		lane_position[lane] = 0;
     c58:	f9 01       	movw	r30, r18
     c5a:	e0 5a       	subi	r30, 0xA0	; 160
     c5c:	fe 4f       	sbci	r31, 0xFE	; 254
     c5e:	10 82       	st	Z, r1
	}
	// Update whether the frog will be alive or not. (The frog hasn't moved but
	// it may have been hit by a vehicle.)
	
	// Show the lane on the display
	redraw_traffic_lane(lane);
     c60:	0e 94 30 02 	call	0x460	; 0x460 <redraw_traffic_lane>
	
	// If the frog is in this row, show it
	if(frog_is_in_this_row) {
     c64:	c0 17       	cp	r28, r16
     c66:	d1 07       	cpc	r29, r17
     c68:	69 f4       	brne	.+26     	; 0xc84 <scroll_vehicle_lane+0x6e>
		decrement = will_frog_die_at_position(frog_row, frog_column);
     c6a:	60 91 66 01 	lds	r22, 0x0166	; 0x800166 <frog_column>
     c6e:	80 91 67 01 	lds	r24, 0x0167	; 0x800167 <frog_row>
     c72:	0e 94 a9 01 	call	0x352	; 0x352 <will_frog_die_at_position>
     c76:	80 93 63 01 	sts	0x0163, r24	; 0x800163 <decrement>
		if (decrement) {
     c7a:	81 11       	cpse	r24, r1
			decrement_lives();
     c7c:	0e 94 2e 04 	call	0x85c	; 0x85c <decrement_lives>
		}
		redraw_frog();
     c80:	0e 94 91 03 	call	0x722	; 0x722 <redraw_frog>
	}
}
     c84:	df 91       	pop	r29
     c86:	cf 91       	pop	r28
     c88:	1f 91       	pop	r17
     c8a:	0f 91       	pop	r16
     c8c:	08 95       	ret

00000c8e <scroll_river_channel>:


void scroll_river_channel(uint8_t channel, int8_t direction) {
     c8e:	cf 92       	push	r12
     c90:	df 92       	push	r13
     c92:	ef 92       	push	r14
     c94:	ff 92       	push	r15
     c96:	0f 93       	push	r16
     c98:	1f 93       	push	r17
     c9a:	cf 93       	push	r28
     c9c:	df 93       	push	r29
     c9e:	d8 2e       	mov	r13, r24
     ca0:	c6 2e       	mov	r12, r22
	uint8_t frog_is_in_this_row = (frog_row == channel + FIRST_RIVER_ROW);
     ca2:	00 91 67 01 	lds	r16, 0x0167	; 0x800167 <frog_row>
     ca6:	00 2e       	mov	r0, r16
     ca8:	00 0c       	add	r0, r0
     caa:	11 0b       	sbc	r17, r17
     cac:	c8 2f       	mov	r28, r24
     cae:	d0 e0       	ldi	r29, 0x00	; 0
     cb0:	7e 01       	movw	r14, r28
     cb2:	85 e0       	ldi	r24, 0x05	; 5
     cb4:	e8 0e       	add	r14, r24
     cb6:	f1 1c       	adc	r15, r1
	// Note, if the frog is in this row then it will be on a log
	
	if(frog_is_in_this_row) {
     cb8:	0e 15       	cp	r16, r14
     cba:	1f 05       	cpc	r17, r15
     cbc:	c9 f4       	brne	.+50     	; 0xcf0 <scroll_river_channel+0x62>
		// Check if they're going to hit the edge - don't let the frog
		// go beyond the edge
		if(direction == 1 && frog_column == 15) {
     cbe:	81 e0       	ldi	r24, 0x01	; 1
     cc0:	68 13       	cpse	r22, r24
     cc2:	07 c0       	rjmp	.+14     	; 0xcd2 <scroll_river_channel+0x44>
     cc4:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <frog_column>
     cc8:	8f 30       	cpi	r24, 0x0F	; 15
     cca:	69 f4       	brne	.+26     	; 0xce6 <scroll_river_channel+0x58>
			decrement_lives(); // hit right edge
     ccc:	0e 94 2e 04 	call	0x85c	; 0x85c <decrement_lives>
     cd0:	0f c0       	rjmp	.+30     	; 0xcf0 <scroll_river_channel+0x62>
		} else if(direction == -1 && frog_column == 0) {
     cd2:	8f ef       	ldi	r24, 0xFF	; 255
     cd4:	68 13       	cpse	r22, r24
     cd6:	07 c0       	rjmp	.+14     	; 0xce6 <scroll_river_channel+0x58>
     cd8:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <frog_column>
     cdc:	81 11       	cpse	r24, r1
     cde:	03 c0       	rjmp	.+6      	; 0xce6 <scroll_river_channel+0x58>
			decrement_lives(); // hit left edge
     ce0:	0e 94 2e 04 	call	0x85c	; 0x85c <decrement_lives>
     ce4:	05 c0       	rjmp	.+10     	; 0xcf0 <scroll_river_channel+0x62>
		} else {
			// Move the frog with the log - they're not going to hit the edge
			frog_column += direction;
     ce6:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <frog_column>
     cea:	8c 0d       	add	r24, r12
     cec:	80 93 66 01 	sts	0x0166, r24	; 0x800166 <frog_column>
		}
	}
		
	// Work out the new log position.
	// Wrap numbers around if they go out of range
	log_position[channel] -= direction;
     cf0:	fe 01       	movw	r30, r28
     cf2:	e2 5a       	subi	r30, 0xA2	; 162
     cf4:	fe 4f       	sbci	r31, 0xFE	; 254
     cf6:	80 81       	ld	r24, Z
     cf8:	8c 19       	sub	r24, r12
	if(log_position[channel] < 0) {
     cfa:	1a f4       	brpl	.+6      	; 0xd02 <scroll_river_channel+0x74>
		log_position[channel] = LOG_DATA_WIDTH-1;
     cfc:	8f e1       	ldi	r24, 0x1F	; 31
     cfe:	80 83       	st	Z, r24
     d00:	09 c0       	rjmp	.+18     	; 0xd14 <scroll_river_channel+0x86>
	} else if(log_position[channel] >= LOG_DATA_WIDTH) {
     d02:	80 32       	cpi	r24, 0x20	; 32
     d04:	24 f4       	brge	.+8      	; 0xd0e <scroll_river_channel+0x80>
		}
	}
		
	// Work out the new log position.
	// Wrap numbers around if they go out of range
	log_position[channel] -= direction;
     d06:	c2 5a       	subi	r28, 0xA2	; 162
     d08:	de 4f       	sbci	r29, 0xFE	; 254
     d0a:	88 83       	st	Y, r24
     d0c:	03 c0       	rjmp	.+6      	; 0xd14 <scroll_river_channel+0x86>
	if(log_position[channel] < 0) {
		log_position[channel] = LOG_DATA_WIDTH-1;
	} else if(log_position[channel] >= LOG_DATA_WIDTH) {
		log_position[channel] = 0;
     d0e:	c2 5a       	subi	r28, 0xA2	; 162
     d10:	de 4f       	sbci	r29, 0xFE	; 254
     d12:	18 82       	st	Y, r1
	}
		
	// Work out the log data to send to the display
	redraw_river_channel(channel);
     d14:	8d 2d       	mov	r24, r13
     d16:	0e 94 c1 02 	call	0x582	; 0x582 <redraw_river_channel>
		
	// If the frog is in this row, put them on the log
	if(frog_is_in_this_row) {
     d1a:	0e 15       	cp	r16, r14
     d1c:	1f 05       	cpc	r17, r15
     d1e:	11 f4       	brne	.+4      	; 0xd24 <scroll_river_channel+0x96>
		redraw_frog();
     d20:	0e 94 91 03 	call	0x722	; 0x722 <redraw_frog>
	}
}
     d24:	df 91       	pop	r29
     d26:	cf 91       	pop	r28
     d28:	1f 91       	pop	r17
     d2a:	0f 91       	pop	r16
     d2c:	ff 90       	pop	r15
     d2e:	ef 90       	pop	r14
     d30:	df 90       	pop	r13
     d32:	cf 90       	pop	r12
     d34:	08 95       	ret

00000d36 <ledmatrix_setup>:
	(void)spi_send_byte(0x08);
}

void ledmatrix_shift_display_down(void) {
	(void)spi_send_byte(CMD_SHIFT_DISPLAY);
	(void)spi_send_byte(0x04);
     d36:	80 e8       	ldi	r24, 0x80	; 128
     d38:	0e 94 1a 0d 	call	0x1a34	; 0x1a34 <spi_setup_master>
     d3c:	08 95       	ret

00000d3e <ledmatrix_update_pixel>:
     d3e:	1f 93       	push	r17
     d40:	cf 93       	push	r28
     d42:	df 93       	push	r29
     d44:	80 31       	cpi	r24, 0x10	; 16
     d46:	b0 f4       	brcc	.+44     	; 0xd74 <ledmatrix_update_pixel+0x36>
     d48:	68 30       	cpi	r22, 0x08	; 8
     d4a:	a0 f4       	brcc	.+40     	; 0xd74 <ledmatrix_update_pixel+0x36>
     d4c:	14 2f       	mov	r17, r20
     d4e:	c6 2f       	mov	r28, r22
     d50:	d8 2f       	mov	r29, r24
     d52:	81 e0       	ldi	r24, 0x01	; 1
     d54:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <spi_send_byte>
     d58:	6c 2f       	mov	r22, r28
     d5a:	67 70       	andi	r22, 0x07	; 7
     d5c:	80 e1       	ldi	r24, 0x10	; 16
     d5e:	68 9f       	mul	r22, r24
     d60:	90 01       	movw	r18, r0
     d62:	11 24       	eor	r1, r1
     d64:	8d 2f       	mov	r24, r29
     d66:	8f 70       	andi	r24, 0x0F	; 15
     d68:	82 2b       	or	r24, r18
     d6a:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <spi_send_byte>
     d6e:	81 2f       	mov	r24, r17
     d70:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <spi_send_byte>
     d74:	df 91       	pop	r29
     d76:	cf 91       	pop	r28
     d78:	1f 91       	pop	r17
     d7a:	08 95       	ret

00000d7c <ledmatrix_update_row>:
     d7c:	0f 93       	push	r16
     d7e:	1f 93       	push	r17
     d80:	cf 93       	push	r28
     d82:	df 93       	push	r29
     d84:	88 30       	cpi	r24, 0x08	; 8
     d86:	90 f4       	brcc	.+36     	; 0xdac <ledmatrix_update_row+0x30>
     d88:	8b 01       	movw	r16, r22
     d8a:	c8 2f       	mov	r28, r24
     d8c:	82 e0       	ldi	r24, 0x02	; 2
     d8e:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <spi_send_byte>
     d92:	8c 2f       	mov	r24, r28
     d94:	87 70       	andi	r24, 0x07	; 7
     d96:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <spi_send_byte>
     d9a:	e8 01       	movw	r28, r16
     d9c:	00 5f       	subi	r16, 0xF0	; 240
     d9e:	1f 4f       	sbci	r17, 0xFF	; 255
     da0:	89 91       	ld	r24, Y+
     da2:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <spi_send_byte>
     da6:	c0 17       	cp	r28, r16
     da8:	d1 07       	cpc	r29, r17
     daa:	d1 f7       	brne	.-12     	; 0xda0 <ledmatrix_update_row+0x24>
     dac:	df 91       	pop	r29
     dae:	cf 91       	pop	r28
     db0:	1f 91       	pop	r17
     db2:	0f 91       	pop	r16
     db4:	08 95       	ret

00000db6 <ledmatrix_update_column>:
     db6:	0f 93       	push	r16
     db8:	1f 93       	push	r17
     dba:	cf 93       	push	r28
     dbc:	df 93       	push	r29
     dbe:	80 31       	cpi	r24, 0x10	; 16
     dc0:	90 f4       	brcc	.+36     	; 0xde6 <ledmatrix_update_column+0x30>
     dc2:	8b 01       	movw	r16, r22
     dc4:	c8 2f       	mov	r28, r24
     dc6:	83 e0       	ldi	r24, 0x03	; 3
     dc8:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <spi_send_byte>
     dcc:	8c 2f       	mov	r24, r28
     dce:	8f 70       	andi	r24, 0x0F	; 15
     dd0:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <spi_send_byte>
     dd4:	e8 01       	movw	r28, r16
     dd6:	08 5f       	subi	r16, 0xF8	; 248
     dd8:	1f 4f       	sbci	r17, 0xFF	; 255
     dda:	89 91       	ld	r24, Y+
     ddc:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <spi_send_byte>
     de0:	c0 17       	cp	r28, r16
     de2:	d1 07       	cpc	r29, r17
     de4:	d1 f7       	brne	.-12     	; 0xdda <ledmatrix_update_column+0x24>
     de6:	df 91       	pop	r29
     de8:	cf 91       	pop	r28
     dea:	1f 91       	pop	r17
     dec:	0f 91       	pop	r16
     dee:	08 95       	ret

00000df0 <ledmatrix_shift_display_left>:
     df0:	84 e0       	ldi	r24, 0x04	; 4
     df2:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <spi_send_byte>
     df6:	82 e0       	ldi	r24, 0x02	; 2
     df8:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <spi_send_byte>
     dfc:	08 95       	ret

00000dfe <ledmatrix_clear>:
}

void ledmatrix_clear(void) {
	(void)spi_send_byte(CMD_CLEAR_SCREEN);
     dfe:	8f e0       	ldi	r24, 0x0F	; 15
     e00:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <spi_send_byte>
     e04:	08 95       	ret

00000e06 <initialise_hardware>:
		handle_game_over();
	}
}

void initialise_hardware(void) {
	ledmatrix_setup();
     e06:	0e 94 9b 06 	call	0xd36	; 0xd36 <ledmatrix_setup>
	init_button_interrupts();
     e0a:	0e 94 1d 01 	call	0x23a	; 0x23a <init_button_interrupts>
	
	// Setup serial port for 19200 baud communication with no echo
	// of incoming characters
	init_serial_stdio(19200,0);
     e0e:	40 e0       	ldi	r20, 0x00	; 0
     e10:	60 e0       	ldi	r22, 0x00	; 0
     e12:	7b e4       	ldi	r23, 0x4B	; 75
     e14:	80 e0       	ldi	r24, 0x00	; 0
     e16:	90 e0       	ldi	r25, 0x00	; 0
     e18:	0e 94 32 0c 	call	0x1864	; 0x1864 <init_serial_stdio>
	
	init_timer0();
     e1c:	0e 94 62 0d 	call	0x1ac4	; 0x1ac4 <init_timer0>
	
	// Turn on global interrupts
	sei();
     e20:	78 94       	sei
     e22:	08 95       	ret

00000e24 <splash_screen>:
}

void splash_screen(void) {
	// Clear terminal screen and output a message
	clear_terminal();
     e24:	0e 94 59 0d 	call	0x1ab2	; 0x1ab2 <clear_terminal>
	move_cursor(10,10);
     e28:	6a e0       	ldi	r22, 0x0A	; 10
     e2a:	70 e0       	ldi	r23, 0x00	; 0
     e2c:	8a e0       	ldi	r24, 0x0A	; 10
     e2e:	90 e0       	ldi	r25, 0x00	; 0
     e30:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <move_cursor>
	printf_P(PSTR("Frogger by 46258839"));
     e34:	8c ef       	ldi	r24, 0xFC	; 252
     e36:	90 e0       	ldi	r25, 0x00	; 0
     e38:	9f 93       	push	r25
     e3a:	8f 93       	push	r24
     e3c:	0e 94 e0 0f 	call	0x1fc0	; 0x1fc0 <printf_P>
	move_cursor(10,12);
     e40:	6c e0       	ldi	r22, 0x0C	; 12
     e42:	70 e0       	ldi	r23, 0x00	; 0
     e44:	8a e0       	ldi	r24, 0x0A	; 10
     e46:	90 e0       	ldi	r25, 0x00	; 0
     e48:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <move_cursor>
	printf_P(PSTR("CSSE2010 project by Rebecca Vanneman"));
     e4c:	87 ed       	ldi	r24, 0xD7	; 215
     e4e:	90 e0       	ldi	r25, 0x00	; 0
     e50:	9f 93       	push	r25
     e52:	8f 93       	push	r24
     e54:	0e 94 e0 0f 	call	0x1fc0	; 0x1fc0 <printf_P>
	
	// Output the scrolling message to the LED matrix
	// and wait for a push button to be pushed.
	ledmatrix_clear();
     e58:	0e 94 ff 06 	call	0xdfe	; 0xdfe <ledmatrix_clear>
     e5c:	0f 90       	pop	r0
     e5e:	0f 90       	pop	r0
     e60:	0f 90       	pop	r0
     e62:	0f 90       	pop	r0
	while(1) {
		set_scrolling_display_text("FROGGER 45258839", COLOUR_GREEN);
     e64:	60 ef       	ldi	r22, 0xF0	; 240
     e66:	88 e3       	ldi	r24, 0x38	; 56
     e68:	91 e0       	ldi	r25, 0x01	; 1
     e6a:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <set_scrolling_display_text>
		// Scroll the message until it has scrolled off the 
		// display or a button is pushed
		while(scroll_display()) {
     e6e:	0d c0       	rjmp	.+26     	; 0xe8a <splash_screen+0x66>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     e70:	2f e7       	ldi	r18, 0x7F	; 127
     e72:	89 ea       	ldi	r24, 0xA9	; 169
     e74:	93 e0       	ldi	r25, 0x03	; 3
     e76:	21 50       	subi	r18, 0x01	; 1
     e78:	80 40       	sbci	r24, 0x00	; 0
     e7a:	90 40       	sbci	r25, 0x00	; 0
     e7c:	e1 f7       	brne	.-8      	; 0xe76 <splash_screen+0x52>
     e7e:	00 c0       	rjmp	.+0      	; 0xe80 <splash_screen+0x5c>
     e80:	00 00       	nop
			_delay_ms(150);
			if(button_pushed() != NO_BUTTON_PUSHED) {
     e82:	0e 94 2b 01 	call	0x256	; 0x256 <button_pushed>
     e86:	8f 3f       	cpi	r24, 0xFF	; 255
     e88:	29 f4       	brne	.+10     	; 0xe94 <splash_screen+0x70>
	ledmatrix_clear();
	while(1) {
		set_scrolling_display_text("FROGGER 45258839", COLOUR_GREEN);
		// Scroll the message until it has scrolled off the 
		// display or a button is pushed
		while(scroll_display()) {
     e8a:	0e 94 0a 0b 	call	0x1614	; 0x1614 <scroll_display>
     e8e:	81 11       	cpse	r24, r1
     e90:	ef cf       	rjmp	.-34     	; 0xe70 <splash_screen+0x4c>
     e92:	e8 cf       	rjmp	.-48     	; 0xe64 <splash_screen+0x40>
     e94:	08 95       	ret

00000e96 <handle_game_over>:
	// The game is over.
}


void handle_game_over() {
	move_cursor(10,14);
     e96:	6e e0       	ldi	r22, 0x0E	; 14
     e98:	70 e0       	ldi	r23, 0x00	; 0
     e9a:	8a e0       	ldi	r24, 0x0A	; 10
     e9c:	90 e0       	ldi	r25, 0x00	; 0
     e9e:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <move_cursor>
	printf_P(PSTR("GAME OVER"));
     ea2:	8d ec       	ldi	r24, 0xCD	; 205
     ea4:	90 e0       	ldi	r25, 0x00	; 0
     ea6:	9f 93       	push	r25
     ea8:	8f 93       	push	r24
     eaa:	0e 94 e0 0f 	call	0x1fc0	; 0x1fc0 <printf_P>
	move_cursor(10,15);
     eae:	6f e0       	ldi	r22, 0x0F	; 15
     eb0:	70 e0       	ldi	r23, 0x00	; 0
     eb2:	8a e0       	ldi	r24, 0x0A	; 10
     eb4:	90 e0       	ldi	r25, 0x00	; 0
     eb6:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <move_cursor>
	printf_P(PSTR("Press a button to start again"));
     eba:	8f ea       	ldi	r24, 0xAF	; 175
     ebc:	90 e0       	ldi	r25, 0x00	; 0
     ebe:	9f 93       	push	r25
     ec0:	8f 93       	push	r24
     ec2:	0e 94 e0 0f 	call	0x1fc0	; 0x1fc0 <printf_P>
	while(button_pushed() == NO_BUTTON_PUSHED) {
     ec6:	0f 90       	pop	r0
     ec8:	0f 90       	pop	r0
     eca:	0f 90       	pop	r0
     ecc:	0f 90       	pop	r0
     ece:	0e 94 2b 01 	call	0x256	; 0x256 <button_pushed>
     ed2:	8f 3f       	cpi	r24, 0xFF	; 255
     ed4:	e1 f3       	breq	.-8      	; 0xece <handle_game_over+0x38>
		; // wait
	}
	
}
     ed6:	08 95       	ret

00000ed8 <update_score>:

void update_score() {
     ed8:	cf 92       	push	r12
     eda:	df 92       	push	r13
     edc:	ef 92       	push	r14
     ede:	ff 92       	push	r15
	clear_terminal();
     ee0:	0e 94 59 0d 	call	0x1ab2	; 0x1ab2 <clear_terminal>
	move_cursor(30,2);
     ee4:	62 e0       	ldi	r22, 0x02	; 2
     ee6:	70 e0       	ldi	r23, 0x00	; 0
     ee8:	8e e1       	ldi	r24, 0x1E	; 30
     eea:	90 e0       	ldi	r25, 0x00	; 0
     eec:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <move_cursor>
	//printf_P(PSTR("\x1b[K"));
	printf_P(PSTR("Score:"));
     ef0:	88 ea       	ldi	r24, 0xA8	; 168
     ef2:	90 e0       	ldi	r25, 0x00	; 0
     ef4:	9f 93       	push	r25
     ef6:	8f 93       	push	r24
     ef8:	0e 94 e0 0f 	call	0x1fc0	; 0x1fc0 <printf_P>
	
	int score = get_score();
     efc:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <get_score>
     f00:	6b 01       	movw	r12, r22
     f02:	7c 01       	movw	r14, r24
	if (score < 10) {
     f04:	0f 90       	pop	r0
     f06:	0f 90       	pop	r0
     f08:	6a 30       	cpi	r22, 0x0A	; 10
     f0a:	71 05       	cpc	r23, r1
     f0c:	3c f4       	brge	.+14     	; 0xf1c <update_score+0x44>
		move_cursor(40,2);
     f0e:	62 e0       	ldi	r22, 0x02	; 2
     f10:	70 e0       	ldi	r23, 0x00	; 0
     f12:	88 e2       	ldi	r24, 0x28	; 40
     f14:	90 e0       	ldi	r25, 0x00	; 0
     f16:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <move_cursor>
     f1a:	25 c0       	rjmp	.+74     	; 0xf66 <update_score+0x8e>
	} else if (score >10 && score < 100) {
     f1c:	cb 01       	movw	r24, r22
     f1e:	0b 97       	sbiw	r24, 0x0b	; 11
     f20:	89 35       	cpi	r24, 0x59	; 89
     f22:	91 05       	cpc	r25, r1
     f24:	38 f4       	brcc	.+14     	; 0xf34 <update_score+0x5c>
		move_cursor(39,2);
     f26:	62 e0       	ldi	r22, 0x02	; 2
     f28:	70 e0       	ldi	r23, 0x00	; 0
     f2a:	87 e2       	ldi	r24, 0x27	; 39
     f2c:	90 e0       	ldi	r25, 0x00	; 0
     f2e:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <move_cursor>
     f32:	19 c0       	rjmp	.+50     	; 0xf66 <update_score+0x8e>
	} else if (score > 100 && score < 1000){
     f34:	c6 01       	movw	r24, r12
     f36:	85 56       	subi	r24, 0x65	; 101
     f38:	91 09       	sbc	r25, r1
     f3a:	83 38       	cpi	r24, 0x83	; 131
     f3c:	93 40       	sbci	r25, 0x03	; 3
     f3e:	38 f4       	brcc	.+14     	; 0xf4e <update_score+0x76>
		move_cursor(38,2);
     f40:	62 e0       	ldi	r22, 0x02	; 2
     f42:	70 e0       	ldi	r23, 0x00	; 0
     f44:	86 e2       	ldi	r24, 0x26	; 38
     f46:	90 e0       	ldi	r25, 0x00	; 0
     f48:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <move_cursor>
     f4c:	0c c0       	rjmp	.+24     	; 0xf66 <update_score+0x8e>
	} else if (score > 1000 && score < 10000){
     f4e:	c6 01       	movw	r24, r12
     f50:	89 5e       	subi	r24, 0xE9	; 233
     f52:	93 40       	sbci	r25, 0x03	; 3
     f54:	87 32       	cpi	r24, 0x27	; 39
     f56:	93 42       	sbci	r25, 0x23	; 35
     f58:	30 f4       	brcc	.+12     	; 0xf66 <update_score+0x8e>
		move_cursor(37,2);
     f5a:	62 e0       	ldi	r22, 0x02	; 2
     f5c:	70 e0       	ldi	r23, 0x00	; 0
     f5e:	85 e2       	ldi	r24, 0x25	; 37
     f60:	90 e0       	ldi	r25, 0x00	; 0
     f62:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <move_cursor>
	}
	printf_P(PSTR("%d"), score);
     f66:	df 92       	push	r13
     f68:	cf 92       	push	r12
     f6a:	85 ea       	ldi	r24, 0xA5	; 165
     f6c:	90 e0       	ldi	r25, 0x00	; 0
     f6e:	9f 93       	push	r25
     f70:	8f 93       	push	r24
     f72:	0e 94 e0 0f 	call	0x1fc0	; 0x1fc0 <printf_P>
}
     f76:	0f 90       	pop	r0
     f78:	0f 90       	pop	r0
     f7a:	0f 90       	pop	r0
     f7c:	0f 90       	pop	r0
     f7e:	ff 90       	pop	r15
     f80:	ef 90       	pop	r14
     f82:	df 90       	pop	r13
     f84:	cf 90       	pop	r12
     f86:	08 95       	ret

00000f88 <update_level>:

void update_level(uint32_t level) {
     f88:	0f 93       	push	r16
     f8a:	1f 93       	push	r17
     f8c:	cf 93       	push	r28
     f8e:	df 93       	push	r29
     f90:	c6 2f       	mov	r28, r22
     f92:	d7 2f       	mov	r29, r23
     f94:	18 2f       	mov	r17, r24
     f96:	09 2f       	mov	r16, r25
	move_cursor(30,3);
     f98:	63 e0       	ldi	r22, 0x03	; 3
     f9a:	70 e0       	ldi	r23, 0x00	; 0
     f9c:	8e e1       	ldi	r24, 0x1E	; 30
     f9e:	90 e0       	ldi	r25, 0x00	; 0
     fa0:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <move_cursor>
	printf_P(PSTR("Level %d"), level);
     fa4:	0f 93       	push	r16
     fa6:	1f 93       	push	r17
     fa8:	df 93       	push	r29
     faa:	cf 93       	push	r28
     fac:	8c e9       	ldi	r24, 0x9C	; 156
     fae:	90 e0       	ldi	r25, 0x00	; 0
     fb0:	9f 93       	push	r25
     fb2:	8f 93       	push	r24
     fb4:	0e 94 e0 0f 	call	0x1fc0	; 0x1fc0 <printf_P>
}
     fb8:	0f 90       	pop	r0
     fba:	0f 90       	pop	r0
     fbc:	0f 90       	pop	r0
     fbe:	0f 90       	pop	r0
     fc0:	0f 90       	pop	r0
     fc2:	0f 90       	pop	r0
     fc4:	df 91       	pop	r29
     fc6:	cf 91       	pop	r28
     fc8:	1f 91       	pop	r17
     fca:	0f 91       	pop	r16
     fcc:	08 95       	ret

00000fce <new_game>:
	}
}

void new_game(void) {
	// Initialise the game and display
	initialise_game();
     fce:	0e 94 e7 05 	call	0xbce	; 0xbce <initialise_game>
	
	// Clear the serial terminal
	clear_terminal();
     fd2:	0e 94 59 0d 	call	0x1ab2	; 0x1ab2 <clear_terminal>
	
	// Initialise the score and put score/level on serial terminal
	init_score();
     fd6:	0e 94 d4 0a 	call	0x15a8	; 0x15a8 <init_score>
	update_score();
     fda:	0e 94 6c 07 	call	0xed8	; 0xed8 <update_score>
	update_level(1);
     fde:	61 e0       	ldi	r22, 0x01	; 1
     fe0:	70 e0       	ldi	r23, 0x00	; 0
     fe2:	80 e0       	ldi	r24, 0x00	; 0
     fe4:	90 e0       	ldi	r25, 0x00	; 0
     fe6:	0e 94 c4 07 	call	0xf88	; 0xf88 <update_level>
	init_led();
     fea:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <init_led>
	
	// Clear a button push or serial input if any are waiting
	// (The cast to void means the return value is ignored.)
	(void)button_pushed();
     fee:	0e 94 2b 01 	call	0x256	; 0x256 <button_pushed>
	clear_serial_input_buffer();
     ff2:	0e 94 80 0c 	call	0x1900	; 0x1900 <clear_serial_input_buffer>
     ff6:	08 95       	ret

00000ff8 <pause_game>:
void update_level(uint32_t level) {
	move_cursor(30,3);
	printf_P(PSTR("Level %d"), level);
}

void pause_game() {
     ff8:	0f 93       	push	r16
     ffa:	1f 93       	push	r17
	// Game is already paused, unpause
	if (paused == 1){
     ffc:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <paused>
    1000:	81 30       	cpi	r24, 0x01	; 1
    1002:	e9 f4       	brne	.+58     	; 0x103e <pause_game+0x46>
		uint32_t now = get_current_time();
    1004:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <get_current_time>
		time_paused = now - begin_pause;
    1008:	00 91 69 01 	lds	r16, 0x0169	; 0x800169 <begin_pause>
    100c:	10 91 6a 01 	lds	r17, 0x016A	; 0x80016a <begin_pause+0x1>
    1010:	20 91 6b 01 	lds	r18, 0x016B	; 0x80016b <begin_pause+0x2>
    1014:	30 91 6c 01 	lds	r19, 0x016C	; 0x80016c <begin_pause+0x3>
    1018:	dc 01       	movw	r26, r24
    101a:	cb 01       	movw	r24, r22
    101c:	80 1b       	sub	r24, r16
    101e:	91 0b       	sbc	r25, r17
    1020:	a2 0b       	sbc	r26, r18
    1022:	b3 0b       	sbc	r27, r19
    1024:	80 93 6d 01 	sts	0x016D, r24	; 0x80016d <time_paused>
    1028:	90 93 6e 01 	sts	0x016E, r25	; 0x80016e <time_paused+0x1>
    102c:	a0 93 6f 01 	sts	0x016F, r26	; 0x80016f <time_paused+0x2>
    1030:	b0 93 70 01 	sts	0x0170, r27	; 0x800170 <time_paused+0x3>
		paused = 0;
    1034:	10 92 68 01 	sts	0x0168, r1	; 0x800168 <paused>
		countdown_pause();
    1038:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <countdown_pause>
    103c:	0f c0       	rjmp	.+30     	; 0x105c <pause_game+0x64>
	} else {
		// Pause Game
		begin_pause = get_current_time();
    103e:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <get_current_time>
    1042:	60 93 69 01 	sts	0x0169, r22	; 0x800169 <begin_pause>
    1046:	70 93 6a 01 	sts	0x016A, r23	; 0x80016a <begin_pause+0x1>
    104a:	80 93 6b 01 	sts	0x016B, r24	; 0x80016b <begin_pause+0x2>
    104e:	90 93 6c 01 	sts	0x016C, r25	; 0x80016c <begin_pause+0x3>
		paused = 1;
    1052:	81 e0       	ldi	r24, 0x01	; 1
    1054:	80 93 68 01 	sts	0x0168, r24	; 0x800168 <paused>
		countdown_pause();
    1058:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <countdown_pause>
	}
}
    105c:	1f 91       	pop	r17
    105e:	0f 91       	pop	r16
    1060:	08 95       	ret

00001062 <play_game>:
	// (The cast to void means the return value is ignored.)
	(void)button_pushed();
	clear_serial_input_buffer();
}

void play_game(void) {
    1062:	2f 92       	push	r2
    1064:	3f 92       	push	r3
    1066:	4f 92       	push	r4
    1068:	5f 92       	push	r5
    106a:	6f 92       	push	r6
    106c:	7f 92       	push	r7
    106e:	8f 92       	push	r8
    1070:	9f 92       	push	r9
    1072:	af 92       	push	r10
    1074:	bf 92       	push	r11
    1076:	cf 92       	push	r12
    1078:	df 92       	push	r13
    107a:	ef 92       	push	r14
    107c:	ff 92       	push	r15
    107e:	0f 93       	push	r16
    1080:	1f 93       	push	r17
    1082:	cf 93       	push	r28
    1084:	df 93       	push	r29
    1086:	00 d0       	rcall	.+0      	; 0x1088 <play_game+0x26>
    1088:	00 d0       	rcall	.+0      	; 0x108a <play_game+0x28>
    108a:	1f 92       	push	r1
    108c:	cd b7       	in	r28, 0x3d	; 61
    108e:	de b7       	in	r29, 0x3e	; 62
	uint32_t level = 1; // Specifies level
	uint16_t speed_up_by = 0; // Rates will speed up each level it increases
	
	// Start Countdown
	
	init_countdown();
    1090:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <init_countdown>
	// Get the current time and remember this as the last time the vehicles
	// and logs were moved.
	current_time = get_current_time();
    1094:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <get_current_time>
    1098:	2b 01       	movw	r4, r22
    109a:	3c 01       	movw	r6, r24
	road0 = road1 = road2 = river0 = river1 = 0;
	int8_t button;
	char serial_input, escape_sequence_char;
	uint8_t characters_into_escape_sequence = 0;
	uint32_t level = 1; // Specifies level
	uint16_t speed_up_by = 0; // Rates will speed up each level it increases
    109c:	1d 82       	std	Y+5, r1	; 0x05
    109e:	1c 82       	std	Y+4, r1	; 0x04
	uint8_t road0, road1, road2, river0, river1;
	road0 = road1 = road2 = river0 = river1 = 0;
	int8_t button;
	char serial_input, escape_sequence_char;
	uint8_t characters_into_escape_sequence = 0;
	uint32_t level = 1; // Specifies level
    10a0:	81 2c       	mov	r8, r1
    10a2:	91 2c       	mov	r9, r1
    10a4:	54 01       	movw	r10, r8
    10a6:	83 94       	inc	r8
	uint32_t current_time, last_move_time;
	uint8_t road0, road1, road2, river0, river1;
	road0 = road1 = road2 = river0 = river1 = 0;
	int8_t button;
	char serial_input, escape_sequence_char;
	uint8_t characters_into_escape_sequence = 0;
    10a8:	1b 82       	std	Y+3, r1	; 0x03
}

void play_game(void) {
	uint32_t current_time, last_move_time;
	uint8_t road0, road1, road2, river0, river1;
	road0 = road1 = road2 = river0 = river1 = 0;
    10aa:	21 2c       	mov	r2, r1
    10ac:	31 2c       	mov	r3, r1
    10ae:	19 82       	std	Y+1, r1	; 0x01
    10b0:	1a 82       	std	Y+2, r1	; 0x02
	current_time = get_current_time();
	last_move_time = current_time;
	
	// We play the game while the frog is alive and we haven't filled up the 
	// far riverbank
	while(!is_frog_dead()) {
    10b2:	2e c2       	rjmp	.+1116   	; 0x1510 <play_game+0x4ae>
		
		if (is_time_up()) {
    10b4:	0e 94 a6 0d 	call	0x1b4c	; 0x1b4c <is_time_up>
    10b8:	88 23       	and	r24, r24
    10ba:	69 f0       	breq	.+26     	; 0x10d6 <play_game+0x74>
			// Frog ran out of time
			decrement_lives();
    10bc:	0e 94 2e 04 	call	0x85c	; 0x85c <decrement_lives>
			if (!is_frog_dead()){
    10c0:	0e 94 28 04 	call	0x850	; 0x850 <is_frog_dead>
    10c4:	81 11       	cpse	r24, r1
    10c6:	25 c0       	rjmp	.+74     	; 0x1112 <play_game+0xb0>
				initialise_life(level);
    10c8:	c5 01       	movw	r24, r10
    10ca:	b4 01       	movw	r22, r8
    10cc:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <initialise_life>
				init_countdown();
    10d0:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <init_countdown>
    10d4:	1e c0       	rjmp	.+60     	; 0x1112 <play_game+0xb0>
			}
		}else if (!is_frog_dead() && is_riverbank_full()){
    10d6:	0e 94 28 04 	call	0x850	; 0x850 <is_frog_dead>
    10da:	81 11       	cpse	r24, r1
    10dc:	1a c0       	rjmp	.+52     	; 0x1112 <play_game+0xb0>
    10de:	0e 94 17 04 	call	0x82e	; 0x82e <is_riverbank_full>
    10e2:	88 23       	and	r24, r24
    10e4:	b1 f0       	breq	.+44     	; 0x1112 <play_game+0xb0>
			// If the riverbank is full and frog isn't dead, start a new level
			// somehow use scroll_display to scroll level over -- check splash screen stuff
			scroll_display();
    10e6:	0e 94 0a 0b 	call	0x1614	; 0x1614 <scroll_display>
			level++;
    10ea:	3f ef       	ldi	r19, 0xFF	; 255
    10ec:	83 1a       	sub	r8, r19
    10ee:	93 0a       	sbc	r9, r19
    10f0:	a3 0a       	sbc	r10, r19
    10f2:	b3 0a       	sbc	r11, r19
			initialise_level(level);
    10f4:	c5 01       	movw	r24, r10
    10f6:	b4 01       	movw	r22, r8
    10f8:	0e 94 50 05 	call	0xaa0	; 0xaa0 <initialise_level>
			update_level(level);
    10fc:	c5 01       	movw	r24, r10
    10fe:	b4 01       	movw	r22, r8
    1100:	0e 94 c4 07 	call	0xf88	; 0xf88 <update_level>
			init_countdown();
    1104:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <init_countdown>
			
			// Each level speeds up by 50 ms
			speed_up_by = speed_up_by + 50;
    1108:	8c 81       	ldd	r24, Y+4	; 0x04
    110a:	9d 81       	ldd	r25, Y+5	; 0x05
    110c:	c2 96       	adiw	r24, 0x32	; 50
    110e:	9d 83       	std	Y+5, r25	; 0x05
    1110:	8c 83       	std	Y+4, r24	; 0x04
			
		}
		if(!is_frog_dead() && !is_decremented() && frog_has_reached_riverbank()) {
    1112:	0e 94 28 04 	call	0x850	; 0x850 <is_frog_dead>
    1116:	81 11       	cpse	r24, r1
    1118:	0d c0       	rjmp	.+26     	; 0x1134 <play_game+0xd2>
    111a:	0e 94 2b 04 	call	0x856	; 0x856 <is_decremented>
    111e:	81 11       	cpse	r24, r1
    1120:	09 c0       	rjmp	.+18     	; 0x1134 <play_game+0xd2>
    1122:	0e 94 21 04 	call	0x842	; 0x842 <frog_has_reached_riverbank>
    1126:	88 23       	and	r24, r24
    1128:	29 f0       	breq	.+10     	; 0x1134 <play_game+0xd2>
			// Frog reached the other side successfully but the
			// riverbank isn't full, put a new frog at the start
			put_frog_in_start_position();
    112a:	0e 94 c6 03 	call	0x78c	; 0x78c <put_frog_in_start_position>
			
			init_countdown();
    112e:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <init_countdown>
    1132:	0e c0       	rjmp	.+28     	; 0x1150 <play_game+0xee>
		} else if (is_decremented() && !is_frog_dead()) {
    1134:	0e 94 2b 04 	call	0x856	; 0x856 <is_decremented>
    1138:	88 23       	and	r24, r24
    113a:	51 f0       	breq	.+20     	; 0x1150 <play_game+0xee>
    113c:	0e 94 28 04 	call	0x850	; 0x850 <is_frog_dead>
    1140:	81 11       	cpse	r24, r1
    1142:	06 c0       	rjmp	.+12     	; 0x1150 <play_game+0xee>
			initialise_life(level);
    1144:	c5 01       	movw	r24, r10
    1146:	b4 01       	movw	r22, r8
    1148:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <initialise_life>
			
			init_countdown();
    114c:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <init_countdown>
		// if no button pushes are waiting to be returned.)
		// Button pushes take priority over serial input. If there are both then
		// we'll retrieve the serial input the next time through this loop
		serial_input = -1;
		escape_sequence_char = -1;
		button = button_pushed();
    1150:	0e 94 2b 01 	call	0x256	; 0x256 <button_pushed>
    1154:	08 2f       	mov	r16, r24
		
		if(button == NO_BUTTON_PUSHED) {
    1156:	8f 3f       	cpi	r24, 0xFF	; 255
    1158:	11 f5       	brne	.+68     	; 0x119e <play_game+0x13c>
			// No push button was pushed, see if there is any serial input
			if(serial_input_available()) {
    115a:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <serial_input_available>
    115e:	88 23       	and	r24, r24
    1160:	01 f1       	breq	.+64     	; 0x11a2 <play_game+0x140>
				// Serial data was available - read the data from standard input
				serial_input = fgetc(stdin);
    1162:	ee ea       	ldi	r30, 0xAE	; 174
    1164:	f2 e0       	ldi	r31, 0x02	; 2
    1166:	80 81       	ld	r24, Z
    1168:	91 81       	ldd	r25, Z+1	; 0x01
    116a:	0e 94 a2 0f 	call	0x1f44	; 0x1f44 <fgetc>
    116e:	18 2f       	mov	r17, r24
				// Check if the character is part of an escape sequence
				if(characters_into_escape_sequence == 0 && serial_input == ESCAPE_CHAR) {
    1170:	fb 81       	ldd	r31, Y+3	; 0x03
    1172:	f1 11       	cpse	r31, r1
    1174:	06 c0       	rjmp	.+12     	; 0x1182 <play_game+0x120>
    1176:	8b 31       	cpi	r24, 0x1B	; 27
    1178:	b9 f4       	brne	.+46     	; 0x11a8 <play_game+0x146>
					// We've hit the first character in an escape sequence (escape)
					characters_into_escape_sequence++;
    117a:	21 e0       	ldi	r18, 0x01	; 1
    117c:	2b 83       	std	Y+3, r18	; 0x03
					serial_input = -1; // Don't further process this character
    117e:	1f ef       	ldi	r17, 0xFF	; 255
    1180:	13 c0       	rjmp	.+38     	; 0x11a8 <play_game+0x146>
				} else if(characters_into_escape_sequence == 1 && serial_input == '[') {
    1182:	3b 81       	ldd	r19, Y+3	; 0x03
    1184:	31 30       	cpi	r19, 0x01	; 1
    1186:	31 f4       	brne	.+12     	; 0x1194 <play_game+0x132>
    1188:	8b 35       	cpi	r24, 0x5B	; 91
    118a:	69 f4       	brne	.+26     	; 0x11a6 <play_game+0x144>
					// We've hit the second character in an escape sequence
					characters_into_escape_sequence++;
    118c:	82 e0       	ldi	r24, 0x02	; 2
    118e:	8b 83       	std	Y+3, r24	; 0x03
					serial_input = -1; // Don't further process this character
    1190:	1f ef       	ldi	r17, 0xFF	; 255
    1192:	0a c0       	rjmp	.+20     	; 0x11a8 <play_game+0x146>
				} else if(characters_into_escape_sequence == 2) {
    1194:	9b 81       	ldd	r25, Y+3	; 0x03
    1196:	92 30       	cpi	r25, 0x02	; 2
    1198:	09 f4       	brne	.+2      	; 0x119c <play_game+0x13a>
    119a:	c0 c1       	rjmp	.+896    	; 0x151c <play_game+0x4ba>
    119c:	ca c1       	rjmp	.+916    	; 0x1532 <play_game+0x4d0>
		// variables will be set to a value other than -1 if input is available.
		// (We don't initalise button to -1 since button_pushed() will return -1
		// if no button pushes are waiting to be returned.)
		// Button pushes take priority over serial input. If there are both then
		// we'll retrieve the serial input the next time through this loop
		serial_input = -1;
    119e:	1f ef       	ldi	r17, 0xFF	; 255
    11a0:	03 c0       	rjmp	.+6      	; 0x11a8 <play_game+0x146>
    11a2:	1f ef       	ldi	r17, 0xFF	; 255
    11a4:	01 c0       	rjmp	.+2      	; 0x11a8 <play_game+0x146>
					characters_into_escape_sequence = 0;
				} else {
					// Character was not part of an escape sequence (or we received
					// an invalid second character in the sequence). We'll process 
					// the data in the serial_input variable.
					characters_into_escape_sequence = 0;
    11a6:	1b 82       	std	Y+3, r1	; 0x03
				}
			}
		}
		
		project_last_button_state = show_button_state();
    11a8:	0e 94 a6 01 	call	0x34c	; 0x34c <show_button_state>
    11ac:	80 93 91 01 	sts	0x0191, r24	; 0x800191 <project_last_button_state>
		// Process the input. 
		if(!paused && (button==3 || escape_sequence_char=='D' || serial_input=='L' || serial_input=='l')) {
    11b0:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <paused>
    11b4:	81 11       	cpse	r24, r1
    11b6:	cb c1       	rjmp	.+918    	; 0x154e <play_game+0x4ec>
    11b8:	03 30       	cpi	r16, 0x03	; 3
    11ba:	81 f0       	breq	.+32     	; 0x11dc <play_game+0x17a>
    11bc:	8f ef       	ldi	r24, 0xFF	; 255
    11be:	08 c0       	rjmp	.+16     	; 0x11d0 <play_game+0x16e>
    11c0:	14 34       	cpi	r17, 0x44	; 68
    11c2:	59 f0       	breq	.+22     	; 0x11da <play_game+0x178>
					// We've hit the second character in an escape sequence
					characters_into_escape_sequence++;
					serial_input = -1; // Don't further process this character
				} else if(characters_into_escape_sequence == 2) {
					// Third (and last) character in the escape sequence
					escape_sequence_char = serial_input;
    11c4:	81 2f       	mov	r24, r17
					serial_input = -1;  // Don't further process this character - we
										// deal with it as part of the escape sequence
					characters_into_escape_sequence = 0;
    11c6:	1b 82       	std	Y+3, r1	; 0x03
					characters_into_escape_sequence++;
					serial_input = -1; // Don't further process this character
				} else if(characters_into_escape_sequence == 2) {
					// Third (and last) character in the escape sequence
					escape_sequence_char = serial_input;
					serial_input = -1;  // Don't further process this character - we
    11c8:	1f ef       	ldi	r17, 0xFF	; 255
    11ca:	02 c0       	rjmp	.+4      	; 0x11d0 <play_game+0x16e>
					characters_into_escape_sequence = 0;
				} else {
					// Character was not part of an escape sequence (or we received
					// an invalid second character in the sequence). We'll process 
					// the data in the serial_input variable.
					characters_into_escape_sequence = 0;
    11cc:	1b 82       	std	Y+3, r1	; 0x03
		// (We don't initalise button to -1 since button_pushed() will return -1
		// if no button pushes are waiting to be returned.)
		// Button pushes take priority over serial input. If there are both then
		// we'll retrieve the serial input the next time through this loop
		serial_input = -1;
		escape_sequence_char = -1;
    11ce:	8f ef       	ldi	r24, 0xFF	; 255
			}
		}
		
		project_last_button_state = show_button_state();
		// Process the input. 
		if(!paused && (button==3 || escape_sequence_char=='D' || serial_input=='L' || serial_input=='l')) {
    11d0:	91 2f       	mov	r25, r17
    11d2:	9f 7d       	andi	r25, 0xDF	; 223
    11d4:	9c 34       	cpi	r25, 0x4C	; 76
    11d6:	89 f4       	brne	.+34     	; 0x11fa <play_game+0x198>
    11d8:	01 c0       	rjmp	.+2      	; 0x11dc <play_game+0x17a>
				} else if(characters_into_escape_sequence == 2) {
					// Third (and last) character in the escape sequence
					escape_sequence_char = serial_input;
					serial_input = -1;  // Don't further process this character - we
										// deal with it as part of the escape sequence
					characters_into_escape_sequence = 0;
    11da:	1b 82       	std	Y+3, r1	; 0x03
		
		project_last_button_state = show_button_state();
		// Process the input. 
		if(!paused && (button==3 || escape_sequence_char=='D' || serial_input=='L' || serial_input=='l')) {
			// Attempt to move left
			move_frog_to_left();
    11dc:	0e 94 c8 04 	call	0x990	; 0x990 <move_frog_to_left>
			frog_last_moved = get_current_time();
    11e0:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <get_current_time>
    11e4:	60 93 92 01 	sts	0x0192, r22	; 0x800192 <frog_last_moved>
    11e8:	70 93 93 01 	sts	0x0193, r23	; 0x800193 <frog_last_moved+0x1>
    11ec:	80 93 94 01 	sts	0x0194, r24	; 0x800194 <frog_last_moved+0x2>
    11f0:	90 93 95 01 	sts	0x0195, r25	; 0x800195 <frog_last_moved+0x3>
			project_last_button_state = 0;
    11f4:	10 92 91 01 	sts	0x0191, r1	; 0x800191 <project_last_button_state>
    11f8:	90 c0       	rjmp	.+288    	; 0x131a <play_game+0x2b8>
		} else if(!paused && (button==2 || escape_sequence_char=='A' || serial_input=='U' || serial_input=='u')) {
    11fa:	02 30       	cpi	r16, 0x02	; 2
    11fc:	31 f0       	breq	.+12     	; 0x120a <play_game+0x1a8>
    11fe:	81 34       	cpi	r24, 0x41	; 65
    1200:	21 f0       	breq	.+8      	; 0x120a <play_game+0x1a8>
    1202:	91 2f       	mov	r25, r17
    1204:	9f 7d       	andi	r25, 0xDF	; 223
    1206:	95 35       	cpi	r25, 0x55	; 85
    1208:	a9 f4       	brne	.+42     	; 0x1234 <play_game+0x1d2>
			// Attempt to move forward
			move_frog_forward();
    120a:	0e 94 4f 04 	call	0x89e	; 0x89e <move_frog_forward>
			frog_last_moved = get_current_time();
    120e:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <get_current_time>
    1212:	60 93 92 01 	sts	0x0192, r22	; 0x800192 <frog_last_moved>
    1216:	70 93 93 01 	sts	0x0193, r23	; 0x800193 <frog_last_moved+0x1>
    121a:	80 93 94 01 	sts	0x0194, r24	; 0x800194 <frog_last_moved+0x2>
    121e:	90 93 95 01 	sts	0x0195, r25	; 0x800195 <frog_last_moved+0x3>
			project_last_button_state = 0;
    1222:	10 92 91 01 	sts	0x0191, r1	; 0x800191 <project_last_button_state>
			update_score();
    1226:	0e 94 6c 07 	call	0xed8	; 0xed8 <update_score>
			update_level(level);
    122a:	c5 01       	movw	r24, r10
    122c:	b4 01       	movw	r22, r8
    122e:	0e 94 c4 07 	call	0xf88	; 0xf88 <update_level>
    1232:	73 c0       	rjmp	.+230    	; 0x131a <play_game+0x2b8>
		} else if(!paused && (button==1 || escape_sequence_char=='B' || serial_input=='D' || serial_input=='d')) {
    1234:	01 30       	cpi	r16, 0x01	; 1
    1236:	21 f0       	breq	.+8      	; 0x1240 <play_game+0x1de>
    1238:	82 34       	cpi	r24, 0x42	; 66
    123a:	11 f0       	breq	.+4      	; 0x1240 <play_game+0x1de>
    123c:	94 34       	cpi	r25, 0x44	; 68
    123e:	79 f4       	brne	.+30     	; 0x125e <play_game+0x1fc>
			// Attempt to move down
			move_frog_backward();
    1240:	0e 94 91 04 	call	0x922	; 0x922 <move_frog_backward>
			frog_last_moved = get_current_time();
    1244:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <get_current_time>
    1248:	60 93 92 01 	sts	0x0192, r22	; 0x800192 <frog_last_moved>
    124c:	70 93 93 01 	sts	0x0193, r23	; 0x800193 <frog_last_moved+0x1>
    1250:	80 93 94 01 	sts	0x0194, r24	; 0x800194 <frog_last_moved+0x2>
    1254:	90 93 95 01 	sts	0x0195, r25	; 0x800195 <frog_last_moved+0x3>
			project_last_button_state = 0;
    1258:	10 92 91 01 	sts	0x0191, r1	; 0x800191 <project_last_button_state>
    125c:	5e c0       	rjmp	.+188    	; 0x131a <play_game+0x2b8>
		} else if(!paused && (button==0 || escape_sequence_char=='C' || serial_input=='R' || serial_input=='r')) {
    125e:	00 23       	and	r16, r16
    1260:	29 f0       	breq	.+10     	; 0x126c <play_game+0x20a>
    1262:	83 34       	cpi	r24, 0x43	; 67
    1264:	19 f0       	breq	.+6      	; 0x126c <play_game+0x20a>
    1266:	92 35       	cpi	r25, 0x52	; 82
    1268:	09 f0       	breq	.+2      	; 0x126c <play_game+0x20a>
    126a:	76 c1       	rjmp	.+748    	; 0x1558 <play_game+0x4f6>
			// Attempt to move right
			move_frog_to_right();
    126c:	0e 94 ff 04 	call	0x9fe	; 0x9fe <move_frog_to_right>
			frog_last_moved = get_current_time();
    1270:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <get_current_time>
    1274:	60 93 92 01 	sts	0x0192, r22	; 0x800192 <frog_last_moved>
    1278:	70 93 93 01 	sts	0x0193, r23	; 0x800193 <frog_last_moved+0x1>
    127c:	80 93 94 01 	sts	0x0194, r24	; 0x800194 <frog_last_moved+0x2>
    1280:	90 93 95 01 	sts	0x0195, r25	; 0x800195 <frog_last_moved+0x3>
			project_last_button_state = 0;
    1284:	10 92 91 01 	sts	0x0191, r1	; 0x800191 <project_last_button_state>
    1288:	48 c0       	rjmp	.+144    	; 0x131a <play_game+0x2b8>
    128a:	1b 82       	std	Y+3, r1	; 0x03
		} else if(serial_input == 'p' || serial_input == 'P') {
			pause_game();
    128c:	0e 94 fc 07 	call	0xff8	; 0xff8 <pause_game>
    1290:	44 c0       	rjmp	.+136    	; 0x131a <play_game+0x2b8>
		}  else if (!paused && ((get_current_time() - 300) >= frog_last_moved)) {
    1292:	81 11       	cpse	r24, r1
    1294:	41 c0       	rjmp	.+130    	; 0x1318 <play_game+0x2b6>
    1296:	1b 82       	std	Y+3, r1	; 0x03
    1298:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <get_current_time>
    129c:	dc 01       	movw	r26, r24
    129e:	cb 01       	movw	r24, r22
    12a0:	8c 52       	subi	r24, 0x2C	; 44
    12a2:	91 40       	sbci	r25, 0x01	; 1
    12a4:	a1 09       	sbc	r26, r1
    12a6:	b1 09       	sbc	r27, r1
    12a8:	00 91 92 01 	lds	r16, 0x0192	; 0x800192 <frog_last_moved>
    12ac:	10 91 93 01 	lds	r17, 0x0193	; 0x800193 <frog_last_moved+0x1>
    12b0:	20 91 94 01 	lds	r18, 0x0194	; 0x800194 <frog_last_moved+0x2>
    12b4:	30 91 95 01 	lds	r19, 0x0195	; 0x800195 <frog_last_moved+0x3>
    12b8:	80 17       	cp	r24, r16
    12ba:	91 07       	cpc	r25, r17
    12bc:	a2 07       	cpc	r26, r18
    12be:	b3 07       	cpc	r27, r19
    12c0:	60 f1       	brcs	.+88     	; 0x131a <play_game+0x2b8>

			if (project_last_button_state == possible_button_states[0]){
    12c2:	80 91 91 01 	lds	r24, 0x0191	; 0x800191 <project_last_button_state>
    12c6:	e3 e0       	ldi	r30, 0x03	; 3
    12c8:	f1 e0       	ldi	r31, 0x01	; 1
    12ca:	90 81       	ld	r25, Z
    12cc:	98 13       	cpse	r25, r24
    12ce:	03 c0       	rjmp	.+6      	; 0x12d6 <play_game+0x274>
				move_frog_to_right();	
    12d0:	0e 94 ff 04 	call	0x9fe	; 0x9fe <move_frog_to_right>
    12d4:	14 c0       	rjmp	.+40     	; 0x12fe <play_game+0x29c>
			} else if (project_last_button_state == possible_button_states[1]){
    12d6:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <possible_button_states+0x1>
    12da:	89 13       	cpse	r24, r25
    12dc:	03 c0       	rjmp	.+6      	; 0x12e4 <play_game+0x282>
				move_frog_backward();
    12de:	0e 94 91 04 	call	0x922	; 0x922 <move_frog_backward>
    12e2:	0d c0       	rjmp	.+26     	; 0x12fe <play_game+0x29c>
			} else if(project_last_button_state == possible_button_states[2]){
    12e4:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <possible_button_states+0x2>
    12e8:	89 13       	cpse	r24, r25
    12ea:	03 c0       	rjmp	.+6      	; 0x12f2 <play_game+0x290>
				move_frog_forward();
    12ec:	0e 94 4f 04 	call	0x89e	; 0x89e <move_frog_forward>
    12f0:	06 c0       	rjmp	.+12     	; 0x12fe <play_game+0x29c>
			} else if (project_last_button_state == possible_button_states[3]){
    12f2:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <possible_button_states+0x3>
    12f6:	89 13       	cpse	r24, r25
    12f8:	02 c0       	rjmp	.+4      	; 0x12fe <play_game+0x29c>
				move_frog_to_left();
    12fa:	0e 94 c8 04 	call	0x990	; 0x990 <move_frog_to_left>
			}
			frog_last_moved = get_current_time();
    12fe:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <get_current_time>
    1302:	60 93 92 01 	sts	0x0192, r22	; 0x800192 <frog_last_moved>
    1306:	70 93 93 01 	sts	0x0193, r23	; 0x800193 <frog_last_moved+0x1>
    130a:	80 93 94 01 	sts	0x0194, r24	; 0x800194 <frog_last_moved+0x2>
    130e:	90 93 95 01 	sts	0x0195, r25	; 0x800195 <frog_last_moved+0x3>
			project_last_button_state = 0;
    1312:	10 92 91 01 	sts	0x0191, r1	; 0x800191 <project_last_button_state>
    1316:	01 c0       	rjmp	.+2      	; 0x131a <play_game+0x2b8>
    1318:	1b 82       	std	Y+3, r1	; 0x03
		// We ignore both buttons
		}
		
			

		current_time = get_current_time();
    131a:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <get_current_time>
    131e:	6b 01       	movw	r12, r22
    1320:	7c 01       	movw	r14, r24
		if(!paused && !is_frog_dead() && !road2 && current_time - time_paused >= last_move_time + 750 - speed_up_by) {
    1322:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <paused>
    1326:	81 11       	cpse	r24, r1
    1328:	ba c0       	rjmp	.+372    	; 0x149e <play_game+0x43c>
    132a:	0e 94 28 04 	call	0x850	; 0x850 <is_frog_dead>
    132e:	81 11       	cpse	r24, r1
    1330:	28 c0       	rjmp	.+80     	; 0x1382 <play_game+0x320>
    1332:	f9 81       	ldd	r31, Y+1	; 0x01
    1334:	f1 11       	cpse	r31, r1
    1336:	25 c0       	rjmp	.+74     	; 0x1382 <play_game+0x320>
    1338:	80 91 6d 01 	lds	r24, 0x016D	; 0x80016d <time_paused>
    133c:	90 91 6e 01 	lds	r25, 0x016E	; 0x80016e <time_paused+0x1>
    1340:	a0 91 6f 01 	lds	r26, 0x016F	; 0x80016f <time_paused+0x2>
    1344:	b0 91 70 01 	lds	r27, 0x0170	; 0x800170 <time_paused+0x3>
    1348:	b7 01       	movw	r22, r14
    134a:	a6 01       	movw	r20, r12
    134c:	48 1b       	sub	r20, r24
    134e:	59 0b       	sbc	r21, r25
    1350:	6a 0b       	sbc	r22, r26
    1352:	7b 0b       	sbc	r23, r27
    1354:	d3 01       	movw	r26, r6
    1356:	c2 01       	movw	r24, r4
    1358:	82 51       	subi	r24, 0x12	; 18
    135a:	9d 4f       	sbci	r25, 0xFD	; 253
    135c:	af 4f       	sbci	r26, 0xFF	; 255
    135e:	bf 4f       	sbci	r27, 0xFF	; 255
    1360:	2c 81       	ldd	r18, Y+4	; 0x04
    1362:	3d 81       	ldd	r19, Y+5	; 0x05
    1364:	82 1b       	sub	r24, r18
    1366:	93 0b       	sbc	r25, r19
    1368:	a1 09       	sbc	r26, r1
    136a:	b1 09       	sbc	r27, r1
    136c:	48 17       	cp	r20, r24
    136e:	59 07       	cpc	r21, r25
    1370:	6a 07       	cpc	r22, r26
    1372:	7b 07       	cpc	r23, r27
    1374:	30 f0       	brcs	.+12     	; 0x1382 <play_game+0x320>
			// 1000ms (1 second) has passed since the last time we moved
			// the vehicles and logs - move them again and keep track of
			// the time when we did this. 
			scroll_vehicle_lane(2, 1);
    1376:	61 e0       	ldi	r22, 0x01	; 1
    1378:	82 e0       	ldi	r24, 0x02	; 2
    137a:	0e 94 0b 06 	call	0xc16	; 0xc16 <scroll_vehicle_lane>
			road2 = 1;
    137e:	31 e0       	ldi	r19, 0x01	; 1
    1380:	39 83       	std	Y+1, r19	; 0x01
		} 	
		if(!paused && !is_frog_dead() && !river0 && current_time - time_paused >= last_move_time + 850 - speed_up_by) {
    1382:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <paused>
    1386:	81 11       	cpse	r24, r1
    1388:	c3 c0       	rjmp	.+390    	; 0x1510 <play_game+0x4ae>
    138a:	0e 94 28 04 	call	0x850	; 0x850 <is_frog_dead>
    138e:	81 11       	cpse	r24, r1
    1390:	27 c0       	rjmp	.+78     	; 0x13e0 <play_game+0x37e>
    1392:	31 10       	cpse	r3, r1
    1394:	25 c0       	rjmp	.+74     	; 0x13e0 <play_game+0x37e>
    1396:	80 91 6d 01 	lds	r24, 0x016D	; 0x80016d <time_paused>
    139a:	90 91 6e 01 	lds	r25, 0x016E	; 0x80016e <time_paused+0x1>
    139e:	a0 91 6f 01 	lds	r26, 0x016F	; 0x80016f <time_paused+0x2>
    13a2:	b0 91 70 01 	lds	r27, 0x0170	; 0x800170 <time_paused+0x3>
    13a6:	b7 01       	movw	r22, r14
    13a8:	a6 01       	movw	r20, r12
    13aa:	48 1b       	sub	r20, r24
    13ac:	59 0b       	sbc	r21, r25
    13ae:	6a 0b       	sbc	r22, r26
    13b0:	7b 0b       	sbc	r23, r27
    13b2:	d3 01       	movw	r26, r6
    13b4:	c2 01       	movw	r24, r4
    13b6:	8e 5a       	subi	r24, 0xAE	; 174
    13b8:	9c 4f       	sbci	r25, 0xFC	; 252
    13ba:	af 4f       	sbci	r26, 0xFF	; 255
    13bc:	bf 4f       	sbci	r27, 0xFF	; 255
    13be:	ec 81       	ldd	r30, Y+4	; 0x04
    13c0:	fd 81       	ldd	r31, Y+5	; 0x05
    13c2:	8e 1b       	sub	r24, r30
    13c4:	9f 0b       	sbc	r25, r31
    13c6:	a1 09       	sbc	r26, r1
    13c8:	b1 09       	sbc	r27, r1
    13ca:	48 17       	cp	r20, r24
    13cc:	59 07       	cpc	r21, r25
    13ce:	6a 07       	cpc	r22, r26
    13d0:	7b 07       	cpc	r23, r27
    13d2:	30 f0       	brcs	.+12     	; 0x13e0 <play_game+0x37e>
			scroll_river_channel(0, -1);
    13d4:	6f ef       	ldi	r22, 0xFF	; 255
    13d6:	80 e0       	ldi	r24, 0x00	; 0
    13d8:	0e 94 47 06 	call	0xc8e	; 0xc8e <scroll_river_channel>
			river0 = 1;
    13dc:	33 24       	eor	r3, r3
    13de:	33 94       	inc	r3

		}
		if(!paused && !is_frog_dead() && !road0 && current_time - time_paused >= last_move_time + 1000 - speed_up_by) {
    13e0:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <paused>
    13e4:	81 11       	cpse	r24, r1
    13e6:	94 c0       	rjmp	.+296    	; 0x1510 <play_game+0x4ae>
    13e8:	0e 94 28 04 	call	0x850	; 0x850 <is_frog_dead>
    13ec:	81 11       	cpse	r24, r1
    13ee:	28 c0       	rjmp	.+80     	; 0x1440 <play_game+0x3de>
    13f0:	fa 81       	ldd	r31, Y+2	; 0x02
    13f2:	f1 11       	cpse	r31, r1
    13f4:	25 c0       	rjmp	.+74     	; 0x1440 <play_game+0x3de>
    13f6:	80 91 6d 01 	lds	r24, 0x016D	; 0x80016d <time_paused>
    13fa:	90 91 6e 01 	lds	r25, 0x016E	; 0x80016e <time_paused+0x1>
    13fe:	a0 91 6f 01 	lds	r26, 0x016F	; 0x80016f <time_paused+0x2>
    1402:	b0 91 70 01 	lds	r27, 0x0170	; 0x800170 <time_paused+0x3>
    1406:	b7 01       	movw	r22, r14
    1408:	a6 01       	movw	r20, r12
    140a:	48 1b       	sub	r20, r24
    140c:	59 0b       	sbc	r21, r25
    140e:	6a 0b       	sbc	r22, r26
    1410:	7b 0b       	sbc	r23, r27
    1412:	d3 01       	movw	r26, r6
    1414:	c2 01       	movw	r24, r4
    1416:	88 51       	subi	r24, 0x18	; 24
    1418:	9c 4f       	sbci	r25, 0xFC	; 252
    141a:	af 4f       	sbci	r26, 0xFF	; 255
    141c:	bf 4f       	sbci	r27, 0xFF	; 255
    141e:	2c 81       	ldd	r18, Y+4	; 0x04
    1420:	3d 81       	ldd	r19, Y+5	; 0x05
    1422:	82 1b       	sub	r24, r18
    1424:	93 0b       	sbc	r25, r19
    1426:	a1 09       	sbc	r26, r1
    1428:	b1 09       	sbc	r27, r1
    142a:	48 17       	cp	r20, r24
    142c:	59 07       	cpc	r21, r25
    142e:	6a 07       	cpc	r22, r26
    1430:	7b 07       	cpc	r23, r27
    1432:	30 f0       	brcs	.+12     	; 0x1440 <play_game+0x3de>
			scroll_vehicle_lane(0, 1);
    1434:	61 e0       	ldi	r22, 0x01	; 1
    1436:	80 e0       	ldi	r24, 0x00	; 0
    1438:	0e 94 0b 06 	call	0xc16	; 0xc16 <scroll_vehicle_lane>
			road0 = 1;
    143c:	31 e0       	ldi	r19, 0x01	; 1
    143e:	3a 83       	std	Y+2, r19	; 0x02
		}
		if(!paused && !is_frog_dead() && !river1 && current_time - time_paused >= last_move_time + 1200 - speed_up_by) {
    1440:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <paused>
    1444:	81 11       	cpse	r24, r1
    1446:	64 c0       	rjmp	.+200    	; 0x1510 <play_game+0x4ae>
    1448:	0e 94 28 04 	call	0x850	; 0x850 <is_frog_dead>
    144c:	81 11       	cpse	r24, r1
    144e:	27 c0       	rjmp	.+78     	; 0x149e <play_game+0x43c>
    1450:	21 10       	cpse	r2, r1
    1452:	25 c0       	rjmp	.+74     	; 0x149e <play_game+0x43c>
    1454:	80 91 6d 01 	lds	r24, 0x016D	; 0x80016d <time_paused>
    1458:	90 91 6e 01 	lds	r25, 0x016E	; 0x80016e <time_paused+0x1>
    145c:	a0 91 6f 01 	lds	r26, 0x016F	; 0x80016f <time_paused+0x2>
    1460:	b0 91 70 01 	lds	r27, 0x0170	; 0x800170 <time_paused+0x3>
    1464:	b7 01       	movw	r22, r14
    1466:	a6 01       	movw	r20, r12
    1468:	48 1b       	sub	r20, r24
    146a:	59 0b       	sbc	r21, r25
    146c:	6a 0b       	sbc	r22, r26
    146e:	7b 0b       	sbc	r23, r27
    1470:	d3 01       	movw	r26, r6
    1472:	c2 01       	movw	r24, r4
    1474:	80 55       	subi	r24, 0x50	; 80
    1476:	9b 4f       	sbci	r25, 0xFB	; 251
    1478:	af 4f       	sbci	r26, 0xFF	; 255
    147a:	bf 4f       	sbci	r27, 0xFF	; 255
    147c:	ec 81       	ldd	r30, Y+4	; 0x04
    147e:	fd 81       	ldd	r31, Y+5	; 0x05
    1480:	8e 1b       	sub	r24, r30
    1482:	9f 0b       	sbc	r25, r31
    1484:	a1 09       	sbc	r26, r1
    1486:	b1 09       	sbc	r27, r1
    1488:	48 17       	cp	r20, r24
    148a:	59 07       	cpc	r21, r25
    148c:	6a 07       	cpc	r22, r26
    148e:	7b 07       	cpc	r23, r27
    1490:	30 f0       	brcs	.+12     	; 0x149e <play_game+0x43c>
			scroll_river_channel(1, 1);
    1492:	61 e0       	ldi	r22, 0x01	; 1
    1494:	81 e0       	ldi	r24, 0x01	; 1
    1496:	0e 94 47 06 	call	0xc8e	; 0xc8e <scroll_river_channel>
			river1 = 1;
    149a:	22 24       	eor	r2, r2
    149c:	23 94       	inc	r2
		}
		if(!paused && !is_frog_dead() && !road1 && current_time - time_paused >= last_move_time + 1300 -speed_up_by) {
    149e:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <paused>
    14a2:	81 11       	cpse	r24, r1
    14a4:	35 c0       	rjmp	.+106    	; 0x1510 <play_game+0x4ae>
    14a6:	0e 94 28 04 	call	0x850	; 0x850 <is_frog_dead>
    14aa:	81 11       	cpse	r24, r1
    14ac:	31 c0       	rjmp	.+98     	; 0x1510 <play_game+0x4ae>
    14ae:	80 91 6d 01 	lds	r24, 0x016D	; 0x80016d <time_paused>
    14b2:	90 91 6e 01 	lds	r25, 0x016E	; 0x80016e <time_paused+0x1>
    14b6:	a0 91 6f 01 	lds	r26, 0x016F	; 0x80016f <time_paused+0x2>
    14ba:	b0 91 70 01 	lds	r27, 0x0170	; 0x800170 <time_paused+0x3>
    14be:	b7 01       	movw	r22, r14
    14c0:	a6 01       	movw	r20, r12
    14c2:	48 1b       	sub	r20, r24
    14c4:	59 0b       	sbc	r21, r25
    14c6:	6a 0b       	sbc	r22, r26
    14c8:	7b 0b       	sbc	r23, r27
    14ca:	d3 01       	movw	r26, r6
    14cc:	c2 01       	movw	r24, r4
    14ce:	8c 5e       	subi	r24, 0xEC	; 236
    14d0:	9a 4f       	sbci	r25, 0xFA	; 250
    14d2:	af 4f       	sbci	r26, 0xFF	; 255
    14d4:	bf 4f       	sbci	r27, 0xFF	; 255
    14d6:	2c 81       	ldd	r18, Y+4	; 0x04
    14d8:	3d 81       	ldd	r19, Y+5	; 0x05
    14da:	82 1b       	sub	r24, r18
    14dc:	93 0b       	sbc	r25, r19
    14de:	a1 09       	sbc	r26, r1
    14e0:	b1 09       	sbc	r27, r1
    14e2:	48 17       	cp	r20, r24
    14e4:	59 07       	cpc	r21, r25
    14e6:	6a 07       	cpc	r22, r26
    14e8:	7b 07       	cpc	r23, r27
    14ea:	90 f0       	brcs	.+36     	; 0x1510 <play_game+0x4ae>
			scroll_vehicle_lane(1, -1);
    14ec:	6f ef       	ldi	r22, 0xFF	; 255
    14ee:	81 e0       	ldi	r24, 0x01	; 1
    14f0:	0e 94 0b 06 	call	0xc16	; 0xc16 <scroll_vehicle_lane>
			last_move_time = current_time;
			road0 = road1 = road2 = river0 = river1 = 0;
			time_paused = 0;
    14f4:	10 92 6d 01 	sts	0x016D, r1	; 0x80016d <time_paused>
    14f8:	10 92 6e 01 	sts	0x016E, r1	; 0x80016e <time_paused+0x1>
    14fc:	10 92 6f 01 	sts	0x016F, r1	; 0x80016f <time_paused+0x2>
    1500:	10 92 70 01 	sts	0x0170, r1	; 0x800170 <time_paused+0x3>
			scroll_river_channel(1, 1);
			river1 = 1;
		}
		if(!paused && !is_frog_dead() && !road1 && current_time - time_paused >= last_move_time + 1300 -speed_up_by) {
			scroll_vehicle_lane(1, -1);
			last_move_time = current_time;
    1504:	26 01       	movw	r4, r12
    1506:	37 01       	movw	r6, r14
			road0 = road1 = road2 = river0 = river1 = 0;
    1508:	21 2c       	mov	r2, r1
    150a:	31 2c       	mov	r3, r1
    150c:	19 82       	std	Y+1, r1	; 0x01
    150e:	1a 82       	std	Y+2, r1	; 0x02
	current_time = get_current_time();
	last_move_time = current_time;
	
	// We play the game while the frog is alive and we haven't filled up the 
	// far riverbank
	while(!is_frog_dead()) {
    1510:	0e 94 28 04 	call	0x850	; 0x850 <is_frog_dead>
    1514:	88 23       	and	r24, r24
    1516:	09 f4       	brne	.+2      	; 0x151a <play_game+0x4b8>
    1518:	cd cd       	rjmp	.-1126   	; 0x10b4 <play_game+0x52>
    151a:	23 c0       	rjmp	.+70     	; 0x1562 <play_game+0x500>
					characters_into_escape_sequence = 0;
				}
			}
		}
		
		project_last_button_state = show_button_state();
    151c:	0e 94 a6 01 	call	0x34c	; 0x34c <show_button_state>
    1520:	80 93 91 01 	sts	0x0191, r24	; 0x800191 <project_last_button_state>
		// Process the input. 
		if(!paused && (button==3 || escape_sequence_char=='D' || serial_input=='L' || serial_input=='l')) {
    1524:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <paused>
    1528:	88 23       	and	r24, r24
    152a:	09 f4       	brne	.+2      	; 0x152e <play_game+0x4cc>
    152c:	49 ce       	rjmp	.-878    	; 0x11c0 <play_game+0x15e>
					characters_into_escape_sequence++;
					serial_input = -1; // Don't further process this character
				} else if(characters_into_escape_sequence == 2) {
					// Third (and last) character in the escape sequence
					escape_sequence_char = serial_input;
					serial_input = -1;  // Don't further process this character - we
    152e:	1f ef       	ldi	r17, 0xFF	; 255
    1530:	09 c0       	rjmp	.+18     	; 0x1544 <play_game+0x4e2>
					characters_into_escape_sequence = 0;
				}
			}
		}
		
		project_last_button_state = show_button_state();
    1532:	0e 94 a6 01 	call	0x34c	; 0x34c <show_button_state>
    1536:	80 93 91 01 	sts	0x0191, r24	; 0x800191 <project_last_button_state>
		// Process the input. 
		if(!paused && (button==3 || escape_sequence_char=='D' || serial_input=='L' || serial_input=='l')) {
    153a:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <paused>
    153e:	88 23       	and	r24, r24
    1540:	09 f4       	brne	.+2      	; 0x1544 <play_game+0x4e2>
    1542:	44 ce       	rjmp	.-888    	; 0x11cc <play_game+0x16a>
		} else if(!paused && (button==0 || escape_sequence_char=='C' || serial_input=='R' || serial_input=='r')) {
			// Attempt to move right
			move_frog_to_right();
			frog_last_moved = get_current_time();
			project_last_button_state = 0;
		} else if(serial_input == 'p' || serial_input == 'P') {
    1544:	1f 7d       	andi	r17, 0xDF	; 223
    1546:	10 35       	cpi	r17, 0x50	; 80
    1548:	09 f0       	breq	.+2      	; 0x154c <play_game+0x4ea>
    154a:	a3 ce       	rjmp	.-698    	; 0x1292 <play_game+0x230>
    154c:	9e ce       	rjmp	.-708    	; 0x128a <play_game+0x228>
    154e:	1f 7d       	andi	r17, 0xDF	; 223
    1550:	10 35       	cpi	r17, 0x50	; 80
    1552:	09 f0       	breq	.+2      	; 0x1556 <play_game+0x4f4>
    1554:	e2 ce       	rjmp	.-572    	; 0x131a <play_game+0x2b8>
    1556:	9a ce       	rjmp	.-716    	; 0x128c <play_game+0x22a>
    1558:	1f 7d       	andi	r17, 0xDF	; 223
    155a:	10 35       	cpi	r17, 0x50	; 80
    155c:	09 f0       	breq	.+2      	; 0x1560 <play_game+0x4fe>
    155e:	9c ce       	rjmp	.-712    	; 0x1298 <play_game+0x236>
    1560:	95 ce       	rjmp	.-726    	; 0x128c <play_game+0x22a>
			time_paused = 0;
		}
	}
	// We get here if the frog is dead.
	// The game is over.
}
    1562:	0f 90       	pop	r0
    1564:	0f 90       	pop	r0
    1566:	0f 90       	pop	r0
    1568:	0f 90       	pop	r0
    156a:	0f 90       	pop	r0
    156c:	df 91       	pop	r29
    156e:	cf 91       	pop	r28
    1570:	1f 91       	pop	r17
    1572:	0f 91       	pop	r16
    1574:	ff 90       	pop	r15
    1576:	ef 90       	pop	r14
    1578:	df 90       	pop	r13
    157a:	cf 90       	pop	r12
    157c:	bf 90       	pop	r11
    157e:	af 90       	pop	r10
    1580:	9f 90       	pop	r9
    1582:	8f 90       	pop	r8
    1584:	7f 90       	pop	r7
    1586:	6f 90       	pop	r6
    1588:	5f 90       	pop	r5
    158a:	4f 90       	pop	r4
    158c:	3f 90       	pop	r3
    158e:	2f 90       	pop	r2
    1590:	08 95       	ret

00001592 <main>:

/////////////////////////////// main //////////////////////////////////
int main(void) {
	// Setup hardware and call backs. This will turn on 
	// interrupts.
	initialise_hardware();
    1592:	0e 94 03 07 	call	0xe06	; 0xe06 <initialise_hardware>
	
	// Show the splash screen message. Returns when display
	// is complete
	splash_screen();
    1596:	0e 94 12 07 	call	0xe24	; 0xe24 <splash_screen>
	
	while(1) {
		new_game();
    159a:	0e 94 e7 07 	call	0xfce	; 0xfce <new_game>
		play_game();
    159e:	0e 94 31 08 	call	0x1062	; 0x1062 <play_game>
		handle_game_over();
    15a2:	0e 94 4b 07 	call	0xe96	; 0xe96 <handle_game_over>
    15a6:	f9 cf       	rjmp	.-14     	; 0x159a <main+0x8>

000015a8 <init_score>:
#include "score.h"

uint32_t score;

void init_score(void) {
	score = 0;
    15a8:	10 92 96 01 	sts	0x0196, r1	; 0x800196 <score>
    15ac:	10 92 97 01 	sts	0x0197, r1	; 0x800197 <score+0x1>
    15b0:	10 92 98 01 	sts	0x0198, r1	; 0x800198 <score+0x2>
    15b4:	10 92 99 01 	sts	0x0199, r1	; 0x800199 <score+0x3>
    15b8:	08 95       	ret

000015ba <add_to_score>:
}

void add_to_score(uint16_t value) {
	score += value;
    15ba:	40 91 96 01 	lds	r20, 0x0196	; 0x800196 <score>
    15be:	50 91 97 01 	lds	r21, 0x0197	; 0x800197 <score+0x1>
    15c2:	60 91 98 01 	lds	r22, 0x0198	; 0x800198 <score+0x2>
    15c6:	70 91 99 01 	lds	r23, 0x0199	; 0x800199 <score+0x3>
    15ca:	48 0f       	add	r20, r24
    15cc:	59 1f       	adc	r21, r25
    15ce:	61 1d       	adc	r22, r1
    15d0:	71 1d       	adc	r23, r1
    15d2:	40 93 96 01 	sts	0x0196, r20	; 0x800196 <score>
    15d6:	50 93 97 01 	sts	0x0197, r21	; 0x800197 <score+0x1>
    15da:	60 93 98 01 	sts	0x0198, r22	; 0x800198 <score+0x2>
    15de:	70 93 99 01 	sts	0x0199, r23	; 0x800199 <score+0x3>
    15e2:	08 95       	ret

000015e4 <get_score>:
}

uint32_t get_score(void) {
	return score;
    15e4:	60 91 96 01 	lds	r22, 0x0196	; 0x800196 <score>
    15e8:	70 91 97 01 	lds	r23, 0x0197	; 0x800197 <score+0x1>
    15ec:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <score+0x2>
    15f0:	90 91 99 01 	lds	r25, 0x0199	; 0x800199 <score+0x3>
}
    15f4:	08 95       	ret

000015f6 <set_scrolling_display_text>:
 * is called while the string is still being displayed.
 * We reset the pointers to ensure the next column to be displayed
 * comes from the first character of this string.
 */
void set_scrolling_display_text(char* string_to_display, PixelColour c) {
	colour = c;
    15f6:	60 93 07 01 	sts	0x0107, r22	; 0x800107 <colour>
	display_string = string_to_display;
    15fa:	90 93 75 01 	sts	0x0175, r25	; 0x800175 <display_string+0x1>
    15fe:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <display_string>
	next_col_ptr = 0;
    1602:	10 92 77 01 	sts	0x0177, r1	; 0x800177 <next_col_ptr+0x1>
    1606:	10 92 76 01 	sts	0x0176, r1	; 0x800176 <next_col_ptr>
	next_char_to_display = 0;
    160a:	10 92 73 01 	sts	0x0173, r1	; 0x800173 <next_char_to_display+0x1>
    160e:	10 92 72 01 	sts	0x0172, r1	; 0x800172 <next_char_to_display>
    1612:	08 95       	ret

00001614 <scroll_display>:
/*
 * Scroll the display. Should be called whenever the display
 * is to be scrolled. 
 * Returns 1 if still scrolling display.
 */
uint8_t scroll_display(void) {
    1614:	0f 93       	push	r16
    1616:	1f 93       	push	r17
    1618:	cf 93       	push	r28
    161a:	df 93       	push	r29
    161c:	cd b7       	in	r28, 0x3d	; 61
    161e:	de b7       	in	r29, 0x3e	; 62
    1620:	28 97       	sbiw	r28, 0x08	; 8
    1622:	0f b6       	in	r0, 0x3f	; 63
    1624:	f8 94       	cli
    1626:	de bf       	out	0x3e, r29	; 62
    1628:	0f be       	out	0x3f, r0	; 63
    162a:	cd bf       	out	0x3d, r28	; 61
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;

	if(next_col_ptr) {
    162c:	e0 91 76 01 	lds	r30, 0x0176	; 0x800176 <next_col_ptr>
    1630:	f0 91 77 01 	lds	r31, 0x0177	; 0x800177 <next_col_ptr+0x1>
    1634:	30 97       	sbiw	r30, 0x00	; 0
    1636:	81 f0       	breq	.+32     	; 0x1658 <scroll_display+0x44>
		/* We're currently outputting a character and next_col_ptr
		 * points to the display data for the next column. We
		 * extract that data from program memory.
		 */
		col_data = pgm_read_byte(next_col_ptr);
    1638:	14 91       	lpm	r17, Z

		if(col_data & 1) {
    163a:	10 ff       	sbrs	r17, 0
    163c:	06 c0       	rjmp	.+12     	; 0x164a <scroll_display+0x36>
			/* Least significant bit is set - this is the last
			 * column of this character
			 */
			next_col_ptr = 0;
    163e:	10 92 77 01 	sts	0x0177, r1	; 0x800177 <next_col_ptr+0x1>
    1642:	10 92 76 01 	sts	0x0176, r1	; 0x800176 <next_col_ptr>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
    1646:	00 e0       	ldi	r16, 0x00	; 0
    1648:	6b c0       	rjmp	.+214    	; 0x1720 <scroll_display+0x10c>
			next_col_ptr = 0;
		} else {
			/* This is not the last column of this character - make
			 * the pointer point to the data for the next column.
			 */
			next_col_ptr++;
    164a:	31 96       	adiw	r30, 0x01	; 1
    164c:	f0 93 77 01 	sts	0x0177, r31	; 0x800177 <next_col_ptr+0x1>
    1650:	e0 93 76 01 	sts	0x0176, r30	; 0x800176 <next_col_ptr>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
    1654:	00 e0       	ldi	r16, 0x00	; 0
    1656:	64 c0       	rjmp	.+200    	; 0x1720 <scroll_display+0x10c>
			/* This is not the last column of this character - make
			 * the pointer point to the data for the next column.
			 */
			next_col_ptr++;
		}
	} else if(next_char_to_display) {
    1658:	e0 91 72 01 	lds	r30, 0x0172	; 0x800172 <next_char_to_display>
    165c:	f0 91 73 01 	lds	r31, 0x0173	; 0x800173 <next_char_to_display+0x1>
    1660:	30 97       	sbiw	r30, 0x00	; 0
    1662:	09 f4       	brne	.+2      	; 0x1666 <scroll_display+0x52>
    1664:	49 c0       	rjmp	.+146    	; 0x16f8 <scroll_display+0xe4>
		 * the next character. We first get the next character to be 
		 * displayed and advance our next character pointer 
		 * (next_char_to_display) so that it points to the character 
		 * after.
		 */
		next_char = *(next_char_to_display++);
    1666:	cf 01       	movw	r24, r30
    1668:	01 96       	adiw	r24, 0x01	; 1
    166a:	90 93 73 01 	sts	0x0173, r25	; 0x800173 <next_char_to_display+0x1>
    166e:	80 93 72 01 	sts	0x0172, r24	; 0x800172 <next_char_to_display>
    1672:	e0 81       	ld	r30, Z
		if(next_char == 0) {
    1674:	e1 11       	cpse	r30, r1
    1676:	0a c0       	rjmp	.+20     	; 0x168c <scroll_display+0x78>
			/* We reached the null character at the end of the string.
			 * There is no next character, reset our pointer to 
			 * the next character and set our countdown until the 
			 * message disappears from the display.
			 */
			next_char_to_display = 0;
    1678:	10 92 73 01 	sts	0x0173, r1	; 0x800173 <next_char_to_display+0x1>
    167c:	10 92 72 01 	sts	0x0172, r1	; 0x800172 <next_char_to_display>
			shift_countdown = 16;
    1680:	80 e1       	ldi	r24, 0x10	; 16
    1682:	80 93 71 01 	sts	0x0171, r24	; 0x800171 <shift_countdown.1854>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
    1686:	00 e0       	ldi	r16, 0x00	; 0
	/* Data to be displayed in the next column - by 
	 * default we show a blank column. Bit 7 of this
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;
    1688:	10 e0       	ldi	r17, 0x00	; 0
    168a:	4a c0       	rjmp	.+148    	; 0x1720 <scroll_display+0x10c>
			 * the next character and set our countdown until the 
			 * message disappears from the display.
			 */
			next_char_to_display = 0;
			shift_countdown = 16;
		} else if (next_char >= 'a' && next_char <= 'z') {
    168c:	8f e9       	ldi	r24, 0x9F	; 159
    168e:	8e 0f       	add	r24, r30
    1690:	8a 31       	cpi	r24, 0x1A	; 26
    1692:	70 f4       	brcc	.+28     	; 0x16b0 <scroll_display+0x9c>
			/* Character is a lower case letter - the next column to 
			 * be displayed will be the first column of the letter
			 * data for that letter
			 */
			next_col_ptr = (const uint8_t*)pgm_read_word(&letters[next_char - 'a']);
    1694:	f0 e0       	ldi	r31, 0x00	; 0
    1696:	ee 0f       	add	r30, r30
    1698:	ff 1f       	adc	r31, r31
    169a:	ee 59       	subi	r30, 0x9E	; 158
    169c:	ff 4f       	sbci	r31, 0xFF	; 255
    169e:	85 91       	lpm	r24, Z+
    16a0:	94 91       	lpm	r25, Z
    16a2:	90 93 77 01 	sts	0x0177, r25	; 0x800177 <next_col_ptr+0x1>
    16a6:	80 93 76 01 	sts	0x0176, r24	; 0x800176 <next_col_ptr>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
    16aa:	00 e0       	ldi	r16, 0x00	; 0
	/* Data to be displayed in the next column - by 
	 * default we show a blank column. Bit 7 of this
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;
    16ac:	10 e0       	ldi	r17, 0x00	; 0
    16ae:	38 c0       	rjmp	.+112    	; 0x1720 <scroll_display+0x10c>
			/* Character is a lower case letter - the next column to 
			 * be displayed will be the first column of the letter
			 * data for that letter
			 */
			next_col_ptr = (const uint8_t*)pgm_read_word(&letters[next_char - 'a']);
		} else if (next_char >= 'A' && next_char <= 'Z') {
    16b0:	8f eb       	ldi	r24, 0xBF	; 191
    16b2:	8e 0f       	add	r24, r30
    16b4:	8a 31       	cpi	r24, 0x1A	; 26
    16b6:	70 f4       	brcc	.+28     	; 0x16d4 <scroll_display+0xc0>
			/* Upper case character */
			next_col_ptr = (const uint8_t*)pgm_read_word(&letters[next_char - 'A']);
    16b8:	f0 e0       	ldi	r31, 0x00	; 0
    16ba:	ee 0f       	add	r30, r30
    16bc:	ff 1f       	adc	r31, r31
    16be:	ee 55       	subi	r30, 0x5E	; 94
    16c0:	ff 4f       	sbci	r31, 0xFF	; 255
    16c2:	85 91       	lpm	r24, Z+
    16c4:	94 91       	lpm	r25, Z
    16c6:	90 93 77 01 	sts	0x0177, r25	; 0x800177 <next_col_ptr+0x1>
    16ca:	80 93 76 01 	sts	0x0176, r24	; 0x800176 <next_col_ptr>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
    16ce:	00 e0       	ldi	r16, 0x00	; 0
	/* Data to be displayed in the next column - by 
	 * default we show a blank column. Bit 7 of this
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;
    16d0:	10 e0       	ldi	r17, 0x00	; 0
    16d2:	26 c0       	rjmp	.+76     	; 0x1720 <scroll_display+0x10c>
			 */
			next_col_ptr = (const uint8_t*)pgm_read_word(&letters[next_char - 'a']);
		} else if (next_char >= 'A' && next_char <= 'Z') {
			/* Upper case character */
			next_col_ptr = (const uint8_t*)pgm_read_word(&letters[next_char - 'A']);
		} else if (next_char >= '0' && next_char <= '9') {
    16d4:	80 ed       	ldi	r24, 0xD0	; 208
    16d6:	8e 0f       	add	r24, r30
    16d8:	8a 30       	cpi	r24, 0x0A	; 10
    16da:	00 f5       	brcc	.+64     	; 0x171c <scroll_display+0x108>
			/* Digit */
			next_col_ptr = (const uint8_t*)pgm_read_word(&numbers[next_char - '0']);
    16dc:	f0 e0       	ldi	r31, 0x00	; 0
    16de:	ee 0f       	add	r30, r30
    16e0:	ff 1f       	adc	r31, r31
    16e2:	e0 55       	subi	r30, 0x50	; 80
    16e4:	ff 4f       	sbci	r31, 0xFF	; 255
    16e6:	85 91       	lpm	r24, Z+
    16e8:	94 91       	lpm	r25, Z
    16ea:	90 93 77 01 	sts	0x0177, r25	; 0x800177 <next_col_ptr+0x1>
    16ee:	80 93 76 01 	sts	0x0176, r24	; 0x800176 <next_col_ptr>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
    16f2:	00 e0       	ldi	r16, 0x00	; 0
	/* Data to be displayed in the next column - by 
	 * default we show a blank column. Bit 7 of this
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;
    16f4:	10 e0       	ldi	r17, 0x00	; 0
    16f6:	14 c0       	rjmp	.+40     	; 0x1720 <scroll_display+0x10c>
	} else {
		/* We're not outputting a column of dots and there is 
		 * no next character. Move on to the string that we
		 * have stored (if any).
		 */
		if(!display_string) {
    16f8:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <display_string>
    16fc:	90 91 75 01 	lds	r25, 0x0175	; 0x800175 <display_string+0x1>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
    1700:	01 e0       	ldi	r16, 0x01	; 1
    1702:	00 97       	sbiw	r24, 0x00	; 0
    1704:	09 f0       	breq	.+2      	; 0x1708 <scroll_display+0xf4>
    1706:	00 e0       	ldi	r16, 0x00	; 0
			/* May be finished - flag this and adjust below if we're still
			 * showing pixels
			 */
			finished = 1;
		}
		next_char_to_display = display_string;
    1708:	90 93 73 01 	sts	0x0173, r25	; 0x800173 <next_char_to_display+0x1>
    170c:	80 93 72 01 	sts	0x0172, r24	; 0x800172 <next_char_to_display>
		display_string = 0;
    1710:	10 92 75 01 	sts	0x0175, r1	; 0x800175 <display_string+0x1>
    1714:	10 92 74 01 	sts	0x0174, r1	; 0x800174 <display_string>
	/* Data to be displayed in the next column - by 
	 * default we show a blank column. Bit 7 of this
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;
    1718:	10 e0       	ldi	r17, 0x00	; 0
    171a:	02 c0       	rjmp	.+4      	; 0x1720 <scroll_display+0x10c>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
    171c:	00 e0       	ldi	r16, 0x00	; 0
	/* Data to be displayed in the next column - by 
	 * default we show a blank column. Bit 7 of this
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;
    171e:	10 e0       	ldi	r17, 0x00	; 0
	/* Shift the current display one pixel to the left and insert the 
	 * new column data at column 15.
	 * Adjust our "finished" variable if we've finished scrolling the
	 * message off the display
	 */
	ledmatrix_shift_display_left();
    1720:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <ledmatrix_shift_display_left>
	MatrixColumn column_colour_data;
	for(i=7; i>=1; i--) {
		// If the relevant font bit is set, we make this a red pixel, otherwise blank
		if(col_data & 0x80) {
			column_colour_data[i] = colour;
    1724:	20 91 07 01 	lds	r18, 0x0107	; 0x800107 <colour>
    1728:	fe 01       	movw	r30, r28
    172a:	38 96       	adiw	r30, 0x08	; 8
    172c:	ce 01       	movw	r24, r28
    172e:	01 96       	adiw	r24, 0x01	; 1
	 */
	ledmatrix_shift_display_left();
	MatrixColumn column_colour_data;
	for(i=7; i>=1; i--) {
		// If the relevant font bit is set, we make this a red pixel, otherwise blank
		if(col_data & 0x80) {
    1730:	11 23       	and	r17, r17
    1732:	14 f4       	brge	.+4      	; 0x1738 <scroll_display+0x124>
			column_colour_data[i] = colour;
    1734:	20 83       	st	Z, r18
    1736:	01 c0       	rjmp	.+2      	; 0x173a <scroll_display+0x126>
		} else {
			column_colour_data[i] = 0;
    1738:	10 82       	st	Z, r1
		}
		col_data <<= 1;
    173a:	11 0f       	add	r17, r17
    173c:	31 97       	sbiw	r30, 0x01	; 1
	 * Adjust our "finished" variable if we've finished scrolling the
	 * message off the display
	 */
	ledmatrix_shift_display_left();
	MatrixColumn column_colour_data;
	for(i=7; i>=1; i--) {
    173e:	e8 17       	cp	r30, r24
    1740:	f9 07       	cpc	r31, r25
    1742:	b1 f7       	brne	.-20     	; 0x1730 <scroll_display+0x11c>
		} else {
			column_colour_data[i] = 0;
		}
		col_data <<= 1;
	}
	column_colour_data[0] = 0;
    1744:	19 82       	std	Y+1, r1	; 0x01
	ledmatrix_update_column(15, column_colour_data);
    1746:	be 01       	movw	r22, r28
    1748:	6f 5f       	subi	r22, 0xFF	; 255
    174a:	7f 4f       	sbci	r23, 0xFF	; 255
    174c:	8f e0       	ldi	r24, 0x0F	; 15
    174e:	0e 94 db 06 	call	0xdb6	; 0xdb6 <ledmatrix_update_column>
	if(shift_countdown > 0) {
    1752:	80 91 71 01 	lds	r24, 0x0171	; 0x800171 <shift_countdown.1854>
    1756:	88 23       	and	r24, r24
    1758:	89 f0       	breq	.+34     	; 0x177c <scroll_display+0x168>
		shift_countdown--;
    175a:	81 50       	subi	r24, 0x01	; 1
    175c:	80 93 71 01 	sts	0x0171, r24	; 0x800171 <shift_countdown.1854>
	}
	finished = finished && (shift_countdown == 0);
    1760:	00 23       	and	r16, r16
    1762:	11 f0       	breq	.+4      	; 0x1768 <scroll_display+0x154>
    1764:	88 23       	and	r24, r24
    1766:	11 f0       	breq	.+4      	; 0x176c <scroll_display+0x158>
    1768:	90 e0       	ldi	r25, 0x00	; 0
    176a:	03 c0       	rjmp	.+6      	; 0x1772 <scroll_display+0x15e>
    176c:	91 e0       	ldi	r25, 0x01	; 1
    176e:	01 c0       	rjmp	.+2      	; 0x1772 <scroll_display+0x15e>
    1770:	91 e0       	ldi	r25, 0x01	; 1
	return !finished;
    1772:	81 e0       	ldi	r24, 0x01	; 1
    1774:	99 23       	and	r25, r25
    1776:	29 f0       	breq	.+10     	; 0x1782 <scroll_display+0x16e>
    1778:	80 e0       	ldi	r24, 0x00	; 0
    177a:	03 c0       	rjmp	.+6      	; 0x1782 <scroll_display+0x16e>
	column_colour_data[0] = 0;
	ledmatrix_update_column(15, column_colour_data);
	if(shift_countdown > 0) {
		shift_countdown--;
	}
	finished = finished && (shift_countdown == 0);
    177c:	00 23       	and	r16, r16
    177e:	a1 f3       	breq	.-24     	; 0x1768 <scroll_display+0x154>
    1780:	f7 cf       	rjmp	.-18     	; 0x1770 <scroll_display+0x15c>
	return !finished;
}
    1782:	28 96       	adiw	r28, 0x08	; 8
    1784:	0f b6       	in	r0, 0x3f	; 63
    1786:	f8 94       	cli
    1788:	de bf       	out	0x3e, r29	; 62
    178a:	0f be       	out	0x3f, r0	; 63
    178c:	cd bf       	out	0x3d, r28	; 61
    178e:	df 91       	pop	r29
    1790:	cf 91       	pop	r28
    1792:	1f 91       	pop	r17
    1794:	0f 91       	pop	r16
    1796:	08 95       	ret

00001798 <uart_put_char>:
	/* Just adjust our buffer data so it looks empty */
	input_insert_pos = 0;
	bytes_in_input_buffer = 0;
}

static int uart_put_char(char c, FILE* stream) {
    1798:	cf 93       	push	r28
    179a:	c8 2f       	mov	r28, r24
	/* Add the character to the buffer for transmission (if there 
	 * is space to do so). If not we wait until the buffer has space.
	 * If the character is \n, we output \r (carriage return)
	 * also.
	*/
	if(c == '\n') {
    179c:	8a 30       	cpi	r24, 0x0A	; 10
    179e:	19 f4       	brne	.+6      	; 0x17a6 <uart_put_char+0xe>
		uart_put_char('\r', stream);
    17a0:	8d e0       	ldi	r24, 0x0D	; 13
    17a2:	0e 94 cc 0b 	call	0x1798	; 0x1798 <uart_put_char>
	 * never be emptied if interrupts are disabled. If the buffer is full
	 * and interrupts are enabled then we loop until the buffer has 
	 * enough space. The bytes_in_buffer variable will get modified by the
	 * ISR which extracts bytes from the buffer.
	*/
	interrupts_enabled = bit_is_set(SREG, SREG_I);
    17a6:	9f b7       	in	r25, 0x3f	; 63
    17a8:	90 78       	andi	r25, 0x80	; 128
	while(bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE) {
    17aa:	02 c0       	rjmp	.+4      	; 0x17b0 <uart_put_char+0x18>
		if(!interrupts_enabled) {
    17ac:	99 23       	and	r25, r25
    17ae:	29 f1       	breq	.+74     	; 0x17fa <uart_put_char+0x62>
	 * and interrupts are enabled then we loop until the buffer has 
	 * enough space. The bytes_in_buffer variable will get modified by the
	 * ISR which extracts bytes from the buffer.
	*/
	interrupts_enabled = bit_is_set(SREG, SREG_I);
	while(bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE) {
    17b0:	80 91 9b 01 	lds	r24, 0x019B	; 0x80019b <bytes_in_out_buffer>
    17b4:	8f 3f       	cpi	r24, 0xFF	; 255
    17b6:	d1 f3       	breq	.-12     	; 0x17ac <uart_put_char+0x14>
	 * NOTE: we disable interrupts before modifying the buffer. This
	 * prevents the ISR from modifying the buffer at the same time.
	 * We reenable them if they were enabled when we entered the
	 * function.
	*/	
	cli();
    17b8:	f8 94       	cli
	out_buffer[out_insert_pos++] = c;
    17ba:	e0 91 9a 01 	lds	r30, 0x019A	; 0x80019a <out_insert_pos>
    17be:	81 e0       	ldi	r24, 0x01	; 1
    17c0:	8e 0f       	add	r24, r30
    17c2:	80 93 9a 01 	sts	0x019A, r24	; 0x80019a <out_insert_pos>
    17c6:	f0 e0       	ldi	r31, 0x00	; 0
    17c8:	e4 56       	subi	r30, 0x64	; 100
    17ca:	fe 4f       	sbci	r31, 0xFE	; 254
    17cc:	c0 83       	st	Z, r28
	bytes_in_out_buffer++;
    17ce:	80 91 9b 01 	lds	r24, 0x019B	; 0x80019b <bytes_in_out_buffer>
    17d2:	8f 5f       	subi	r24, 0xFF	; 255
    17d4:	80 93 9b 01 	sts	0x019B, r24	; 0x80019b <bytes_in_out_buffer>
	if(out_insert_pos == OUTPUT_BUFFER_SIZE) {
    17d8:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <out_insert_pos>
    17dc:	8f 3f       	cpi	r24, 0xFF	; 255
    17de:	11 f4       	brne	.+4      	; 0x17e4 <uart_put_char+0x4c>
		/* Wrap around buffer pointer if necessary */
		out_insert_pos = 0;
    17e0:	10 92 9a 01 	sts	0x019A, r1	; 0x80019a <out_insert_pos>
	}
	/* Reenable interrupts (UDR Empty interrupt may have been
	 * disabled) - we ensure it is now enabled so that it will
	 * fire and deal with the next character in the buffer. */
	UCSR0B |= (1 << UDRIE0);
    17e4:	e1 ec       	ldi	r30, 0xC1	; 193
    17e6:	f0 e0       	ldi	r31, 0x00	; 0
    17e8:	80 81       	ld	r24, Z
    17ea:	80 62       	ori	r24, 0x20	; 32
    17ec:	80 83       	st	Z, r24
	if(interrupts_enabled) {
    17ee:	99 23       	and	r25, r25
    17f0:	39 f0       	breq	.+14     	; 0x1800 <uart_put_char+0x68>
		sei();
    17f2:	78 94       	sei
	}
	return 0;
    17f4:	80 e0       	ldi	r24, 0x00	; 0
    17f6:	90 e0       	ldi	r25, 0x00	; 0
    17f8:	05 c0       	rjmp	.+10     	; 0x1804 <uart_put_char+0x6c>
	 * ISR which extracts bytes from the buffer.
	*/
	interrupts_enabled = bit_is_set(SREG, SREG_I);
	while(bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE) {
		if(!interrupts_enabled) {
			return 1;
    17fa:	81 e0       	ldi	r24, 0x01	; 1
    17fc:	90 e0       	ldi	r25, 0x00	; 0
    17fe:	02 c0       	rjmp	.+4      	; 0x1804 <uart_put_char+0x6c>
	 * fire and deal with the next character in the buffer. */
	UCSR0B |= (1 << UDRIE0);
	if(interrupts_enabled) {
		sei();
	}
	return 0;
    1800:	80 e0       	ldi	r24, 0x00	; 0
    1802:	90 e0       	ldi	r25, 0x00	; 0
}
    1804:	cf 91       	pop	r28
    1806:	08 95       	ret

00001808 <uart_get_char>:

int uart_get_char(FILE* stream) {
	/* Wait until we've received a character */
	while(bytes_in_input_buffer == 0) {
    1808:	80 91 ad 02 	lds	r24, 0x02AD	; 0x8002ad <bytes_in_input_buffer>
    180c:	88 23       	and	r24, r24
    180e:	e1 f3       	breq	.-8      	; 0x1808 <uart_get_char>
	 * buffer. We reenable interrupts if they were on.
	 * The pending character is the one which is byte_in_input_buffer
	 * characters before the insert position (taking into account
	 * that we may need to wrap around).
	 */
	uint8_t interrupts_enabled = bit_is_set(SREG, SREG_I);
    1810:	2f b7       	in	r18, 0x3f	; 63
    1812:	20 78       	andi	r18, 0x80	; 128
	cli();
    1814:	f8 94       	cli
	char c;
	if(input_insert_pos - bytes_in_input_buffer < 0) {
    1816:	80 91 9b 02 	lds	r24, 0x029B	; 0x80029b <input_insert_pos>
    181a:	30 91 ad 02 	lds	r19, 0x02AD	; 0x8002ad <bytes_in_input_buffer>
    181e:	90 e0       	ldi	r25, 0x00	; 0
    1820:	83 1b       	sub	r24, r19
    1822:	91 09       	sbc	r25, r1
    1824:	5a f4       	brpl	.+22     	; 0x183c <uart_get_char+0x34>
		/* Need to wrap around */
		c = input_buffer[input_insert_pos - bytes_in_input_buffer
    1826:	e0 91 9b 02 	lds	r30, 0x029B	; 0x80029b <input_insert_pos>
    182a:	80 91 ad 02 	lds	r24, 0x02AD	; 0x8002ad <bytes_in_input_buffer>
				+ INPUT_BUFFER_SIZE];
    182e:	f0 e0       	ldi	r31, 0x00	; 0
    1830:	e8 1b       	sub	r30, r24
    1832:	f1 09       	sbc	r31, r1
	uint8_t interrupts_enabled = bit_is_set(SREG, SREG_I);
	cli();
	char c;
	if(input_insert_pos - bytes_in_input_buffer < 0) {
		/* Need to wrap around */
		c = input_buffer[input_insert_pos - bytes_in_input_buffer
    1834:	e4 55       	subi	r30, 0x54	; 84
    1836:	fd 4f       	sbci	r31, 0xFD	; 253
    1838:	80 81       	ld	r24, Z
    183a:	0a c0       	rjmp	.+20     	; 0x1850 <uart_get_char+0x48>
				+ INPUT_BUFFER_SIZE];
	} else {
		c = input_buffer[input_insert_pos - bytes_in_input_buffer];
    183c:	e0 91 9b 02 	lds	r30, 0x029B	; 0x80029b <input_insert_pos>
    1840:	80 91 ad 02 	lds	r24, 0x02AD	; 0x8002ad <bytes_in_input_buffer>
    1844:	f0 e0       	ldi	r31, 0x00	; 0
    1846:	e8 1b       	sub	r30, r24
    1848:	f1 09       	sbc	r31, r1
    184a:	e4 56       	subi	r30, 0x64	; 100
    184c:	fd 4f       	sbci	r31, 0xFD	; 253
    184e:	80 81       	ld	r24, Z
	}
	
	/* Decrement our count of bytes in the input buffer */
	bytes_in_input_buffer--;
    1850:	90 91 ad 02 	lds	r25, 0x02AD	; 0x8002ad <bytes_in_input_buffer>
    1854:	91 50       	subi	r25, 0x01	; 1
    1856:	90 93 ad 02 	sts	0x02AD, r25	; 0x8002ad <bytes_in_input_buffer>
	if(interrupts_enabled) {
    185a:	22 23       	and	r18, r18
    185c:	09 f0       	breq	.+2      	; 0x1860 <uart_get_char+0x58>
		sei();
    185e:	78 94       	sei
	}	
	return c;
}
    1860:	90 e0       	ldi	r25, 0x00	; 0
    1862:	08 95       	ret

00001864 <init_serial_stdio>:
void init_serial_stdio(long baudrate, int8_t echo) {
	uint16_t ubrr;
	/*
	 * Initialise our buffers
	*/
	out_insert_pos = 0;
    1864:	10 92 9a 01 	sts	0x019A, r1	; 0x80019a <out_insert_pos>
	bytes_in_out_buffer = 0;
    1868:	10 92 9b 01 	sts	0x019B, r1	; 0x80019b <bytes_in_out_buffer>
	input_insert_pos = 0;
    186c:	10 92 9b 02 	sts	0x029B, r1	; 0x80029b <input_insert_pos>
	bytes_in_input_buffer = 0;
    1870:	10 92 ad 02 	sts	0x02AD, r1	; 0x8002ad <bytes_in_input_buffer>
	input_overrun = 0;
    1874:	10 92 ac 02 	sts	0x02AC, r1	; 0x8002ac <input_overrun>
	
	/*
	 * Record whether we're going to echo characters or not
	*/
	do_echo = echo;
    1878:	40 93 78 01 	sts	0x0178, r20	; 0x800178 <do_echo>
	/* Configure the serial port baud rate */
	/* (This differs from the datasheet formula so that we get 
	 * rounding to the nearest integer while using integer division
	 * (which truncates)).
	*/
	ubrr = ((SYSCLK / (8 * baudrate)) + 1)/2 - 1;
    187c:	dc 01       	movw	r26, r24
    187e:	cb 01       	movw	r24, r22
    1880:	88 0f       	add	r24, r24
    1882:	99 1f       	adc	r25, r25
    1884:	aa 1f       	adc	r26, r26
    1886:	bb 1f       	adc	r27, r27
    1888:	88 0f       	add	r24, r24
    188a:	99 1f       	adc	r25, r25
    188c:	aa 1f       	adc	r26, r26
    188e:	bb 1f       	adc	r27, r27
    1890:	9c 01       	movw	r18, r24
    1892:	ad 01       	movw	r20, r26
    1894:	22 0f       	add	r18, r18
    1896:	33 1f       	adc	r19, r19
    1898:	44 1f       	adc	r20, r20
    189a:	55 1f       	adc	r21, r21
    189c:	60 e0       	ldi	r22, 0x00	; 0
    189e:	72 e1       	ldi	r23, 0x12	; 18
    18a0:	8a e7       	ldi	r24, 0x7A	; 122
    18a2:	90 e0       	ldi	r25, 0x00	; 0
    18a4:	0e 94 53 0f 	call	0x1ea6	; 0x1ea6 <__divmodsi4>
    18a8:	ba 01       	movw	r22, r20
    18aa:	a9 01       	movw	r20, r18
    18ac:	4f 5f       	subi	r20, 0xFF	; 255
    18ae:	5f 4f       	sbci	r21, 0xFF	; 255
    18b0:	6f 4f       	sbci	r22, 0xFF	; 255
    18b2:	7f 4f       	sbci	r23, 0xFF	; 255
    18b4:	db 01       	movw	r26, r22
    18b6:	ca 01       	movw	r24, r20
    18b8:	1a f4       	brpl	.+6      	; 0x18c0 <init_serial_stdio+0x5c>
    18ba:	01 96       	adiw	r24, 0x01	; 1
    18bc:	a1 1d       	adc	r26, r1
    18be:	b1 1d       	adc	r27, r1
    18c0:	b5 95       	asr	r27
    18c2:	a7 95       	ror	r26
    18c4:	97 95       	ror	r25
    18c6:	87 95       	ror	r24
    18c8:	01 97       	sbiw	r24, 0x01	; 1
	UBRR0 = ubrr;
    18ca:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    18ce:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	 * the UDR empty interrupt here (we wait until we've got a
	 * character to transmit).
	 * NOTE: Interrupts must be enabled globally for this
	 * library to work, but we do not do this here.
	*/
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
    18d2:	e1 ec       	ldi	r30, 0xC1	; 193
    18d4:	f0 e0       	ldi	r31, 0x00	; 0
    18d6:	88 e1       	ldi	r24, 0x18	; 24
    18d8:	80 83       	st	Z, r24
	
	/*
	 * Enable receive complete interrupt 
	*/
	UCSR0B  |= (1 <<RXCIE0);
    18da:	80 81       	ld	r24, Z
    18dc:	80 68       	ori	r24, 0x80	; 128
    18de:	80 83       	st	Z, r24

	/* Set up our stream so the put and get functions below are used 
	 * to write/read characters via the serial port when we use
	 * stdio functions
	*/
	stdout = &myStream;
    18e0:	ee ea       	ldi	r30, 0xAE	; 174
    18e2:	f2 e0       	ldi	r31, 0x02	; 2
    18e4:	88 e0       	ldi	r24, 0x08	; 8
    18e6:	91 e0       	ldi	r25, 0x01	; 1
    18e8:	93 83       	std	Z+3, r25	; 0x03
    18ea:	82 83       	std	Z+2, r24	; 0x02
	stdin = &myStream;
    18ec:	91 83       	std	Z+1, r25	; 0x01
    18ee:	80 83       	st	Z, r24
    18f0:	08 95       	ret

000018f2 <serial_input_available>:
}

int8_t serial_input_available(void) {
	return (bytes_in_input_buffer != 0);
    18f2:	90 91 ad 02 	lds	r25, 0x02AD	; 0x8002ad <bytes_in_input_buffer>
    18f6:	81 e0       	ldi	r24, 0x01	; 1
    18f8:	91 11       	cpse	r25, r1
    18fa:	01 c0       	rjmp	.+2      	; 0x18fe <serial_input_available+0xc>
    18fc:	80 e0       	ldi	r24, 0x00	; 0
}
    18fe:	08 95       	ret

00001900 <clear_serial_input_buffer>:

void clear_serial_input_buffer(void) {
	/* Just adjust our buffer data so it looks empty */
	input_insert_pos = 0;
    1900:	10 92 9b 02 	sts	0x029B, r1	; 0x80029b <input_insert_pos>
	bytes_in_input_buffer = 0;
    1904:	10 92 ad 02 	sts	0x02AD, r1	; 0x8002ad <bytes_in_input_buffer>
    1908:	08 95       	ret

0000190a <__vector_21>:
/*
 * Define the interrupt handler for UART Data Register Empty (i.e. 
 * another character can be taken from our buffer and written out)
 */
ISR(USART0_UDRE_vect) 
{
    190a:	1f 92       	push	r1
    190c:	0f 92       	push	r0
    190e:	0f b6       	in	r0, 0x3f	; 63
    1910:	0f 92       	push	r0
    1912:	11 24       	eor	r1, r1
    1914:	2f 93       	push	r18
    1916:	8f 93       	push	r24
    1918:	9f 93       	push	r25
    191a:	ef 93       	push	r30
    191c:	ff 93       	push	r31
	/* Check if we have data in our buffer */
	if(bytes_in_out_buffer > 0) {
    191e:	80 91 9b 01 	lds	r24, 0x019B	; 0x80019b <bytes_in_out_buffer>
    1922:	88 23       	and	r24, r24
    1924:	29 f1       	breq	.+74     	; 0x1970 <__vector_21+0x66>
		 * one which is "bytes_in_buffer" characters before the 
		 * insert_pos (taking into account that we may 
		 * need to wrap around to the end of the buffer).
		 */
		char c;
		if(out_insert_pos - bytes_in_out_buffer < 0) {
    1926:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <out_insert_pos>
    192a:	20 91 9b 01 	lds	r18, 0x019B	; 0x80019b <bytes_in_out_buffer>
    192e:	90 e0       	ldi	r25, 0x00	; 0
    1930:	82 1b       	sub	r24, r18
    1932:	91 09       	sbc	r25, r1
    1934:	5a f4       	brpl	.+22     	; 0x194c <__vector_21+0x42>
			/* Need to wrap around */
			c = out_buffer[out_insert_pos - bytes_in_out_buffer
    1936:	e0 91 9a 01 	lds	r30, 0x019A	; 0x80019a <out_insert_pos>
    193a:	80 91 9b 01 	lds	r24, 0x019B	; 0x80019b <bytes_in_out_buffer>
				+ OUTPUT_BUFFER_SIZE];
    193e:	f0 e0       	ldi	r31, 0x00	; 0
    1940:	e8 1b       	sub	r30, r24
    1942:	f1 09       	sbc	r31, r1
		 * need to wrap around to the end of the buffer).
		 */
		char c;
		if(out_insert_pos - bytes_in_out_buffer < 0) {
			/* Need to wrap around */
			c = out_buffer[out_insert_pos - bytes_in_out_buffer
    1944:	e5 56       	subi	r30, 0x65	; 101
    1946:	fd 4f       	sbci	r31, 0xFD	; 253
    1948:	90 81       	ld	r25, Z
    194a:	0a c0       	rjmp	.+20     	; 0x1960 <__vector_21+0x56>
				+ OUTPUT_BUFFER_SIZE];
		} else {
			c = out_buffer[out_insert_pos - bytes_in_out_buffer];
    194c:	e0 91 9a 01 	lds	r30, 0x019A	; 0x80019a <out_insert_pos>
    1950:	80 91 9b 01 	lds	r24, 0x019B	; 0x80019b <bytes_in_out_buffer>
    1954:	f0 e0       	ldi	r31, 0x00	; 0
    1956:	e8 1b       	sub	r30, r24
    1958:	f1 09       	sbc	r31, r1
    195a:	e4 56       	subi	r30, 0x64	; 100
    195c:	fe 4f       	sbci	r31, 0xFE	; 254
    195e:	90 81       	ld	r25, Z
		}
		/* Decrement our count of the number of bytes in the 
		 * buffer 
		 */
		bytes_in_out_buffer--;
    1960:	80 91 9b 01 	lds	r24, 0x019B	; 0x80019b <bytes_in_out_buffer>
    1964:	81 50       	subi	r24, 0x01	; 1
    1966:	80 93 9b 01 	sts	0x019B, r24	; 0x80019b <bytes_in_out_buffer>
		
		/* Output the character via the UART */
		UDR0 = c;
    196a:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    196e:	05 c0       	rjmp	.+10     	; 0x197a <__vector_21+0x70>
		 * Register Empty interrupt because otherwise it 
		 * will trigger again immediately this ISR exits. 
		 * The interrupt is reenabled when a character is
		 * placed in the buffer.
		 */
		UCSR0B &= ~(1<<UDRIE0);
    1970:	e1 ec       	ldi	r30, 0xC1	; 193
    1972:	f0 e0       	ldi	r31, 0x00	; 0
    1974:	80 81       	ld	r24, Z
    1976:	8f 7d       	andi	r24, 0xDF	; 223
    1978:	80 83       	st	Z, r24
	}
}
    197a:	ff 91       	pop	r31
    197c:	ef 91       	pop	r30
    197e:	9f 91       	pop	r25
    1980:	8f 91       	pop	r24
    1982:	2f 91       	pop	r18
    1984:	0f 90       	pop	r0
    1986:	0f be       	out	0x3f, r0	; 63
    1988:	0f 90       	pop	r0
    198a:	1f 90       	pop	r1
    198c:	18 95       	reti

0000198e <__vector_20>:
 * we can read a character. The character is read and placed in
 * the input buffer.
 */

ISR(USART0_RX_vect) 
{
    198e:	1f 92       	push	r1
    1990:	0f 92       	push	r0
    1992:	0f b6       	in	r0, 0x3f	; 63
    1994:	0f 92       	push	r0
    1996:	11 24       	eor	r1, r1
    1998:	2f 93       	push	r18
    199a:	3f 93       	push	r19
    199c:	4f 93       	push	r20
    199e:	5f 93       	push	r21
    19a0:	6f 93       	push	r22
    19a2:	7f 93       	push	r23
    19a4:	8f 93       	push	r24
    19a6:	9f 93       	push	r25
    19a8:	af 93       	push	r26
    19aa:	bf 93       	push	r27
    19ac:	cf 93       	push	r28
    19ae:	ef 93       	push	r30
    19b0:	ff 93       	push	r31
	/* Read the character - we ignore the possibility of overrun. */
	char c;
	c = UDR0;
    19b2:	c0 91 c6 00 	lds	r28, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
		
	if(do_echo && bytes_in_out_buffer < OUTPUT_BUFFER_SIZE) {
    19b6:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <do_echo>
    19ba:	88 23       	and	r24, r24
    19bc:	49 f0       	breq	.+18     	; 0x19d0 <__vector_20+0x42>
    19be:	80 91 9b 01 	lds	r24, 0x019B	; 0x80019b <bytes_in_out_buffer>
    19c2:	8f 3f       	cpi	r24, 0xFF	; 255
    19c4:	29 f0       	breq	.+10     	; 0x19d0 <__vector_20+0x42>
		/* If echoing is enabled and there is output buffer
		 * space, echo the received character back to the UART.
		 * (If there is no output buffer space, characters
		 * will be lost.)
		 */
		uart_put_char(c, 0);
    19c6:	60 e0       	ldi	r22, 0x00	; 0
    19c8:	70 e0       	ldi	r23, 0x00	; 0
    19ca:	8c 2f       	mov	r24, r28
    19cc:	0e 94 cc 0b 	call	0x1798	; 0x1798 <uart_put_char>
	 * Check if we have space in our buffer. If not, set the overrun
	 * flag and throw away the character. (We never clear the 
	 * overrun flag - it's up to the programmer to check/clear
	 * this flag if desired.)
	 */
	if(bytes_in_input_buffer >= INPUT_BUFFER_SIZE) {
    19d0:	80 91 ad 02 	lds	r24, 0x02AD	; 0x8002ad <bytes_in_input_buffer>
    19d4:	80 31       	cpi	r24, 0x10	; 16
    19d6:	20 f0       	brcs	.+8      	; 0x19e0 <__vector_20+0x52>
		input_overrun = 1;
    19d8:	81 e0       	ldi	r24, 0x01	; 1
    19da:	80 93 ac 02 	sts	0x02AC, r24	; 0x8002ac <input_overrun>
    19de:	18 c0       	rjmp	.+48     	; 0x1a10 <__vector_20+0x82>
	} else {
		/* If the character is a carriage return, turn it into a
		 * linefeed 
		*/
		if (c == '\r') {
    19e0:	cd 30       	cpi	r28, 0x0D	; 13
    19e2:	09 f4       	brne	.+2      	; 0x19e6 <__vector_20+0x58>
			c = '\n';
    19e4:	ca e0       	ldi	r28, 0x0A	; 10
		}
		
		/* 
		 * There is room in the input buffer 
		 */
		input_buffer[input_insert_pos++] = c;
    19e6:	e0 91 9b 02 	lds	r30, 0x029B	; 0x80029b <input_insert_pos>
    19ea:	81 e0       	ldi	r24, 0x01	; 1
    19ec:	8e 0f       	add	r24, r30
    19ee:	80 93 9b 02 	sts	0x029B, r24	; 0x80029b <input_insert_pos>
    19f2:	f0 e0       	ldi	r31, 0x00	; 0
    19f4:	e4 56       	subi	r30, 0x64	; 100
    19f6:	fd 4f       	sbci	r31, 0xFD	; 253
    19f8:	c0 83       	st	Z, r28
		bytes_in_input_buffer++;
    19fa:	80 91 ad 02 	lds	r24, 0x02AD	; 0x8002ad <bytes_in_input_buffer>
    19fe:	8f 5f       	subi	r24, 0xFF	; 255
    1a00:	80 93 ad 02 	sts	0x02AD, r24	; 0x8002ad <bytes_in_input_buffer>
		if(input_insert_pos == INPUT_BUFFER_SIZE) {
    1a04:	80 91 9b 02 	lds	r24, 0x029B	; 0x80029b <input_insert_pos>
    1a08:	80 31       	cpi	r24, 0x10	; 16
    1a0a:	11 f4       	brne	.+4      	; 0x1a10 <__vector_20+0x82>
			/* Wrap around buffer pointer if necessary */
			input_insert_pos = 0;
    1a0c:	10 92 9b 02 	sts	0x029B, r1	; 0x80029b <input_insert_pos>
		}
	}
}
    1a10:	ff 91       	pop	r31
    1a12:	ef 91       	pop	r30
    1a14:	cf 91       	pop	r28
    1a16:	bf 91       	pop	r27
    1a18:	af 91       	pop	r26
    1a1a:	9f 91       	pop	r25
    1a1c:	8f 91       	pop	r24
    1a1e:	7f 91       	pop	r23
    1a20:	6f 91       	pop	r22
    1a22:	5f 91       	pop	r21
    1a24:	4f 91       	pop	r20
    1a26:	3f 91       	pop	r19
    1a28:	2f 91       	pop	r18
    1a2a:	0f 90       	pop	r0
    1a2c:	0f be       	out	0x3f, r0	; 63
    1a2e:	0f 90       	pop	r0
    1a30:	1f 90       	pop	r1
    1a32:	18 95       	reti

00001a34 <spi_setup_master>:
void spi_setup_master(uint8_t clockdivider) {
	// Set up SPI communication as a master
	// Make the SS, MOSI and SCK pins outputs. These are pins
	// 4, 5 and 7 of port B on the ATmega324A
	
	DDRB |= (1<<4)|(1<<5)|(1<<7);
    1a34:	94 b1       	in	r25, 0x04	; 4
    1a36:	90 6b       	ori	r25, 0xB0	; 176
    1a38:	94 b9       	out	0x04, r25	; 4
	
	// Set the slave select (SS) line high
	PORTB |= (1<<4);
    1a3a:	2c 9a       	sbi	0x05, 4	; 5
	
	// Set up the SPI control registers SPCR and SPSR:
	// - SPE bit = 1 (SPI is enabled)
	// - MSTR bit = 1 (Master Mode)
	SPCR0 = (1<<SPE0)|(1<<MSTR0);
    1a3c:	90 e5       	ldi	r25, 0x50	; 80
    1a3e:	9c bd       	out	0x2c, r25	; 44
	
	// Set SPR0 and SPR1 bits in SPCR and SPI2X bit in SPSR
	// based on the given clock divider
	// Invalid values default to the slowest speed
	// We consider each bit in turn
	switch(clockdivider) {
    1a40:	88 30       	cpi	r24, 0x08	; 8
    1a42:	21 f0       	breq	.+8      	; 0x1a4c <spi_setup_master+0x18>
    1a44:	80 32       	cpi	r24, 0x20	; 32
    1a46:	11 f0       	breq	.+4      	; 0x1a4c <spi_setup_master+0x18>
    1a48:	82 30       	cpi	r24, 0x02	; 2
    1a4a:	19 f4       	brne	.+6      	; 0x1a52 <spi_setup_master+0x1e>
		case 2:
		case 8:
		case 32:
			SPSR0 = (1<<SPI2X0);
    1a4c:	91 e0       	ldi	r25, 0x01	; 1
    1a4e:	9d bd       	out	0x2d, r25	; 45
			break;
    1a50:	01 c0       	rjmp	.+2      	; 0x1a54 <spi_setup_master+0x20>
		default:
			SPSR0 = 0;
    1a52:	1d bc       	out	0x2d, r1	; 45
			break;
	}
	switch(clockdivider) {
    1a54:	80 32       	cpi	r24, 0x20	; 32
    1a56:	69 f0       	breq	.+26     	; 0x1a72 <spi_setup_master+0x3e>
    1a58:	28 f4       	brcc	.+10     	; 0x1a64 <spi_setup_master+0x30>
    1a5a:	88 30       	cpi	r24, 0x08	; 8
    1a5c:	71 f0       	breq	.+28     	; 0x1a7a <spi_setup_master+0x46>
    1a5e:	80 31       	cpi	r24, 0x10	; 16
    1a60:	61 f0       	breq	.+24     	; 0x1a7a <spi_setup_master+0x46>
    1a62:	0e c0       	rjmp	.+28     	; 0x1a80 <spi_setup_master+0x4c>
    1a64:	80 34       	cpi	r24, 0x40	; 64
    1a66:	29 f0       	breq	.+10     	; 0x1a72 <spi_setup_master+0x3e>
    1a68:	80 38       	cpi	r24, 0x80	; 128
    1a6a:	51 f4       	brne	.+20     	; 0x1a80 <spi_setup_master+0x4c>
		case 128:
			SPCR0 |= (1<<SPR00);
    1a6c:	8c b5       	in	r24, 0x2c	; 44
    1a6e:	81 60       	ori	r24, 0x01	; 1
    1a70:	8c bd       	out	0x2c, r24	; 44
			// Note this flows through to the next code block
		case 32:
		case 64:
			SPCR0 |= (1<<SPR10);
    1a72:	8c b5       	in	r24, 0x2c	; 44
    1a74:	82 60       	ori	r24, 0x02	; 2
    1a76:	8c bd       	out	0x2c, r24	; 44
			break;
    1a78:	03 c0       	rjmp	.+6      	; 0x1a80 <spi_setup_master+0x4c>
		case 8:
		case 16:
			SPCR0 |= (1<<SPR00);
    1a7a:	8c b5       	in	r24, 0x2c	; 44
    1a7c:	81 60       	ori	r24, 0x01	; 1
    1a7e:	8c bd       	out	0x2c, r24	; 44
			break;
	}
	
	// Take SS (slave select) line low
	PORTB &= ~(1<<4);
    1a80:	2c 98       	cbi	0x05, 4	; 5
    1a82:	08 95       	ret

00001a84 <spi_send_byte>:
	// the transfer. We then wait until the most significant byte of
	// SPSR0 (SPIF0 bit) is set - this indicates that the transfer is
	// complete. (The final read of SPSR0 followed by a read of SPDR0
	// will cause the SPIF bit to be reset to 0. See page 224 of the 
	// ATmega324A datasheet.)
	SPDR0 = byte;
    1a84:	8e bd       	out	0x2e, r24	; 46
	while((SPSR0 & (1<<SPIF0)) == 0) {
    1a86:	0d b4       	in	r0, 0x2d	; 45
    1a88:	07 fe       	sbrs	r0, 7
    1a8a:	fd cf       	rjmp	.-6      	; 0x1a86 <spi_send_byte+0x2>
		; // wait
	}
	return SPDR0;
    1a8c:	8e b5       	in	r24, 0x2e	; 46
    1a8e:	08 95       	ret

00001a90 <move_cursor>:
	printf_P(PSTR("\x1b[0m"));
}

void reverse_video(void) {
	printf_P(PSTR("\x1b[7m"));
}
    1a90:	9f 93       	push	r25
    1a92:	8f 93       	push	r24
    1a94:	7f 93       	push	r23
    1a96:	6f 93       	push	r22
    1a98:	83 ef       	ldi	r24, 0xF3	; 243
    1a9a:	91 e0       	ldi	r25, 0x01	; 1
    1a9c:	9f 93       	push	r25
    1a9e:	8f 93       	push	r24
    1aa0:	0e 94 e0 0f 	call	0x1fc0	; 0x1fc0 <printf_P>
    1aa4:	0f 90       	pop	r0
    1aa6:	0f 90       	pop	r0
    1aa8:	0f 90       	pop	r0
    1aaa:	0f 90       	pop	r0
    1aac:	0f 90       	pop	r0
    1aae:	0f 90       	pop	r0
    1ab0:	08 95       	ret

00001ab2 <clear_terminal>:

void clear_terminal(void) {
	printf_P(PSTR("\x1b[2J"));
    1ab2:	8e ee       	ldi	r24, 0xEE	; 238
    1ab4:	91 e0       	ldi	r25, 0x01	; 1
    1ab6:	9f 93       	push	r25
    1ab8:	8f 93       	push	r24
    1aba:	0e 94 e0 0f 	call	0x1fc0	; 0x1fc0 <printf_P>
}
    1abe:	0f 90       	pop	r0
    1ac0:	0f 90       	pop	r0
    1ac2:	08 95       	ret

00001ac4 <init_timer0>:
 */
void init_timer0(void) {
	/* Reset clock tick count. L indicates a long (32 bit) 
	 * constant. 
	 */
	clockTicks = 0L;
    1ac4:	10 92 8d 01 	sts	0x018D, r1	; 0x80018d <clockTicks>
    1ac8:	10 92 8e 01 	sts	0x018E, r1	; 0x80018e <clockTicks+0x1>
    1acc:	10 92 8f 01 	sts	0x018F, r1	; 0x80018f <clockTicks+0x2>
    1ad0:	10 92 90 01 	sts	0x0190, r1	; 0x800190 <clockTicks+0x3>
	
	/* Clear the timer */
	TCNT0 = 0;
    1ad4:	16 bc       	out	0x26, r1	; 38

	/* Set the output compare value to be 124 */
	OCR0A = 124;
    1ad6:	8c e7       	ldi	r24, 0x7C	; 124
    1ad8:	87 bd       	out	0x27, r24	; 39
	
	/* Set the timer to clear on compare match (CTC mode)
	 * and to divide the clock by 64. This starts the timer
	 * running.
	 */
	TCCR0A = (1<<WGM01);
    1ada:	82 e0       	ldi	r24, 0x02	; 2
    1adc:	84 bd       	out	0x24, r24	; 36
	TCCR0B = (1<<CS01)|(1<<CS00);
    1ade:	83 e0       	ldi	r24, 0x03	; 3
    1ae0:	85 bd       	out	0x25, r24	; 37

	/* Enable an interrupt on output compare match. 
	 * Note that interrupts have to be enabled globally
	 * before the interrupts will fire.
	 */
	TIMSK0 |= (1<<OCIE0A);
    1ae2:	ee e6       	ldi	r30, 0x6E	; 110
    1ae4:	f0 e0       	ldi	r31, 0x00	; 0
    1ae6:	80 81       	ld	r24, Z
    1ae8:	82 60       	ori	r24, 0x02	; 2
    1aea:	80 83       	st	Z, r24
	
	/* Make sure the interrupt flag is cleared by writing a 
	 * 1 to it.
	 */
	TIFR0 &= (1<<OCF0A);
    1aec:	85 b3       	in	r24, 0x15	; 21
    1aee:	82 70       	andi	r24, 0x02	; 2
    1af0:	85 bb       	out	0x15, r24	; 21
	
	// Countdown for frog
	DDRC = 0XFF;
    1af2:	8f ef       	ldi	r24, 0xFF	; 255
    1af4:	87 b9       	out	0x07, r24	; 7
	DDRD = (1<<2);
    1af6:	84 e0       	ldi	r24, 0x04	; 4
    1af8:	8a b9       	out	0x0a, r24	; 10
    1afa:	08 95       	ret

00001afc <get_current_time>:
	/* Disable interrupts so we can be sure that the interrupt
	 * doesn't fire when we've copied just a couple of bytes
	 * of the value. Interrupts are re-enabled if they were
	 * enabled at the start.
	 */
	uint8_t interruptsOn = bit_is_set(SREG, SREG_I);
    1afc:	2f b7       	in	r18, 0x3f	; 63
	cli();
    1afe:	f8 94       	cli
	returnValue = clockTicks;
    1b00:	60 91 8d 01 	lds	r22, 0x018D	; 0x80018d <clockTicks>
    1b04:	70 91 8e 01 	lds	r23, 0x018E	; 0x80018e <clockTicks+0x1>
    1b08:	80 91 8f 01 	lds	r24, 0x018F	; 0x80018f <clockTicks+0x2>
    1b0c:	90 91 90 01 	lds	r25, 0x0190	; 0x800190 <clockTicks+0x3>
	if(interruptsOn) {
    1b10:	22 23       	and	r18, r18
    1b12:	0c f4       	brge	.+2      	; 0x1b16 <get_current_time+0x1a>
		sei();
    1b14:	78 94       	sei
	}
	return returnValue;
}
    1b16:	08 95       	ret

00001b18 <init_countdown>:
	}
}

void init_countdown() {
	//start timer
	times_up = 0;
    1b18:	10 92 8b 01 	sts	0x018B, r1	; 0x80018b <times_up>
	countdown_inited = 1;
    1b1c:	81 e0       	ldi	r24, 0x01	; 1
    1b1e:	80 93 8c 01 	sts	0x018C, r24	; 0x80018c <countdown_inited>
	last_digit_shown = 0;
    1b22:	10 92 86 01 	sts	0x0186, r1	; 0x800186 <last_digit_shown>
	total_time_paused = 0;
    1b26:	10 92 7e 01 	sts	0x017E, r1	; 0x80017e <total_time_paused>
    1b2a:	10 92 7f 01 	sts	0x017F, r1	; 0x80017f <total_time_paused+0x1>
    1b2e:	10 92 80 01 	sts	0x0180, r1	; 0x800180 <total_time_paused+0x2>
    1b32:	10 92 81 01 	sts	0x0181, r1	; 0x800181 <total_time_paused+0x3>
	frog_start_time = get_current_time();
    1b36:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <get_current_time>
    1b3a:	60 93 87 01 	sts	0x0187, r22	; 0x800187 <frog_start_time>
    1b3e:	70 93 88 01 	sts	0x0188, r23	; 0x800188 <frog_start_time+0x1>
    1b42:	80 93 89 01 	sts	0x0189, r24	; 0x800189 <frog_start_time+0x2>
    1b46:	90 93 8a 01 	sts	0x018A, r25	; 0x80018a <frog_start_time+0x3>
    1b4a:	08 95       	ret

00001b4c <is_time_up>:
}

uint8_t is_time_up(){
	return times_up;
    1b4c:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <times_up>
}
    1b50:	08 95       	ret

00001b52 <countdown_pause>:

void countdown_pause(){
    1b52:	cf 92       	push	r12
    1b54:	df 92       	push	r13
    1b56:	ef 92       	push	r14
    1b58:	ff 92       	push	r15
    1b5a:	0f 93       	push	r16
    1b5c:	1f 93       	push	r17
	if (is_paused == 0) {
    1b5e:	80 91 79 01 	lds	r24, 0x0179	; 0x800179 <is_paused>
    1b62:	81 11       	cpse	r24, r1
    1b64:	0e c0       	rjmp	.+28     	; 0x1b82 <countdown_pause+0x30>
		start_pause = get_current_time();
    1b66:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <get_current_time>
    1b6a:	60 93 82 01 	sts	0x0182, r22	; 0x800182 <start_pause>
    1b6e:	70 93 83 01 	sts	0x0183, r23	; 0x800183 <start_pause+0x1>
    1b72:	80 93 84 01 	sts	0x0184, r24	; 0x800184 <start_pause+0x2>
    1b76:	90 93 85 01 	sts	0x0185, r25	; 0x800185 <start_pause+0x3>
		is_paused = 1;
    1b7a:	81 e0       	ldi	r24, 0x01	; 1
    1b7c:	80 93 79 01 	sts	0x0179, r24	; 0x800179 <is_paused>
    1b80:	26 c0       	rjmp	.+76     	; 0x1bce <countdown_pause+0x7c>
	} else {
		total_time_paused += get_current_time() - start_pause;
    1b82:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <get_current_time>
    1b86:	c0 90 82 01 	lds	r12, 0x0182	; 0x800182 <start_pause>
    1b8a:	d0 90 83 01 	lds	r13, 0x0183	; 0x800183 <start_pause+0x1>
    1b8e:	e0 90 84 01 	lds	r14, 0x0184	; 0x800184 <start_pause+0x2>
    1b92:	f0 90 85 01 	lds	r15, 0x0185	; 0x800185 <start_pause+0x3>
    1b96:	00 91 7e 01 	lds	r16, 0x017E	; 0x80017e <total_time_paused>
    1b9a:	10 91 7f 01 	lds	r17, 0x017F	; 0x80017f <total_time_paused+0x1>
    1b9e:	20 91 80 01 	lds	r18, 0x0180	; 0x800180 <total_time_paused+0x2>
    1ba2:	30 91 81 01 	lds	r19, 0x0181	; 0x800181 <total_time_paused+0x3>
    1ba6:	0c 19       	sub	r16, r12
    1ba8:	1d 09       	sbc	r17, r13
    1baa:	2e 09       	sbc	r18, r14
    1bac:	3f 09       	sbc	r19, r15
    1bae:	dc 01       	movw	r26, r24
    1bb0:	cb 01       	movw	r24, r22
    1bb2:	80 0f       	add	r24, r16
    1bb4:	91 1f       	adc	r25, r17
    1bb6:	a2 1f       	adc	r26, r18
    1bb8:	b3 1f       	adc	r27, r19
    1bba:	80 93 7e 01 	sts	0x017E, r24	; 0x80017e <total_time_paused>
    1bbe:	90 93 7f 01 	sts	0x017F, r25	; 0x80017f <total_time_paused+0x1>
    1bc2:	a0 93 80 01 	sts	0x0180, r26	; 0x800180 <total_time_paused+0x2>
    1bc6:	b0 93 81 01 	sts	0x0181, r27	; 0x800181 <total_time_paused+0x3>
		is_paused = 0;
    1bca:	10 92 79 01 	sts	0x0179, r1	; 0x800179 <is_paused>
	}
}
    1bce:	1f 91       	pop	r17
    1bd0:	0f 91       	pop	r16
    1bd2:	ff 90       	pop	r15
    1bd4:	ef 90       	pop	r14
    1bd6:	df 90       	pop	r13
    1bd8:	cf 90       	pop	r12
    1bda:	08 95       	ret

00001bdc <amount_time_paused>:

uint32_t amount_time_paused(void){
    1bdc:	cf 92       	push	r12
    1bde:	df 92       	push	r13
    1be0:	ef 92       	push	r14
    1be2:	ff 92       	push	r15
    1be4:	0f 93       	push	r16
    1be6:	1f 93       	push	r17
	uint32_t return_value = 0;
	if (is_paused) {
    1be8:	80 91 79 01 	lds	r24, 0x0179	; 0x800179 <is_paused>
    1bec:	88 23       	and	r24, r24
    1bee:	d9 f0       	breq	.+54     	; 0x1c26 <amount_time_paused+0x4a>
		return_value = total_time_paused + (get_current_time() - start_pause);
    1bf0:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <get_current_time>
    1bf4:	c0 90 82 01 	lds	r12, 0x0182	; 0x800182 <start_pause>
    1bf8:	d0 90 83 01 	lds	r13, 0x0183	; 0x800183 <start_pause+0x1>
    1bfc:	e0 90 84 01 	lds	r14, 0x0184	; 0x800184 <start_pause+0x2>
    1c00:	f0 90 85 01 	lds	r15, 0x0185	; 0x800185 <start_pause+0x3>
    1c04:	00 91 7e 01 	lds	r16, 0x017E	; 0x80017e <total_time_paused>
    1c08:	10 91 7f 01 	lds	r17, 0x017F	; 0x80017f <total_time_paused+0x1>
    1c0c:	20 91 80 01 	lds	r18, 0x0180	; 0x800180 <total_time_paused+0x2>
    1c10:	30 91 81 01 	lds	r19, 0x0181	; 0x800181 <total_time_paused+0x3>
    1c14:	0c 19       	sub	r16, r12
    1c16:	1d 09       	sbc	r17, r13
    1c18:	2e 09       	sbc	r18, r14
    1c1a:	3f 09       	sbc	r19, r15
		return return_value;
    1c1c:	60 0f       	add	r22, r16
    1c1e:	71 1f       	adc	r23, r17
    1c20:	82 1f       	adc	r24, r18
    1c22:	93 1f       	adc	r25, r19
    1c24:	08 c0       	rjmp	.+16     	; 0x1c36 <amount_time_paused+0x5a>
	} else {
		// If not paused, only change by how
		// much has been paused by in past
		return total_time_paused;
    1c26:	60 91 7e 01 	lds	r22, 0x017E	; 0x80017e <total_time_paused>
    1c2a:	70 91 7f 01 	lds	r23, 0x017F	; 0x80017f <total_time_paused+0x1>
    1c2e:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <total_time_paused+0x2>
    1c32:	90 91 81 01 	lds	r25, 0x0181	; 0x800181 <total_time_paused+0x3>
	}
	
    1c36:	1f 91       	pop	r17
    1c38:	0f 91       	pop	r16
    1c3a:	ff 90       	pop	r15
    1c3c:	ef 90       	pop	r14
    1c3e:	df 90       	pop	r13
    1c40:	cf 90       	pop	r12
    1c42:	08 95       	ret

00001c44 <__vector_16>:
		sei();
	}
	return returnValue;
}

ISR(TIMER0_COMPA_vect) {
    1c44:	1f 92       	push	r1
    1c46:	0f 92       	push	r0
    1c48:	0f b6       	in	r0, 0x3f	; 63
    1c4a:	0f 92       	push	r0
    1c4c:	11 24       	eor	r1, r1
    1c4e:	8f 92       	push	r8
    1c50:	9f 92       	push	r9
    1c52:	af 92       	push	r10
    1c54:	bf 92       	push	r11
    1c56:	cf 92       	push	r12
    1c58:	df 92       	push	r13
    1c5a:	ef 92       	push	r14
    1c5c:	ff 92       	push	r15
    1c5e:	2f 93       	push	r18
    1c60:	3f 93       	push	r19
    1c62:	4f 93       	push	r20
    1c64:	5f 93       	push	r21
    1c66:	6f 93       	push	r22
    1c68:	7f 93       	push	r23
    1c6a:	8f 93       	push	r24
    1c6c:	9f 93       	push	r25
    1c6e:	af 93       	push	r26
    1c70:	bf 93       	push	r27
    1c72:	ef 93       	push	r30
    1c74:	ff 93       	push	r31
	/* Increment our clock tick count */
	clockTicks++;
    1c76:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <clockTicks>
    1c7a:	90 91 8e 01 	lds	r25, 0x018E	; 0x80018e <clockTicks+0x1>
    1c7e:	a0 91 8f 01 	lds	r26, 0x018F	; 0x80018f <clockTicks+0x2>
    1c82:	b0 91 90 01 	lds	r27, 0x0190	; 0x800190 <clockTicks+0x3>
    1c86:	01 96       	adiw	r24, 0x01	; 1
    1c88:	a1 1d       	adc	r26, r1
    1c8a:	b1 1d       	adc	r27, r1
    1c8c:	80 93 8d 01 	sts	0x018D, r24	; 0x80018d <clockTicks>
    1c90:	90 93 8e 01 	sts	0x018E, r25	; 0x80018e <clockTicks+0x1>
    1c94:	a0 93 8f 01 	sts	0x018F, r26	; 0x80018f <clockTicks+0x2>
    1c98:	b0 93 90 01 	sts	0x0190, r27	; 0x800190 <clockTicks+0x3>
	
	paused_time = amount_time_paused();
    1c9c:	0e 94 ee 0d 	call	0x1bdc	; 0x1bdc <amount_time_paused>
    1ca0:	60 93 7a 01 	sts	0x017A, r22	; 0x80017a <paused_time>
    1ca4:	70 93 7b 01 	sts	0x017B, r23	; 0x80017b <paused_time+0x1>
    1ca8:	80 93 7c 01 	sts	0x017C, r24	; 0x80017c <paused_time+0x2>
    1cac:	90 93 7d 01 	sts	0x017D, r25	; 0x80017d <paused_time+0x3>
	
	// Find time remaining
	uint32_t time_remaining = TOTAL_TIME - (get_current_time() - paused_time - frog_start_time);
    1cb0:	c0 90 7a 01 	lds	r12, 0x017A	; 0x80017a <paused_time>
    1cb4:	d0 90 7b 01 	lds	r13, 0x017B	; 0x80017b <paused_time+0x1>
    1cb8:	e0 90 7c 01 	lds	r14, 0x017C	; 0x80017c <paused_time+0x2>
    1cbc:	f0 90 7d 01 	lds	r15, 0x017D	; 0x80017d <paused_time+0x3>
    1cc0:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <get_current_time>
    1cc4:	80 90 87 01 	lds	r8, 0x0187	; 0x800187 <frog_start_time>
    1cc8:	90 90 88 01 	lds	r9, 0x0188	; 0x800188 <frog_start_time+0x1>
    1ccc:	a0 90 89 01 	lds	r10, 0x0189	; 0x800189 <frog_start_time+0x2>
    1cd0:	b0 90 8a 01 	lds	r11, 0x018A	; 0x80018a <frog_start_time+0x3>
	
	if (countdown_inited && time_remaining <= 0) {
    1cd4:	20 91 8c 01 	lds	r18, 0x018C	; 0x80018c <countdown_inited>
    1cd8:	22 23       	and	r18, r18
    1cda:	09 f4       	brne	.+2      	; 0x1cde <__vector_16+0x9a>
    1cdc:	a9 c0       	rjmp	.+338    	; 0x1e30 <__vector_16+0x1ec>
	clockTicks++;
	
	paused_time = amount_time_paused();
	
	// Find time remaining
	uint32_t time_remaining = TOTAL_TIME - (get_current_time() - paused_time - frog_start_time);
    1cde:	c8 0c       	add	r12, r8
    1ce0:	d9 1c       	adc	r13, r9
    1ce2:	ea 1c       	adc	r14, r10
    1ce4:	fb 1c       	adc	r15, r11
    1ce6:	a7 01       	movw	r20, r14
    1ce8:	96 01       	movw	r18, r12
    1cea:	26 1b       	sub	r18, r22
    1cec:	37 0b       	sbc	r19, r23
    1cee:	48 0b       	sbc	r20, r24
    1cf0:	59 0b       	sbc	r21, r25
    1cf2:	da 01       	movw	r26, r20
    1cf4:	c9 01       	movw	r24, r18
    1cf6:	ba 01       	movw	r22, r20
    1cf8:	a9 01       	movw	r20, r18
    1cfa:	48 56       	subi	r20, 0x68	; 104
    1cfc:	55 4c       	sbci	r21, 0xC5	; 197
    1cfe:	6f 4f       	sbci	r22, 0xFF	; 255
    1d00:	7f 4f       	sbci	r23, 0xFF	; 255
	
	if (countdown_inited && time_remaining <= 0) {
    1d02:	51 f4       	brne	.+20     	; 0x1d18 <__vector_16+0xd4>
		times_up = 1;
    1d04:	81 e0       	ldi	r24, 0x01	; 1
    1d06:	80 93 8b 01 	sts	0x018B, r24	; 0x80018b <times_up>
		PORTC = 0;
    1d0a:	18 b8       	out	0x08, r1	; 8
		PORTD &= ~(1<<2);
    1d0c:	5a 98       	cbi	0x0b, 2	; 11
		PORTC = seven_seg[0];
    1d0e:	8f e3       	ldi	r24, 0x3F	; 63
    1d10:	88 b9       	out	0x08, r24	; 8
		countdown_inited = 0;
    1d12:	10 92 8c 01 	sts	0x018C, r1	; 0x80018c <countdown_inited>
    1d16:	8c c0       	rjmp	.+280    	; 0x1e30 <__vector_16+0x1ec>
	} else if (countdown_inited && last_digit_shown == 0) {
    1d18:	20 91 86 01 	lds	r18, 0x0186	; 0x800186 <last_digit_shown>
    1d1c:	21 11       	cpse	r18, r1
    1d1e:	40 c0       	rjmp	.+128    	; 0x1da0 <__vector_16+0x15c>
		if (time_remaining < 10000 && time_remaining >= 1000) {
    1d20:	6c 01       	movw	r12, r24
    1d22:	7d 01       	movw	r14, r26
    1d24:	30 eb       	ldi	r19, 0xB0	; 176
    1d26:	c3 0e       	add	r12, r19
    1d28:	36 e3       	ldi	r19, 0x36	; 54
    1d2a:	d3 1e       	adc	r13, r19
    1d2c:	e1 1c       	adc	r14, r1
    1d2e:	f1 1c       	adc	r15, r1
    1d30:	28 e2       	ldi	r18, 0x28	; 40
    1d32:	c2 16       	cp	r12, r18
    1d34:	23 e2       	ldi	r18, 0x23	; 35
    1d36:	d2 06       	cpc	r13, r18
    1d38:	e1 04       	cpc	r14, r1
    1d3a:	f1 04       	cpc	r15, r1
    1d3c:	70 f4       	brcc	.+28     	; 0x1d5a <__vector_16+0x116>
			// Already correctly set
			PORTC = seven_seg[time_remaining/1000];
    1d3e:	cb 01       	movw	r24, r22
    1d40:	ba 01       	movw	r22, r20
    1d42:	28 ee       	ldi	r18, 0xE8	; 232
    1d44:	33 e0       	ldi	r19, 0x03	; 3
    1d46:	40 e0       	ldi	r20, 0x00	; 0
    1d48:	50 e0       	ldi	r21, 0x00	; 0
    1d4a:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <__udivmodsi4>
    1d4e:	f9 01       	movw	r30, r18
    1d50:	e7 5b       	subi	r30, 0xB7	; 183
    1d52:	fe 4f       	sbci	r31, 0xFE	; 254
    1d54:	80 81       	ld	r24, Z
    1d56:	88 b9       	out	0x08, r24	; 8
    1d58:	6b c0       	rjmp	.+214    	; 0x1e30 <__vector_16+0x1ec>
		} else if (time_remaining <= 15000 && time_remaining >= 10000){
    1d5a:	ac 01       	movw	r20, r24
    1d5c:	bd 01       	movw	r22, r26
    1d5e:	48 57       	subi	r20, 0x78	; 120
    1d60:	5c 4e       	sbci	r21, 0xEC	; 236
    1d62:	6f 4f       	sbci	r22, 0xFF	; 255
    1d64:	7f 4f       	sbci	r23, 0xFF	; 255
    1d66:	49 38       	cpi	r20, 0x89	; 137
    1d68:	53 41       	sbci	r21, 0x13	; 19
    1d6a:	61 05       	cpc	r22, r1
    1d6c:	71 05       	cpc	r23, r1
    1d6e:	38 f4       	brcc	.+14     	; 0x1d7e <__vector_16+0x13a>
	
			PORTD |= (1<<2); // Show leftmost digit
    1d70:	5a 9a       	sbi	0x0b, 2	; 11
			PORTC = seven_seg[1];
    1d72:	86 e0       	ldi	r24, 0x06	; 6
    1d74:	88 b9       	out	0x08, r24	; 8
			last_digit_shown = 1;
    1d76:	81 e0       	ldi	r24, 0x01	; 1
    1d78:	80 93 86 01 	sts	0x0186, r24	; 0x800186 <last_digit_shown>
    1d7c:	59 c0       	rjmp	.+178    	; 0x1e30 <__vector_16+0x1ec>
		} else if (time_remaining < 1000 && time_remaining > 0) {
    1d7e:	89 56       	subi	r24, 0x69	; 105
    1d80:	95 4c       	sbci	r25, 0xC5	; 197
    1d82:	af 4f       	sbci	r26, 0xFF	; 255
    1d84:	bf 4f       	sbci	r27, 0xFF	; 255
    1d86:	87 3e       	cpi	r24, 0xE7	; 231
    1d88:	93 40       	sbci	r25, 0x03	; 3
    1d8a:	a1 05       	cpc	r26, r1
    1d8c:	b1 05       	cpc	r27, r1
    1d8e:	08 f0       	brcs	.+2      	; 0x1d92 <__vector_16+0x14e>
    1d90:	4f c0       	rjmp	.+158    	; 0x1e30 <__vector_16+0x1ec>
			PORTD |= (1<<2); // Show leftmost digit
    1d92:	5a 9a       	sbi	0x0b, 2	; 11
			PORTC = 191;
    1d94:	8f eb       	ldi	r24, 0xBF	; 191
    1d96:	88 b9       	out	0x08, r24	; 8
			//PORTC = seven_seg[0]; // Will always be 0
			//PORTC = (1<<7); // Show decimal point
			last_digit_shown = 1;
    1d98:	81 e0       	ldi	r24, 0x01	; 1
    1d9a:	80 93 86 01 	sts	0x0186, r24	; 0x800186 <last_digit_shown>
    1d9e:	48 c0       	rjmp	.+144    	; 0x1e30 <__vector_16+0x1ec>
		}
	} else if (countdown_inited && last_digit_shown == 1) {
    1da0:	20 91 86 01 	lds	r18, 0x0186	; 0x800186 <last_digit_shown>
    1da4:	21 30       	cpi	r18, 0x01	; 1
    1da6:	09 f0       	breq	.+2      	; 0x1daa <__vector_16+0x166>
    1da8:	43 c0       	rjmp	.+134    	; 0x1e30 <__vector_16+0x1ec>
		if (time_remaining <= 15000 && time_remaining >= 10000){
    1daa:	6c 01       	movw	r12, r24
    1dac:	7d 01       	movw	r14, r26
    1dae:	28 e8       	ldi	r18, 0x88	; 136
    1db0:	c2 0e       	add	r12, r18
    1db2:	23 e1       	ldi	r18, 0x13	; 19
    1db4:	d2 1e       	adc	r13, r18
    1db6:	e1 1c       	adc	r14, r1
    1db8:	f1 1c       	adc	r15, r1
    1dba:	39 e8       	ldi	r19, 0x89	; 137
    1dbc:	c3 16       	cp	r12, r19
    1dbe:	33 e1       	ldi	r19, 0x13	; 19
    1dc0:	d3 06       	cpc	r13, r19
    1dc2:	e1 04       	cpc	r14, r1
    1dc4:	f1 04       	cpc	r15, r1
    1dc6:	d0 f4       	brcc	.+52     	; 0x1dfc <__vector_16+0x1b8>
			// 10-15 seconds
			PORTC = 0;
    1dc8:	18 b8       	out	0x08, r1	; 8
			PORTD &= ~(1<<2); // Make value 0
    1dca:	5a 98       	cbi	0x0b, 2	; 11
			PORTC = seven_seg[(time_remaining/1000)%10];
    1dcc:	cb 01       	movw	r24, r22
    1dce:	ba 01       	movw	r22, r20
    1dd0:	28 ee       	ldi	r18, 0xE8	; 232
    1dd2:	33 e0       	ldi	r19, 0x03	; 3
    1dd4:	40 e0       	ldi	r20, 0x00	; 0
    1dd6:	50 e0       	ldi	r21, 0x00	; 0
    1dd8:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <__udivmodsi4>
    1ddc:	ca 01       	movw	r24, r20
    1dde:	b9 01       	movw	r22, r18
    1de0:	2a e0       	ldi	r18, 0x0A	; 10
    1de2:	30 e0       	ldi	r19, 0x00	; 0
    1de4:	40 e0       	ldi	r20, 0x00	; 0
    1de6:	50 e0       	ldi	r21, 0x00	; 0
    1de8:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <__udivmodsi4>
    1dec:	fb 01       	movw	r30, r22
    1dee:	e7 5b       	subi	r30, 0xB7	; 183
    1df0:	fe 4f       	sbci	r31, 0xFE	; 254
    1df2:	80 81       	ld	r24, Z
    1df4:	88 b9       	out	0x08, r24	; 8
			last_digit_shown = 0;
    1df6:	10 92 86 01 	sts	0x0186, r1	; 0x800186 <last_digit_shown>
    1dfa:	1a c0       	rjmp	.+52     	; 0x1e30 <__vector_16+0x1ec>
		} else if (time_remaining < 1000 && time_remaining > 0) {
    1dfc:	89 56       	subi	r24, 0x69	; 105
    1dfe:	95 4c       	sbci	r25, 0xC5	; 197
    1e00:	af 4f       	sbci	r26, 0xFF	; 255
    1e02:	bf 4f       	sbci	r27, 0xFF	; 255
    1e04:	87 3e       	cpi	r24, 0xE7	; 231
    1e06:	93 40       	sbci	r25, 0x03	; 3
    1e08:	a1 05       	cpc	r26, r1
    1e0a:	b1 05       	cpc	r27, r1
    1e0c:	88 f4       	brcc	.+34     	; 0x1e30 <__vector_16+0x1ec>
			PORTC = 0;
    1e0e:	18 b8       	out	0x08, r1	; 8
			PORTD &= ~(1<<2); // Show rightmost digit
    1e10:	5a 98       	cbi	0x0b, 2	; 11
			PORTC = seven_seg[time_remaining/100];
    1e12:	cb 01       	movw	r24, r22
    1e14:	ba 01       	movw	r22, r20
    1e16:	24 e6       	ldi	r18, 0x64	; 100
    1e18:	30 e0       	ldi	r19, 0x00	; 0
    1e1a:	40 e0       	ldi	r20, 0x00	; 0
    1e1c:	50 e0       	ldi	r21, 0x00	; 0
    1e1e:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <__udivmodsi4>
    1e22:	f9 01       	movw	r30, r18
    1e24:	e7 5b       	subi	r30, 0xB7	; 183
    1e26:	fe 4f       	sbci	r31, 0xFE	; 254
    1e28:	80 81       	ld	r24, Z
    1e2a:	88 b9       	out	0x08, r24	; 8
			last_digit_shown = 0;
    1e2c:	10 92 86 01 	sts	0x0186, r1	; 0x800186 <last_digit_shown>
		}
	}
}
    1e30:	ff 91       	pop	r31
    1e32:	ef 91       	pop	r30
    1e34:	bf 91       	pop	r27
    1e36:	af 91       	pop	r26
    1e38:	9f 91       	pop	r25
    1e3a:	8f 91       	pop	r24
    1e3c:	7f 91       	pop	r23
    1e3e:	6f 91       	pop	r22
    1e40:	5f 91       	pop	r21
    1e42:	4f 91       	pop	r20
    1e44:	3f 91       	pop	r19
    1e46:	2f 91       	pop	r18
    1e48:	ff 90       	pop	r15
    1e4a:	ef 90       	pop	r14
    1e4c:	df 90       	pop	r13
    1e4e:	cf 90       	pop	r12
    1e50:	bf 90       	pop	r11
    1e52:	af 90       	pop	r10
    1e54:	9f 90       	pop	r9
    1e56:	8f 90       	pop	r8
    1e58:	0f 90       	pop	r0
    1e5a:	0f be       	out	0x3f, r0	; 63
    1e5c:	0f 90       	pop	r0
    1e5e:	1f 90       	pop	r1
    1e60:	18 95       	reti

00001e62 <__udivmodsi4>:
    1e62:	a1 e2       	ldi	r26, 0x21	; 33
    1e64:	1a 2e       	mov	r1, r26
    1e66:	aa 1b       	sub	r26, r26
    1e68:	bb 1b       	sub	r27, r27
    1e6a:	fd 01       	movw	r30, r26
    1e6c:	0d c0       	rjmp	.+26     	; 0x1e88 <__udivmodsi4_ep>

00001e6e <__udivmodsi4_loop>:
    1e6e:	aa 1f       	adc	r26, r26
    1e70:	bb 1f       	adc	r27, r27
    1e72:	ee 1f       	adc	r30, r30
    1e74:	ff 1f       	adc	r31, r31
    1e76:	a2 17       	cp	r26, r18
    1e78:	b3 07       	cpc	r27, r19
    1e7a:	e4 07       	cpc	r30, r20
    1e7c:	f5 07       	cpc	r31, r21
    1e7e:	20 f0       	brcs	.+8      	; 0x1e88 <__udivmodsi4_ep>
    1e80:	a2 1b       	sub	r26, r18
    1e82:	b3 0b       	sbc	r27, r19
    1e84:	e4 0b       	sbc	r30, r20
    1e86:	f5 0b       	sbc	r31, r21

00001e88 <__udivmodsi4_ep>:
    1e88:	66 1f       	adc	r22, r22
    1e8a:	77 1f       	adc	r23, r23
    1e8c:	88 1f       	adc	r24, r24
    1e8e:	99 1f       	adc	r25, r25
    1e90:	1a 94       	dec	r1
    1e92:	69 f7       	brne	.-38     	; 0x1e6e <__udivmodsi4_loop>
    1e94:	60 95       	com	r22
    1e96:	70 95       	com	r23
    1e98:	80 95       	com	r24
    1e9a:	90 95       	com	r25
    1e9c:	9b 01       	movw	r18, r22
    1e9e:	ac 01       	movw	r20, r24
    1ea0:	bd 01       	movw	r22, r26
    1ea2:	cf 01       	movw	r24, r30
    1ea4:	08 95       	ret

00001ea6 <__divmodsi4>:
    1ea6:	05 2e       	mov	r0, r21
    1ea8:	97 fb       	bst	r25, 7
    1eaa:	1e f4       	brtc	.+6      	; 0x1eb2 <__divmodsi4+0xc>
    1eac:	00 94       	com	r0
    1eae:	0e 94 6a 0f 	call	0x1ed4	; 0x1ed4 <__negsi2>
    1eb2:	57 fd       	sbrc	r21, 7
    1eb4:	07 d0       	rcall	.+14     	; 0x1ec4 <__divmodsi4_neg2>
    1eb6:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <__udivmodsi4>
    1eba:	07 fc       	sbrc	r0, 7
    1ebc:	03 d0       	rcall	.+6      	; 0x1ec4 <__divmodsi4_neg2>
    1ebe:	4e f4       	brtc	.+18     	; 0x1ed2 <__divmodsi4_exit>
    1ec0:	0c 94 6a 0f 	jmp	0x1ed4	; 0x1ed4 <__negsi2>

00001ec4 <__divmodsi4_neg2>:
    1ec4:	50 95       	com	r21
    1ec6:	40 95       	com	r20
    1ec8:	30 95       	com	r19
    1eca:	21 95       	neg	r18
    1ecc:	3f 4f       	sbci	r19, 0xFF	; 255
    1ece:	4f 4f       	sbci	r20, 0xFF	; 255
    1ed0:	5f 4f       	sbci	r21, 0xFF	; 255

00001ed2 <__divmodsi4_exit>:
    1ed2:	08 95       	ret

00001ed4 <__negsi2>:
    1ed4:	90 95       	com	r25
    1ed6:	80 95       	com	r24
    1ed8:	70 95       	com	r23
    1eda:	61 95       	neg	r22
    1edc:	7f 4f       	sbci	r23, 0xFF	; 255
    1ede:	8f 4f       	sbci	r24, 0xFF	; 255
    1ee0:	9f 4f       	sbci	r25, 0xFF	; 255
    1ee2:	08 95       	ret

00001ee4 <__tablejump2__>:
    1ee4:	ee 0f       	add	r30, r30
    1ee6:	ff 1f       	adc	r31, r31
    1ee8:	05 90       	lpm	r0, Z+
    1eea:	f4 91       	lpm	r31, Z
    1eec:	e0 2d       	mov	r30, r0
    1eee:	09 94       	ijmp

00001ef0 <__ashrdi3>:
    1ef0:	97 fb       	bst	r25, 7
    1ef2:	10 f8       	bld	r1, 0

00001ef4 <__lshrdi3>:
    1ef4:	16 94       	lsr	r1
    1ef6:	00 08       	sbc	r0, r0
    1ef8:	0f 93       	push	r16
    1efa:	08 30       	cpi	r16, 0x08	; 8
    1efc:	98 f0       	brcs	.+38     	; 0x1f24 <__lshrdi3+0x30>
    1efe:	08 50       	subi	r16, 0x08	; 8
    1f00:	23 2f       	mov	r18, r19
    1f02:	34 2f       	mov	r19, r20
    1f04:	45 2f       	mov	r20, r21
    1f06:	56 2f       	mov	r21, r22
    1f08:	67 2f       	mov	r22, r23
    1f0a:	78 2f       	mov	r23, r24
    1f0c:	89 2f       	mov	r24, r25
    1f0e:	90 2d       	mov	r25, r0
    1f10:	f4 cf       	rjmp	.-24     	; 0x1efa <__lshrdi3+0x6>
    1f12:	05 94       	asr	r0
    1f14:	97 95       	ror	r25
    1f16:	87 95       	ror	r24
    1f18:	77 95       	ror	r23
    1f1a:	67 95       	ror	r22
    1f1c:	57 95       	ror	r21
    1f1e:	47 95       	ror	r20
    1f20:	37 95       	ror	r19
    1f22:	27 95       	ror	r18
    1f24:	0a 95       	dec	r16
    1f26:	aa f7       	brpl	.-22     	; 0x1f12 <__lshrdi3+0x1e>
    1f28:	0f 91       	pop	r16
    1f2a:	08 95       	ret

00001f2c <__cmpdi2_s8>:
    1f2c:	00 24       	eor	r0, r0
    1f2e:	a7 fd       	sbrc	r26, 7
    1f30:	00 94       	com	r0
    1f32:	2a 17       	cp	r18, r26
    1f34:	30 05       	cpc	r19, r0
    1f36:	40 05       	cpc	r20, r0
    1f38:	50 05       	cpc	r21, r0
    1f3a:	60 05       	cpc	r22, r0
    1f3c:	70 05       	cpc	r23, r0
    1f3e:	80 05       	cpc	r24, r0
    1f40:	90 05       	cpc	r25, r0
    1f42:	08 95       	ret

00001f44 <fgetc>:
    1f44:	cf 93       	push	r28
    1f46:	df 93       	push	r29
    1f48:	ec 01       	movw	r28, r24
    1f4a:	2b 81       	ldd	r18, Y+3	; 0x03
    1f4c:	20 ff       	sbrs	r18, 0
    1f4e:	33 c0       	rjmp	.+102    	; 0x1fb6 <fgetc+0x72>
    1f50:	26 ff       	sbrs	r18, 6
    1f52:	0a c0       	rjmp	.+20     	; 0x1f68 <fgetc+0x24>
    1f54:	2f 7b       	andi	r18, 0xBF	; 191
    1f56:	2b 83       	std	Y+3, r18	; 0x03
    1f58:	8e 81       	ldd	r24, Y+6	; 0x06
    1f5a:	9f 81       	ldd	r25, Y+7	; 0x07
    1f5c:	01 96       	adiw	r24, 0x01	; 1
    1f5e:	9f 83       	std	Y+7, r25	; 0x07
    1f60:	8e 83       	std	Y+6, r24	; 0x06
    1f62:	8a 81       	ldd	r24, Y+2	; 0x02
    1f64:	90 e0       	ldi	r25, 0x00	; 0
    1f66:	29 c0       	rjmp	.+82     	; 0x1fba <fgetc+0x76>
    1f68:	22 ff       	sbrs	r18, 2
    1f6a:	0f c0       	rjmp	.+30     	; 0x1f8a <fgetc+0x46>
    1f6c:	e8 81       	ld	r30, Y
    1f6e:	f9 81       	ldd	r31, Y+1	; 0x01
    1f70:	80 81       	ld	r24, Z
    1f72:	08 2e       	mov	r0, r24
    1f74:	00 0c       	add	r0, r0
    1f76:	99 0b       	sbc	r25, r25
    1f78:	00 97       	sbiw	r24, 0x00	; 0
    1f7a:	19 f4       	brne	.+6      	; 0x1f82 <fgetc+0x3e>
    1f7c:	20 62       	ori	r18, 0x20	; 32
    1f7e:	2b 83       	std	Y+3, r18	; 0x03
    1f80:	1a c0       	rjmp	.+52     	; 0x1fb6 <fgetc+0x72>
    1f82:	31 96       	adiw	r30, 0x01	; 1
    1f84:	f9 83       	std	Y+1, r31	; 0x01
    1f86:	e8 83       	st	Y, r30
    1f88:	0e c0       	rjmp	.+28     	; 0x1fa6 <fgetc+0x62>
    1f8a:	ea 85       	ldd	r30, Y+10	; 0x0a
    1f8c:	fb 85       	ldd	r31, Y+11	; 0x0b
    1f8e:	09 95       	icall
    1f90:	97 ff       	sbrs	r25, 7
    1f92:	09 c0       	rjmp	.+18     	; 0x1fa6 <fgetc+0x62>
    1f94:	2b 81       	ldd	r18, Y+3	; 0x03
    1f96:	01 96       	adiw	r24, 0x01	; 1
    1f98:	11 f0       	breq	.+4      	; 0x1f9e <fgetc+0x5a>
    1f9a:	80 e2       	ldi	r24, 0x20	; 32
    1f9c:	01 c0       	rjmp	.+2      	; 0x1fa0 <fgetc+0x5c>
    1f9e:	80 e1       	ldi	r24, 0x10	; 16
    1fa0:	82 2b       	or	r24, r18
    1fa2:	8b 83       	std	Y+3, r24	; 0x03
    1fa4:	08 c0       	rjmp	.+16     	; 0x1fb6 <fgetc+0x72>
    1fa6:	2e 81       	ldd	r18, Y+6	; 0x06
    1fa8:	3f 81       	ldd	r19, Y+7	; 0x07
    1faa:	2f 5f       	subi	r18, 0xFF	; 255
    1fac:	3f 4f       	sbci	r19, 0xFF	; 255
    1fae:	3f 83       	std	Y+7, r19	; 0x07
    1fb0:	2e 83       	std	Y+6, r18	; 0x06
    1fb2:	99 27       	eor	r25, r25
    1fb4:	02 c0       	rjmp	.+4      	; 0x1fba <fgetc+0x76>
    1fb6:	8f ef       	ldi	r24, 0xFF	; 255
    1fb8:	9f ef       	ldi	r25, 0xFF	; 255
    1fba:	df 91       	pop	r29
    1fbc:	cf 91       	pop	r28
    1fbe:	08 95       	ret

00001fc0 <printf_P>:
    1fc0:	a0 e0       	ldi	r26, 0x00	; 0
    1fc2:	b0 e0       	ldi	r27, 0x00	; 0
    1fc4:	e6 ee       	ldi	r30, 0xE6	; 230
    1fc6:	ff e0       	ldi	r31, 0x0F	; 15
    1fc8:	0c 94 a5 12 	jmp	0x254a	; 0x254a <__prologue_saves__+0x1c>
    1fcc:	ae 01       	movw	r20, r28
    1fce:	49 5f       	subi	r20, 0xF9	; 249
    1fd0:	5f 4f       	sbci	r21, 0xFF	; 255
    1fd2:	da 01       	movw	r26, r20
    1fd4:	6d 91       	ld	r22, X+
    1fd6:	7d 91       	ld	r23, X+
    1fd8:	ad 01       	movw	r20, r26
    1fda:	0e ea       	ldi	r16, 0xAE	; 174
    1fdc:	12 e0       	ldi	r17, 0x02	; 2
    1fde:	f8 01       	movw	r30, r16
    1fe0:	82 81       	ldd	r24, Z+2	; 0x02
    1fe2:	93 81       	ldd	r25, Z+3	; 0x03
    1fe4:	dc 01       	movw	r26, r24
    1fe6:	13 96       	adiw	r26, 0x03	; 3
    1fe8:	2c 91       	ld	r18, X
    1fea:	13 97       	sbiw	r26, 0x03	; 3
    1fec:	28 60       	ori	r18, 0x08	; 8
    1fee:	13 96       	adiw	r26, 0x03	; 3
    1ff0:	2c 93       	st	X, r18
    1ff2:	0e 94 06 10 	call	0x200c	; 0x200c <vfprintf>
    1ff6:	d8 01       	movw	r26, r16
    1ff8:	12 96       	adiw	r26, 0x02	; 2
    1ffa:	ed 91       	ld	r30, X+
    1ffc:	fc 91       	ld	r31, X
    1ffe:	13 97       	sbiw	r26, 0x03	; 3
    2000:	23 81       	ldd	r18, Z+3	; 0x03
    2002:	27 7f       	andi	r18, 0xF7	; 247
    2004:	23 83       	std	Z+3, r18	; 0x03
    2006:	e4 e0       	ldi	r30, 0x04	; 4
    2008:	0c 94 c1 12 	jmp	0x2582	; 0x2582 <__epilogue_restores__+0x1c>

0000200c <vfprintf>:
    200c:	ab e0       	ldi	r26, 0x0B	; 11
    200e:	b0 e0       	ldi	r27, 0x00	; 0
    2010:	ec e0       	ldi	r30, 0x0C	; 12
    2012:	f0 e1       	ldi	r31, 0x10	; 16
    2014:	0c 94 97 12 	jmp	0x252e	; 0x252e <__prologue_saves__>
    2018:	6c 01       	movw	r12, r24
    201a:	7b 01       	movw	r14, r22
    201c:	8a 01       	movw	r16, r20
    201e:	fc 01       	movw	r30, r24
    2020:	17 82       	std	Z+7, r1	; 0x07
    2022:	16 82       	std	Z+6, r1	; 0x06
    2024:	83 81       	ldd	r24, Z+3	; 0x03
    2026:	81 ff       	sbrs	r24, 1
    2028:	cc c1       	rjmp	.+920    	; 0x23c2 <vfprintf+0x3b6>
    202a:	ce 01       	movw	r24, r28
    202c:	01 96       	adiw	r24, 0x01	; 1
    202e:	3c 01       	movw	r6, r24
    2030:	f6 01       	movw	r30, r12
    2032:	93 81       	ldd	r25, Z+3	; 0x03
    2034:	f7 01       	movw	r30, r14
    2036:	93 fd       	sbrc	r25, 3
    2038:	85 91       	lpm	r24, Z+
    203a:	93 ff       	sbrs	r25, 3
    203c:	81 91       	ld	r24, Z+
    203e:	7f 01       	movw	r14, r30
    2040:	88 23       	and	r24, r24
    2042:	09 f4       	brne	.+2      	; 0x2046 <vfprintf+0x3a>
    2044:	ba c1       	rjmp	.+884    	; 0x23ba <vfprintf+0x3ae>
    2046:	85 32       	cpi	r24, 0x25	; 37
    2048:	39 f4       	brne	.+14     	; 0x2058 <vfprintf+0x4c>
    204a:	93 fd       	sbrc	r25, 3
    204c:	85 91       	lpm	r24, Z+
    204e:	93 ff       	sbrs	r25, 3
    2050:	81 91       	ld	r24, Z+
    2052:	7f 01       	movw	r14, r30
    2054:	85 32       	cpi	r24, 0x25	; 37
    2056:	29 f4       	brne	.+10     	; 0x2062 <vfprintf+0x56>
    2058:	b6 01       	movw	r22, r12
    205a:	90 e0       	ldi	r25, 0x00	; 0
    205c:	0e 94 fd 11 	call	0x23fa	; 0x23fa <fputc>
    2060:	e7 cf       	rjmp	.-50     	; 0x2030 <vfprintf+0x24>
    2062:	91 2c       	mov	r9, r1
    2064:	21 2c       	mov	r2, r1
    2066:	31 2c       	mov	r3, r1
    2068:	ff e1       	ldi	r31, 0x1F	; 31
    206a:	f3 15       	cp	r31, r3
    206c:	d8 f0       	brcs	.+54     	; 0x20a4 <vfprintf+0x98>
    206e:	8b 32       	cpi	r24, 0x2B	; 43
    2070:	79 f0       	breq	.+30     	; 0x2090 <vfprintf+0x84>
    2072:	38 f4       	brcc	.+14     	; 0x2082 <vfprintf+0x76>
    2074:	80 32       	cpi	r24, 0x20	; 32
    2076:	79 f0       	breq	.+30     	; 0x2096 <vfprintf+0x8a>
    2078:	83 32       	cpi	r24, 0x23	; 35
    207a:	a1 f4       	brne	.+40     	; 0x20a4 <vfprintf+0x98>
    207c:	23 2d       	mov	r18, r3
    207e:	20 61       	ori	r18, 0x10	; 16
    2080:	1d c0       	rjmp	.+58     	; 0x20bc <vfprintf+0xb0>
    2082:	8d 32       	cpi	r24, 0x2D	; 45
    2084:	61 f0       	breq	.+24     	; 0x209e <vfprintf+0x92>
    2086:	80 33       	cpi	r24, 0x30	; 48
    2088:	69 f4       	brne	.+26     	; 0x20a4 <vfprintf+0x98>
    208a:	23 2d       	mov	r18, r3
    208c:	21 60       	ori	r18, 0x01	; 1
    208e:	16 c0       	rjmp	.+44     	; 0x20bc <vfprintf+0xb0>
    2090:	83 2d       	mov	r24, r3
    2092:	82 60       	ori	r24, 0x02	; 2
    2094:	38 2e       	mov	r3, r24
    2096:	e3 2d       	mov	r30, r3
    2098:	e4 60       	ori	r30, 0x04	; 4
    209a:	3e 2e       	mov	r3, r30
    209c:	2a c0       	rjmp	.+84     	; 0x20f2 <vfprintf+0xe6>
    209e:	f3 2d       	mov	r31, r3
    20a0:	f8 60       	ori	r31, 0x08	; 8
    20a2:	1d c0       	rjmp	.+58     	; 0x20de <vfprintf+0xd2>
    20a4:	37 fc       	sbrc	r3, 7
    20a6:	2d c0       	rjmp	.+90     	; 0x2102 <vfprintf+0xf6>
    20a8:	20 ed       	ldi	r18, 0xD0	; 208
    20aa:	28 0f       	add	r18, r24
    20ac:	2a 30       	cpi	r18, 0x0A	; 10
    20ae:	40 f0       	brcs	.+16     	; 0x20c0 <vfprintf+0xb4>
    20b0:	8e 32       	cpi	r24, 0x2E	; 46
    20b2:	b9 f4       	brne	.+46     	; 0x20e2 <vfprintf+0xd6>
    20b4:	36 fc       	sbrc	r3, 6
    20b6:	81 c1       	rjmp	.+770    	; 0x23ba <vfprintf+0x3ae>
    20b8:	23 2d       	mov	r18, r3
    20ba:	20 64       	ori	r18, 0x40	; 64
    20bc:	32 2e       	mov	r3, r18
    20be:	19 c0       	rjmp	.+50     	; 0x20f2 <vfprintf+0xe6>
    20c0:	36 fe       	sbrs	r3, 6
    20c2:	06 c0       	rjmp	.+12     	; 0x20d0 <vfprintf+0xc4>
    20c4:	8a e0       	ldi	r24, 0x0A	; 10
    20c6:	98 9e       	mul	r9, r24
    20c8:	20 0d       	add	r18, r0
    20ca:	11 24       	eor	r1, r1
    20cc:	92 2e       	mov	r9, r18
    20ce:	11 c0       	rjmp	.+34     	; 0x20f2 <vfprintf+0xe6>
    20d0:	ea e0       	ldi	r30, 0x0A	; 10
    20d2:	2e 9e       	mul	r2, r30
    20d4:	20 0d       	add	r18, r0
    20d6:	11 24       	eor	r1, r1
    20d8:	22 2e       	mov	r2, r18
    20da:	f3 2d       	mov	r31, r3
    20dc:	f0 62       	ori	r31, 0x20	; 32
    20de:	3f 2e       	mov	r3, r31
    20e0:	08 c0       	rjmp	.+16     	; 0x20f2 <vfprintf+0xe6>
    20e2:	8c 36       	cpi	r24, 0x6C	; 108
    20e4:	21 f4       	brne	.+8      	; 0x20ee <vfprintf+0xe2>
    20e6:	83 2d       	mov	r24, r3
    20e8:	80 68       	ori	r24, 0x80	; 128
    20ea:	38 2e       	mov	r3, r24
    20ec:	02 c0       	rjmp	.+4      	; 0x20f2 <vfprintf+0xe6>
    20ee:	88 36       	cpi	r24, 0x68	; 104
    20f0:	41 f4       	brne	.+16     	; 0x2102 <vfprintf+0xf6>
    20f2:	f7 01       	movw	r30, r14
    20f4:	93 fd       	sbrc	r25, 3
    20f6:	85 91       	lpm	r24, Z+
    20f8:	93 ff       	sbrs	r25, 3
    20fa:	81 91       	ld	r24, Z+
    20fc:	7f 01       	movw	r14, r30
    20fe:	81 11       	cpse	r24, r1
    2100:	b3 cf       	rjmp	.-154    	; 0x2068 <vfprintf+0x5c>
    2102:	98 2f       	mov	r25, r24
    2104:	9f 7d       	andi	r25, 0xDF	; 223
    2106:	95 54       	subi	r25, 0x45	; 69
    2108:	93 30       	cpi	r25, 0x03	; 3
    210a:	28 f4       	brcc	.+10     	; 0x2116 <vfprintf+0x10a>
    210c:	0c 5f       	subi	r16, 0xFC	; 252
    210e:	1f 4f       	sbci	r17, 0xFF	; 255
    2110:	9f e3       	ldi	r25, 0x3F	; 63
    2112:	99 83       	std	Y+1, r25	; 0x01
    2114:	0d c0       	rjmp	.+26     	; 0x2130 <vfprintf+0x124>
    2116:	83 36       	cpi	r24, 0x63	; 99
    2118:	31 f0       	breq	.+12     	; 0x2126 <vfprintf+0x11a>
    211a:	83 37       	cpi	r24, 0x73	; 115
    211c:	71 f0       	breq	.+28     	; 0x213a <vfprintf+0x12e>
    211e:	83 35       	cpi	r24, 0x53	; 83
    2120:	09 f0       	breq	.+2      	; 0x2124 <vfprintf+0x118>
    2122:	59 c0       	rjmp	.+178    	; 0x21d6 <vfprintf+0x1ca>
    2124:	21 c0       	rjmp	.+66     	; 0x2168 <vfprintf+0x15c>
    2126:	f8 01       	movw	r30, r16
    2128:	80 81       	ld	r24, Z
    212a:	89 83       	std	Y+1, r24	; 0x01
    212c:	0e 5f       	subi	r16, 0xFE	; 254
    212e:	1f 4f       	sbci	r17, 0xFF	; 255
    2130:	88 24       	eor	r8, r8
    2132:	83 94       	inc	r8
    2134:	91 2c       	mov	r9, r1
    2136:	53 01       	movw	r10, r6
    2138:	13 c0       	rjmp	.+38     	; 0x2160 <vfprintf+0x154>
    213a:	28 01       	movw	r4, r16
    213c:	f2 e0       	ldi	r31, 0x02	; 2
    213e:	4f 0e       	add	r4, r31
    2140:	51 1c       	adc	r5, r1
    2142:	f8 01       	movw	r30, r16
    2144:	a0 80       	ld	r10, Z
    2146:	b1 80       	ldd	r11, Z+1	; 0x01
    2148:	36 fe       	sbrs	r3, 6
    214a:	03 c0       	rjmp	.+6      	; 0x2152 <vfprintf+0x146>
    214c:	69 2d       	mov	r22, r9
    214e:	70 e0       	ldi	r23, 0x00	; 0
    2150:	02 c0       	rjmp	.+4      	; 0x2156 <vfprintf+0x14a>
    2152:	6f ef       	ldi	r22, 0xFF	; 255
    2154:	7f ef       	ldi	r23, 0xFF	; 255
    2156:	c5 01       	movw	r24, r10
    2158:	0e 94 f2 11 	call	0x23e4	; 0x23e4 <strnlen>
    215c:	4c 01       	movw	r8, r24
    215e:	82 01       	movw	r16, r4
    2160:	f3 2d       	mov	r31, r3
    2162:	ff 77       	andi	r31, 0x7F	; 127
    2164:	3f 2e       	mov	r3, r31
    2166:	16 c0       	rjmp	.+44     	; 0x2194 <vfprintf+0x188>
    2168:	28 01       	movw	r4, r16
    216a:	22 e0       	ldi	r18, 0x02	; 2
    216c:	42 0e       	add	r4, r18
    216e:	51 1c       	adc	r5, r1
    2170:	f8 01       	movw	r30, r16
    2172:	a0 80       	ld	r10, Z
    2174:	b1 80       	ldd	r11, Z+1	; 0x01
    2176:	36 fe       	sbrs	r3, 6
    2178:	03 c0       	rjmp	.+6      	; 0x2180 <vfprintf+0x174>
    217a:	69 2d       	mov	r22, r9
    217c:	70 e0       	ldi	r23, 0x00	; 0
    217e:	02 c0       	rjmp	.+4      	; 0x2184 <vfprintf+0x178>
    2180:	6f ef       	ldi	r22, 0xFF	; 255
    2182:	7f ef       	ldi	r23, 0xFF	; 255
    2184:	c5 01       	movw	r24, r10
    2186:	0e 94 e7 11 	call	0x23ce	; 0x23ce <strnlen_P>
    218a:	4c 01       	movw	r8, r24
    218c:	f3 2d       	mov	r31, r3
    218e:	f0 68       	ori	r31, 0x80	; 128
    2190:	3f 2e       	mov	r3, r31
    2192:	82 01       	movw	r16, r4
    2194:	33 fc       	sbrc	r3, 3
    2196:	1b c0       	rjmp	.+54     	; 0x21ce <vfprintf+0x1c2>
    2198:	82 2d       	mov	r24, r2
    219a:	90 e0       	ldi	r25, 0x00	; 0
    219c:	88 16       	cp	r8, r24
    219e:	99 06       	cpc	r9, r25
    21a0:	b0 f4       	brcc	.+44     	; 0x21ce <vfprintf+0x1c2>
    21a2:	b6 01       	movw	r22, r12
    21a4:	80 e2       	ldi	r24, 0x20	; 32
    21a6:	90 e0       	ldi	r25, 0x00	; 0
    21a8:	0e 94 fd 11 	call	0x23fa	; 0x23fa <fputc>
    21ac:	2a 94       	dec	r2
    21ae:	f4 cf       	rjmp	.-24     	; 0x2198 <vfprintf+0x18c>
    21b0:	f5 01       	movw	r30, r10
    21b2:	37 fc       	sbrc	r3, 7
    21b4:	85 91       	lpm	r24, Z+
    21b6:	37 fe       	sbrs	r3, 7
    21b8:	81 91       	ld	r24, Z+
    21ba:	5f 01       	movw	r10, r30
    21bc:	b6 01       	movw	r22, r12
    21be:	90 e0       	ldi	r25, 0x00	; 0
    21c0:	0e 94 fd 11 	call	0x23fa	; 0x23fa <fputc>
    21c4:	21 10       	cpse	r2, r1
    21c6:	2a 94       	dec	r2
    21c8:	21 e0       	ldi	r18, 0x01	; 1
    21ca:	82 1a       	sub	r8, r18
    21cc:	91 08       	sbc	r9, r1
    21ce:	81 14       	cp	r8, r1
    21d0:	91 04       	cpc	r9, r1
    21d2:	71 f7       	brne	.-36     	; 0x21b0 <vfprintf+0x1a4>
    21d4:	e8 c0       	rjmp	.+464    	; 0x23a6 <vfprintf+0x39a>
    21d6:	84 36       	cpi	r24, 0x64	; 100
    21d8:	11 f0       	breq	.+4      	; 0x21de <vfprintf+0x1d2>
    21da:	89 36       	cpi	r24, 0x69	; 105
    21dc:	41 f5       	brne	.+80     	; 0x222e <vfprintf+0x222>
    21de:	f8 01       	movw	r30, r16
    21e0:	37 fe       	sbrs	r3, 7
    21e2:	07 c0       	rjmp	.+14     	; 0x21f2 <vfprintf+0x1e6>
    21e4:	60 81       	ld	r22, Z
    21e6:	71 81       	ldd	r23, Z+1	; 0x01
    21e8:	82 81       	ldd	r24, Z+2	; 0x02
    21ea:	93 81       	ldd	r25, Z+3	; 0x03
    21ec:	0c 5f       	subi	r16, 0xFC	; 252
    21ee:	1f 4f       	sbci	r17, 0xFF	; 255
    21f0:	08 c0       	rjmp	.+16     	; 0x2202 <vfprintf+0x1f6>
    21f2:	60 81       	ld	r22, Z
    21f4:	71 81       	ldd	r23, Z+1	; 0x01
    21f6:	07 2e       	mov	r0, r23
    21f8:	00 0c       	add	r0, r0
    21fa:	88 0b       	sbc	r24, r24
    21fc:	99 0b       	sbc	r25, r25
    21fe:	0e 5f       	subi	r16, 0xFE	; 254
    2200:	1f 4f       	sbci	r17, 0xFF	; 255
    2202:	f3 2d       	mov	r31, r3
    2204:	ff 76       	andi	r31, 0x6F	; 111
    2206:	3f 2e       	mov	r3, r31
    2208:	97 ff       	sbrs	r25, 7
    220a:	09 c0       	rjmp	.+18     	; 0x221e <vfprintf+0x212>
    220c:	90 95       	com	r25
    220e:	80 95       	com	r24
    2210:	70 95       	com	r23
    2212:	61 95       	neg	r22
    2214:	7f 4f       	sbci	r23, 0xFF	; 255
    2216:	8f 4f       	sbci	r24, 0xFF	; 255
    2218:	9f 4f       	sbci	r25, 0xFF	; 255
    221a:	f0 68       	ori	r31, 0x80	; 128
    221c:	3f 2e       	mov	r3, r31
    221e:	2a e0       	ldi	r18, 0x0A	; 10
    2220:	30 e0       	ldi	r19, 0x00	; 0
    2222:	a3 01       	movw	r20, r6
    2224:	0e 94 39 12 	call	0x2472	; 0x2472 <__ultoa_invert>
    2228:	88 2e       	mov	r8, r24
    222a:	86 18       	sub	r8, r6
    222c:	45 c0       	rjmp	.+138    	; 0x22b8 <vfprintf+0x2ac>
    222e:	85 37       	cpi	r24, 0x75	; 117
    2230:	31 f4       	brne	.+12     	; 0x223e <vfprintf+0x232>
    2232:	23 2d       	mov	r18, r3
    2234:	2f 7e       	andi	r18, 0xEF	; 239
    2236:	b2 2e       	mov	r11, r18
    2238:	2a e0       	ldi	r18, 0x0A	; 10
    223a:	30 e0       	ldi	r19, 0x00	; 0
    223c:	25 c0       	rjmp	.+74     	; 0x2288 <vfprintf+0x27c>
    223e:	93 2d       	mov	r25, r3
    2240:	99 7f       	andi	r25, 0xF9	; 249
    2242:	b9 2e       	mov	r11, r25
    2244:	8f 36       	cpi	r24, 0x6F	; 111
    2246:	c1 f0       	breq	.+48     	; 0x2278 <vfprintf+0x26c>
    2248:	18 f4       	brcc	.+6      	; 0x2250 <vfprintf+0x244>
    224a:	88 35       	cpi	r24, 0x58	; 88
    224c:	79 f0       	breq	.+30     	; 0x226c <vfprintf+0x260>
    224e:	b5 c0       	rjmp	.+362    	; 0x23ba <vfprintf+0x3ae>
    2250:	80 37       	cpi	r24, 0x70	; 112
    2252:	19 f0       	breq	.+6      	; 0x225a <vfprintf+0x24e>
    2254:	88 37       	cpi	r24, 0x78	; 120
    2256:	21 f0       	breq	.+8      	; 0x2260 <vfprintf+0x254>
    2258:	b0 c0       	rjmp	.+352    	; 0x23ba <vfprintf+0x3ae>
    225a:	e9 2f       	mov	r30, r25
    225c:	e0 61       	ori	r30, 0x10	; 16
    225e:	be 2e       	mov	r11, r30
    2260:	b4 fe       	sbrs	r11, 4
    2262:	0d c0       	rjmp	.+26     	; 0x227e <vfprintf+0x272>
    2264:	fb 2d       	mov	r31, r11
    2266:	f4 60       	ori	r31, 0x04	; 4
    2268:	bf 2e       	mov	r11, r31
    226a:	09 c0       	rjmp	.+18     	; 0x227e <vfprintf+0x272>
    226c:	34 fe       	sbrs	r3, 4
    226e:	0a c0       	rjmp	.+20     	; 0x2284 <vfprintf+0x278>
    2270:	29 2f       	mov	r18, r25
    2272:	26 60       	ori	r18, 0x06	; 6
    2274:	b2 2e       	mov	r11, r18
    2276:	06 c0       	rjmp	.+12     	; 0x2284 <vfprintf+0x278>
    2278:	28 e0       	ldi	r18, 0x08	; 8
    227a:	30 e0       	ldi	r19, 0x00	; 0
    227c:	05 c0       	rjmp	.+10     	; 0x2288 <vfprintf+0x27c>
    227e:	20 e1       	ldi	r18, 0x10	; 16
    2280:	30 e0       	ldi	r19, 0x00	; 0
    2282:	02 c0       	rjmp	.+4      	; 0x2288 <vfprintf+0x27c>
    2284:	20 e1       	ldi	r18, 0x10	; 16
    2286:	32 e0       	ldi	r19, 0x02	; 2
    2288:	f8 01       	movw	r30, r16
    228a:	b7 fe       	sbrs	r11, 7
    228c:	07 c0       	rjmp	.+14     	; 0x229c <vfprintf+0x290>
    228e:	60 81       	ld	r22, Z
    2290:	71 81       	ldd	r23, Z+1	; 0x01
    2292:	82 81       	ldd	r24, Z+2	; 0x02
    2294:	93 81       	ldd	r25, Z+3	; 0x03
    2296:	0c 5f       	subi	r16, 0xFC	; 252
    2298:	1f 4f       	sbci	r17, 0xFF	; 255
    229a:	06 c0       	rjmp	.+12     	; 0x22a8 <vfprintf+0x29c>
    229c:	60 81       	ld	r22, Z
    229e:	71 81       	ldd	r23, Z+1	; 0x01
    22a0:	80 e0       	ldi	r24, 0x00	; 0
    22a2:	90 e0       	ldi	r25, 0x00	; 0
    22a4:	0e 5f       	subi	r16, 0xFE	; 254
    22a6:	1f 4f       	sbci	r17, 0xFF	; 255
    22a8:	a3 01       	movw	r20, r6
    22aa:	0e 94 39 12 	call	0x2472	; 0x2472 <__ultoa_invert>
    22ae:	88 2e       	mov	r8, r24
    22b0:	86 18       	sub	r8, r6
    22b2:	fb 2d       	mov	r31, r11
    22b4:	ff 77       	andi	r31, 0x7F	; 127
    22b6:	3f 2e       	mov	r3, r31
    22b8:	36 fe       	sbrs	r3, 6
    22ba:	0d c0       	rjmp	.+26     	; 0x22d6 <vfprintf+0x2ca>
    22bc:	23 2d       	mov	r18, r3
    22be:	2e 7f       	andi	r18, 0xFE	; 254
    22c0:	a2 2e       	mov	r10, r18
    22c2:	89 14       	cp	r8, r9
    22c4:	58 f4       	brcc	.+22     	; 0x22dc <vfprintf+0x2d0>
    22c6:	34 fe       	sbrs	r3, 4
    22c8:	0b c0       	rjmp	.+22     	; 0x22e0 <vfprintf+0x2d4>
    22ca:	32 fc       	sbrc	r3, 2
    22cc:	09 c0       	rjmp	.+18     	; 0x22e0 <vfprintf+0x2d4>
    22ce:	83 2d       	mov	r24, r3
    22d0:	8e 7e       	andi	r24, 0xEE	; 238
    22d2:	a8 2e       	mov	r10, r24
    22d4:	05 c0       	rjmp	.+10     	; 0x22e0 <vfprintf+0x2d4>
    22d6:	b8 2c       	mov	r11, r8
    22d8:	a3 2c       	mov	r10, r3
    22da:	03 c0       	rjmp	.+6      	; 0x22e2 <vfprintf+0x2d6>
    22dc:	b8 2c       	mov	r11, r8
    22de:	01 c0       	rjmp	.+2      	; 0x22e2 <vfprintf+0x2d6>
    22e0:	b9 2c       	mov	r11, r9
    22e2:	a4 fe       	sbrs	r10, 4
    22e4:	0f c0       	rjmp	.+30     	; 0x2304 <vfprintf+0x2f8>
    22e6:	fe 01       	movw	r30, r28
    22e8:	e8 0d       	add	r30, r8
    22ea:	f1 1d       	adc	r31, r1
    22ec:	80 81       	ld	r24, Z
    22ee:	80 33       	cpi	r24, 0x30	; 48
    22f0:	21 f4       	brne	.+8      	; 0x22fa <vfprintf+0x2ee>
    22f2:	9a 2d       	mov	r25, r10
    22f4:	99 7e       	andi	r25, 0xE9	; 233
    22f6:	a9 2e       	mov	r10, r25
    22f8:	09 c0       	rjmp	.+18     	; 0x230c <vfprintf+0x300>
    22fa:	a2 fe       	sbrs	r10, 2
    22fc:	06 c0       	rjmp	.+12     	; 0x230a <vfprintf+0x2fe>
    22fe:	b3 94       	inc	r11
    2300:	b3 94       	inc	r11
    2302:	04 c0       	rjmp	.+8      	; 0x230c <vfprintf+0x300>
    2304:	8a 2d       	mov	r24, r10
    2306:	86 78       	andi	r24, 0x86	; 134
    2308:	09 f0       	breq	.+2      	; 0x230c <vfprintf+0x300>
    230a:	b3 94       	inc	r11
    230c:	a3 fc       	sbrc	r10, 3
    230e:	11 c0       	rjmp	.+34     	; 0x2332 <vfprintf+0x326>
    2310:	a0 fe       	sbrs	r10, 0
    2312:	06 c0       	rjmp	.+12     	; 0x2320 <vfprintf+0x314>
    2314:	b2 14       	cp	r11, r2
    2316:	88 f4       	brcc	.+34     	; 0x233a <vfprintf+0x32e>
    2318:	28 0c       	add	r2, r8
    231a:	92 2c       	mov	r9, r2
    231c:	9b 18       	sub	r9, r11
    231e:	0e c0       	rjmp	.+28     	; 0x233c <vfprintf+0x330>
    2320:	b2 14       	cp	r11, r2
    2322:	60 f4       	brcc	.+24     	; 0x233c <vfprintf+0x330>
    2324:	b6 01       	movw	r22, r12
    2326:	80 e2       	ldi	r24, 0x20	; 32
    2328:	90 e0       	ldi	r25, 0x00	; 0
    232a:	0e 94 fd 11 	call	0x23fa	; 0x23fa <fputc>
    232e:	b3 94       	inc	r11
    2330:	f7 cf       	rjmp	.-18     	; 0x2320 <vfprintf+0x314>
    2332:	b2 14       	cp	r11, r2
    2334:	18 f4       	brcc	.+6      	; 0x233c <vfprintf+0x330>
    2336:	2b 18       	sub	r2, r11
    2338:	02 c0       	rjmp	.+4      	; 0x233e <vfprintf+0x332>
    233a:	98 2c       	mov	r9, r8
    233c:	21 2c       	mov	r2, r1
    233e:	a4 fe       	sbrs	r10, 4
    2340:	10 c0       	rjmp	.+32     	; 0x2362 <vfprintf+0x356>
    2342:	b6 01       	movw	r22, r12
    2344:	80 e3       	ldi	r24, 0x30	; 48
    2346:	90 e0       	ldi	r25, 0x00	; 0
    2348:	0e 94 fd 11 	call	0x23fa	; 0x23fa <fputc>
    234c:	a2 fe       	sbrs	r10, 2
    234e:	17 c0       	rjmp	.+46     	; 0x237e <vfprintf+0x372>
    2350:	a1 fc       	sbrc	r10, 1
    2352:	03 c0       	rjmp	.+6      	; 0x235a <vfprintf+0x34e>
    2354:	88 e7       	ldi	r24, 0x78	; 120
    2356:	90 e0       	ldi	r25, 0x00	; 0
    2358:	02 c0       	rjmp	.+4      	; 0x235e <vfprintf+0x352>
    235a:	88 e5       	ldi	r24, 0x58	; 88
    235c:	90 e0       	ldi	r25, 0x00	; 0
    235e:	b6 01       	movw	r22, r12
    2360:	0c c0       	rjmp	.+24     	; 0x237a <vfprintf+0x36e>
    2362:	8a 2d       	mov	r24, r10
    2364:	86 78       	andi	r24, 0x86	; 134
    2366:	59 f0       	breq	.+22     	; 0x237e <vfprintf+0x372>
    2368:	a1 fe       	sbrs	r10, 1
    236a:	02 c0       	rjmp	.+4      	; 0x2370 <vfprintf+0x364>
    236c:	8b e2       	ldi	r24, 0x2B	; 43
    236e:	01 c0       	rjmp	.+2      	; 0x2372 <vfprintf+0x366>
    2370:	80 e2       	ldi	r24, 0x20	; 32
    2372:	a7 fc       	sbrc	r10, 7
    2374:	8d e2       	ldi	r24, 0x2D	; 45
    2376:	b6 01       	movw	r22, r12
    2378:	90 e0       	ldi	r25, 0x00	; 0
    237a:	0e 94 fd 11 	call	0x23fa	; 0x23fa <fputc>
    237e:	89 14       	cp	r8, r9
    2380:	38 f4       	brcc	.+14     	; 0x2390 <vfprintf+0x384>
    2382:	b6 01       	movw	r22, r12
    2384:	80 e3       	ldi	r24, 0x30	; 48
    2386:	90 e0       	ldi	r25, 0x00	; 0
    2388:	0e 94 fd 11 	call	0x23fa	; 0x23fa <fputc>
    238c:	9a 94       	dec	r9
    238e:	f7 cf       	rjmp	.-18     	; 0x237e <vfprintf+0x372>
    2390:	8a 94       	dec	r8
    2392:	f3 01       	movw	r30, r6
    2394:	e8 0d       	add	r30, r8
    2396:	f1 1d       	adc	r31, r1
    2398:	80 81       	ld	r24, Z
    239a:	b6 01       	movw	r22, r12
    239c:	90 e0       	ldi	r25, 0x00	; 0
    239e:	0e 94 fd 11 	call	0x23fa	; 0x23fa <fputc>
    23a2:	81 10       	cpse	r8, r1
    23a4:	f5 cf       	rjmp	.-22     	; 0x2390 <vfprintf+0x384>
    23a6:	22 20       	and	r2, r2
    23a8:	09 f4       	brne	.+2      	; 0x23ac <vfprintf+0x3a0>
    23aa:	42 ce       	rjmp	.-892    	; 0x2030 <vfprintf+0x24>
    23ac:	b6 01       	movw	r22, r12
    23ae:	80 e2       	ldi	r24, 0x20	; 32
    23b0:	90 e0       	ldi	r25, 0x00	; 0
    23b2:	0e 94 fd 11 	call	0x23fa	; 0x23fa <fputc>
    23b6:	2a 94       	dec	r2
    23b8:	f6 cf       	rjmp	.-20     	; 0x23a6 <vfprintf+0x39a>
    23ba:	f6 01       	movw	r30, r12
    23bc:	86 81       	ldd	r24, Z+6	; 0x06
    23be:	97 81       	ldd	r25, Z+7	; 0x07
    23c0:	02 c0       	rjmp	.+4      	; 0x23c6 <vfprintf+0x3ba>
    23c2:	8f ef       	ldi	r24, 0xFF	; 255
    23c4:	9f ef       	ldi	r25, 0xFF	; 255
    23c6:	2b 96       	adiw	r28, 0x0b	; 11
    23c8:	e2 e1       	ldi	r30, 0x12	; 18
    23ca:	0c 94 b3 12 	jmp	0x2566	; 0x2566 <__epilogue_restores__>

000023ce <strnlen_P>:
    23ce:	fc 01       	movw	r30, r24
    23d0:	05 90       	lpm	r0, Z+
    23d2:	61 50       	subi	r22, 0x01	; 1
    23d4:	70 40       	sbci	r23, 0x00	; 0
    23d6:	01 10       	cpse	r0, r1
    23d8:	d8 f7       	brcc	.-10     	; 0x23d0 <strnlen_P+0x2>
    23da:	80 95       	com	r24
    23dc:	90 95       	com	r25
    23de:	8e 0f       	add	r24, r30
    23e0:	9f 1f       	adc	r25, r31
    23e2:	08 95       	ret

000023e4 <strnlen>:
    23e4:	fc 01       	movw	r30, r24
    23e6:	61 50       	subi	r22, 0x01	; 1
    23e8:	70 40       	sbci	r23, 0x00	; 0
    23ea:	01 90       	ld	r0, Z+
    23ec:	01 10       	cpse	r0, r1
    23ee:	d8 f7       	brcc	.-10     	; 0x23e6 <strnlen+0x2>
    23f0:	80 95       	com	r24
    23f2:	90 95       	com	r25
    23f4:	8e 0f       	add	r24, r30
    23f6:	9f 1f       	adc	r25, r31
    23f8:	08 95       	ret

000023fa <fputc>:
    23fa:	0f 93       	push	r16
    23fc:	1f 93       	push	r17
    23fe:	cf 93       	push	r28
    2400:	df 93       	push	r29
    2402:	fb 01       	movw	r30, r22
    2404:	23 81       	ldd	r18, Z+3	; 0x03
    2406:	21 fd       	sbrc	r18, 1
    2408:	03 c0       	rjmp	.+6      	; 0x2410 <fputc+0x16>
    240a:	8f ef       	ldi	r24, 0xFF	; 255
    240c:	9f ef       	ldi	r25, 0xFF	; 255
    240e:	2c c0       	rjmp	.+88     	; 0x2468 <fputc+0x6e>
    2410:	22 ff       	sbrs	r18, 2
    2412:	16 c0       	rjmp	.+44     	; 0x2440 <fputc+0x46>
    2414:	46 81       	ldd	r20, Z+6	; 0x06
    2416:	57 81       	ldd	r21, Z+7	; 0x07
    2418:	24 81       	ldd	r18, Z+4	; 0x04
    241a:	35 81       	ldd	r19, Z+5	; 0x05
    241c:	42 17       	cp	r20, r18
    241e:	53 07       	cpc	r21, r19
    2420:	44 f4       	brge	.+16     	; 0x2432 <fputc+0x38>
    2422:	a0 81       	ld	r26, Z
    2424:	b1 81       	ldd	r27, Z+1	; 0x01
    2426:	9d 01       	movw	r18, r26
    2428:	2f 5f       	subi	r18, 0xFF	; 255
    242a:	3f 4f       	sbci	r19, 0xFF	; 255
    242c:	31 83       	std	Z+1, r19	; 0x01
    242e:	20 83       	st	Z, r18
    2430:	8c 93       	st	X, r24
    2432:	26 81       	ldd	r18, Z+6	; 0x06
    2434:	37 81       	ldd	r19, Z+7	; 0x07
    2436:	2f 5f       	subi	r18, 0xFF	; 255
    2438:	3f 4f       	sbci	r19, 0xFF	; 255
    243a:	37 83       	std	Z+7, r19	; 0x07
    243c:	26 83       	std	Z+6, r18	; 0x06
    243e:	14 c0       	rjmp	.+40     	; 0x2468 <fputc+0x6e>
    2440:	8b 01       	movw	r16, r22
    2442:	ec 01       	movw	r28, r24
    2444:	fb 01       	movw	r30, r22
    2446:	00 84       	ldd	r0, Z+8	; 0x08
    2448:	f1 85       	ldd	r31, Z+9	; 0x09
    244a:	e0 2d       	mov	r30, r0
    244c:	09 95       	icall
    244e:	89 2b       	or	r24, r25
    2450:	e1 f6       	brne	.-72     	; 0x240a <fputc+0x10>
    2452:	d8 01       	movw	r26, r16
    2454:	16 96       	adiw	r26, 0x06	; 6
    2456:	8d 91       	ld	r24, X+
    2458:	9c 91       	ld	r25, X
    245a:	17 97       	sbiw	r26, 0x07	; 7
    245c:	01 96       	adiw	r24, 0x01	; 1
    245e:	17 96       	adiw	r26, 0x07	; 7
    2460:	9c 93       	st	X, r25
    2462:	8e 93       	st	-X, r24
    2464:	16 97       	sbiw	r26, 0x06	; 6
    2466:	ce 01       	movw	r24, r28
    2468:	df 91       	pop	r29
    246a:	cf 91       	pop	r28
    246c:	1f 91       	pop	r17
    246e:	0f 91       	pop	r16
    2470:	08 95       	ret

00002472 <__ultoa_invert>:
    2472:	fa 01       	movw	r30, r20
    2474:	aa 27       	eor	r26, r26
    2476:	28 30       	cpi	r18, 0x08	; 8
    2478:	51 f1       	breq	.+84     	; 0x24ce <__ultoa_invert+0x5c>
    247a:	20 31       	cpi	r18, 0x10	; 16
    247c:	81 f1       	breq	.+96     	; 0x24de <__ultoa_invert+0x6c>
    247e:	e8 94       	clt
    2480:	6f 93       	push	r22
    2482:	6e 7f       	andi	r22, 0xFE	; 254
    2484:	6e 5f       	subi	r22, 0xFE	; 254
    2486:	7f 4f       	sbci	r23, 0xFF	; 255
    2488:	8f 4f       	sbci	r24, 0xFF	; 255
    248a:	9f 4f       	sbci	r25, 0xFF	; 255
    248c:	af 4f       	sbci	r26, 0xFF	; 255
    248e:	b1 e0       	ldi	r27, 0x01	; 1
    2490:	3e d0       	rcall	.+124    	; 0x250e <__ultoa_invert+0x9c>
    2492:	b4 e0       	ldi	r27, 0x04	; 4
    2494:	3c d0       	rcall	.+120    	; 0x250e <__ultoa_invert+0x9c>
    2496:	67 0f       	add	r22, r23
    2498:	78 1f       	adc	r23, r24
    249a:	89 1f       	adc	r24, r25
    249c:	9a 1f       	adc	r25, r26
    249e:	a1 1d       	adc	r26, r1
    24a0:	68 0f       	add	r22, r24
    24a2:	79 1f       	adc	r23, r25
    24a4:	8a 1f       	adc	r24, r26
    24a6:	91 1d       	adc	r25, r1
    24a8:	a1 1d       	adc	r26, r1
    24aa:	6a 0f       	add	r22, r26
    24ac:	71 1d       	adc	r23, r1
    24ae:	81 1d       	adc	r24, r1
    24b0:	91 1d       	adc	r25, r1
    24b2:	a1 1d       	adc	r26, r1
    24b4:	20 d0       	rcall	.+64     	; 0x24f6 <__ultoa_invert+0x84>
    24b6:	09 f4       	brne	.+2      	; 0x24ba <__ultoa_invert+0x48>
    24b8:	68 94       	set
    24ba:	3f 91       	pop	r19
    24bc:	2a e0       	ldi	r18, 0x0A	; 10
    24be:	26 9f       	mul	r18, r22
    24c0:	11 24       	eor	r1, r1
    24c2:	30 19       	sub	r19, r0
    24c4:	30 5d       	subi	r19, 0xD0	; 208
    24c6:	31 93       	st	Z+, r19
    24c8:	de f6       	brtc	.-74     	; 0x2480 <__ultoa_invert+0xe>
    24ca:	cf 01       	movw	r24, r30
    24cc:	08 95       	ret
    24ce:	46 2f       	mov	r20, r22
    24d0:	47 70       	andi	r20, 0x07	; 7
    24d2:	40 5d       	subi	r20, 0xD0	; 208
    24d4:	41 93       	st	Z+, r20
    24d6:	b3 e0       	ldi	r27, 0x03	; 3
    24d8:	0f d0       	rcall	.+30     	; 0x24f8 <__ultoa_invert+0x86>
    24da:	c9 f7       	brne	.-14     	; 0x24ce <__ultoa_invert+0x5c>
    24dc:	f6 cf       	rjmp	.-20     	; 0x24ca <__ultoa_invert+0x58>
    24de:	46 2f       	mov	r20, r22
    24e0:	4f 70       	andi	r20, 0x0F	; 15
    24e2:	40 5d       	subi	r20, 0xD0	; 208
    24e4:	4a 33       	cpi	r20, 0x3A	; 58
    24e6:	18 f0       	brcs	.+6      	; 0x24ee <__ultoa_invert+0x7c>
    24e8:	49 5d       	subi	r20, 0xD9	; 217
    24ea:	31 fd       	sbrc	r19, 1
    24ec:	40 52       	subi	r20, 0x20	; 32
    24ee:	41 93       	st	Z+, r20
    24f0:	02 d0       	rcall	.+4      	; 0x24f6 <__ultoa_invert+0x84>
    24f2:	a9 f7       	brne	.-22     	; 0x24de <__ultoa_invert+0x6c>
    24f4:	ea cf       	rjmp	.-44     	; 0x24ca <__ultoa_invert+0x58>
    24f6:	b4 e0       	ldi	r27, 0x04	; 4
    24f8:	a6 95       	lsr	r26
    24fa:	97 95       	ror	r25
    24fc:	87 95       	ror	r24
    24fe:	77 95       	ror	r23
    2500:	67 95       	ror	r22
    2502:	ba 95       	dec	r27
    2504:	c9 f7       	brne	.-14     	; 0x24f8 <__ultoa_invert+0x86>
    2506:	00 97       	sbiw	r24, 0x00	; 0
    2508:	61 05       	cpc	r22, r1
    250a:	71 05       	cpc	r23, r1
    250c:	08 95       	ret
    250e:	9b 01       	movw	r18, r22
    2510:	ac 01       	movw	r20, r24
    2512:	0a 2e       	mov	r0, r26
    2514:	06 94       	lsr	r0
    2516:	57 95       	ror	r21
    2518:	47 95       	ror	r20
    251a:	37 95       	ror	r19
    251c:	27 95       	ror	r18
    251e:	ba 95       	dec	r27
    2520:	c9 f7       	brne	.-14     	; 0x2514 <__ultoa_invert+0xa2>
    2522:	62 0f       	add	r22, r18
    2524:	73 1f       	adc	r23, r19
    2526:	84 1f       	adc	r24, r20
    2528:	95 1f       	adc	r25, r21
    252a:	a0 1d       	adc	r26, r0
    252c:	08 95       	ret

0000252e <__prologue_saves__>:
    252e:	2f 92       	push	r2
    2530:	3f 92       	push	r3
    2532:	4f 92       	push	r4
    2534:	5f 92       	push	r5
    2536:	6f 92       	push	r6
    2538:	7f 92       	push	r7
    253a:	8f 92       	push	r8
    253c:	9f 92       	push	r9
    253e:	af 92       	push	r10
    2540:	bf 92       	push	r11
    2542:	cf 92       	push	r12
    2544:	df 92       	push	r13
    2546:	ef 92       	push	r14
    2548:	ff 92       	push	r15
    254a:	0f 93       	push	r16
    254c:	1f 93       	push	r17
    254e:	cf 93       	push	r28
    2550:	df 93       	push	r29
    2552:	cd b7       	in	r28, 0x3d	; 61
    2554:	de b7       	in	r29, 0x3e	; 62
    2556:	ca 1b       	sub	r28, r26
    2558:	db 0b       	sbc	r29, r27
    255a:	0f b6       	in	r0, 0x3f	; 63
    255c:	f8 94       	cli
    255e:	de bf       	out	0x3e, r29	; 62
    2560:	0f be       	out	0x3f, r0	; 63
    2562:	cd bf       	out	0x3d, r28	; 61
    2564:	09 94       	ijmp

00002566 <__epilogue_restores__>:
    2566:	2a 88       	ldd	r2, Y+18	; 0x12
    2568:	39 88       	ldd	r3, Y+17	; 0x11
    256a:	48 88       	ldd	r4, Y+16	; 0x10
    256c:	5f 84       	ldd	r5, Y+15	; 0x0f
    256e:	6e 84       	ldd	r6, Y+14	; 0x0e
    2570:	7d 84       	ldd	r7, Y+13	; 0x0d
    2572:	8c 84       	ldd	r8, Y+12	; 0x0c
    2574:	9b 84       	ldd	r9, Y+11	; 0x0b
    2576:	aa 84       	ldd	r10, Y+10	; 0x0a
    2578:	b9 84       	ldd	r11, Y+9	; 0x09
    257a:	c8 84       	ldd	r12, Y+8	; 0x08
    257c:	df 80       	ldd	r13, Y+7	; 0x07
    257e:	ee 80       	ldd	r14, Y+6	; 0x06
    2580:	fd 80       	ldd	r15, Y+5	; 0x05
    2582:	0c 81       	ldd	r16, Y+4	; 0x04
    2584:	1b 81       	ldd	r17, Y+3	; 0x03
    2586:	aa 81       	ldd	r26, Y+2	; 0x02
    2588:	b9 81       	ldd	r27, Y+1	; 0x01
    258a:	ce 0f       	add	r28, r30
    258c:	d1 1d       	adc	r29, r1
    258e:	0f b6       	in	r0, 0x3f	; 63
    2590:	f8 94       	cli
    2592:	de bf       	out	0x3e, r29	; 62
    2594:	0f be       	out	0x3f, r0	; 63
    2596:	cd bf       	out	0x3d, r28	; 61
    2598:	ed 01       	movw	r28, r26
    259a:	08 95       	ret

0000259c <_exit>:
    259c:	f8 94       	cli

0000259e <__stop_program>:
    259e:	ff cf       	rjmp	.-2      	; 0x259e <__stop_program>
